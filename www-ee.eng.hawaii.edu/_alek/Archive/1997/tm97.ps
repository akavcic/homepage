%!PS (but not EPSF; comments have been disabled)
%DVIPSCommandLine: dvips -o paper.ps paper
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1998.02.21:2222
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
TeXDict begin 40258431 52099146 1000 600 600 (paper.dvi)
@start /Fa 2 51 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>
49 D<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C127800
3013FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA038038
0600185A5A383FFFF85AB512F0A216217CA01E>I E /Fb 6 109
df<90B6FC16E0903907C003F0ED00F8494813FC167C167EA249C7127C16FCA2ED01F801
3EEB03F0ED07E0ED1F8090393FFFFE005B90397C003F80ED07C0ED03E04914F01501A216
F8484814F01503A2ED07E04848EB0FC0ED1F80ED3F00000714FEB612F815C027227CA12E
>66 D<903AFFFE07FFF0A2903A07C0003E00A249485BA449C75AA4013E495AA3013FB5FC
495C90387C0003A349495AA44848495AA4484849C7FCA300075C3AFFFE07FFF0A22C227C
A132>72 D<001FB612FCA29039003E007C003C151C00385B12300070151812605C5AA3C6
48481300A4495AA4495AA4495AA449C8FCA35B381FFFFE5C26227DA124>84
D<013FB512F0A291388007E0D97C0013C00178EB0F800170EB1F0049133E495B5D484848
5A4A5A4A5AC7485A4AC7FC143E5C14FC495A495A495A90380FC006EB1F80EB3F00017E5B
5B4848131C4848131848481338485A48485B393F0001F0007E130FB65AA224227CA12A>
90 D<13F8EA0FF0A21200A2485AA4485AA43807801E147FEB81C3EB8387380F060F495A
1318EB700E4848C7FCA213FCEA1E7EEA3C0F80EB0781158039780F0300A21402EB070600
F0138CEB03F8386000F019247CA221>107 D<EA01F0EA1FE0A21201A2EA03C0A4EA0780
A4EA0F00A4121EA45AA45AA213401360EAF0C0A3EAF1801271EA3F00121E0C247DA214>
I E /Fc 2 49 df<B712C0A322037A8D30>0 D<EA01E0EA03F0A4EA07E0A213C0120FA2
1380A2EA1F00A2121EA2123E123CA25AA3127012F05A12600C1A7E9B12>48
D E /Fd 8 113 df<B812C0A32A037A9137>0 D<123C127E12FFA4127E123C08087A9414
>I<130C131EA50060EB01800078130739FC0C0FC0007FEB3F80393F8C7F003807CCF838
01FFE038007F80011EC7FCEB7F803801FFE03807CCF8383F8C7F397F0C3F8000FCEB0FC0
39781E078000601301000090C7FCA5130C1A1D7C9E23>3 D<EB7F803801FFE0000713F8
380FC0FC381F003E003C130F00387F007814800070130300F014C0481301A76C13030070
14800078130700381400003C5B001F133E380FC0FC6CB45A000113E038007F801A1B7C9D
23>14 D<170EA3170F8384170384170184717E1878187C84180FF007C0BA12F819FC19F8
CBEA07C0F00F00183E601878604D5A60170360170795C7FC5F170EA33E237CA147>33
D<137813FE1201A3120313FCA3EA07F8A313F0A2EA0FE0A313C0121F1380A3EA3F00A312
3E127E127CA35AA35A0F227EA413>48 D<D93F80EC07F0D9FFF0EC3FFC000301FC91B5FC
4801FF903901F80780D80F80903A8007C001C03D1E003FC00F8000E0486D6C48C7127000
3890260FF03E143048902607F83C14386E6C48141800606D6C5A00E06D6C48141C48027F
150C5E153F6F7E6F7E82151F6C6F141C0060DA3DFE1418DB78FF143800704A6C7E003001
016D6C1370003849486C6C13F06C903B07C00FF001E06C903B0F8007FC07C02807807E00
03B512806CB44801001400C601F0EC3FFCD93F80EC07F03E1F7C9D47>I<18031807180F
180E181E181C183C18381878187018F018E0EF01C017031880170718005F170E171E171C
173C17381778177017F05F16015F16035F160701C092C7FC486C5C0007151E486C141C00
3F153CD873F8143800E31578D801FC147016F06C6C5C1501017F5C1503D93F805B1507D9
1FC090C8FC5D90380FE00E151E903807F01C153C903803F8385D903801FCF05DEB00FF5D
147F5D143F92C9FC80141E140E38427C823B>112 D E /Fe 20 115
df<151E153E157C15F8EC01F0EC03E01407EC0FC0EC1F8015005C147E5CA2495A495AA2
495AA2495AA2495AA249C7FCA2137EA213FE5B12015BA212035BA21207A25B120FA35B12
1FA45B123FA548C8FCA912FEB3A8127FA96C7EA5121F7FA4120F7FA312077FA21203A27F
1201A27F12007F137EA27FA26D7EA26D7EA26D7EA26D7EA26D7E6D7EA2147E80801580EC
0FC0EC07E01403EC01F0EC00F8157C153E151E1F94718232>16 D<12F07E127C7E7E6C7E
7F6C7E6C7E12017F6C7E137EA27F6D7EA26D7EA26D7EA26D7EA26D7EA26D7EA280147E14
7F80A21580141FA215C0A2140F15E0A3140715F0A4140315F8A5EC01FCA9EC00FEB3A8EC
01FCA9EC03F8A515F01407A415E0140FA315C0141FA21580A2143F1500A25C147E14FE5C
A2495AA2495AA2495AA2495AA2495AA249C7FC137EA25B485A5B1203485A485A5B48C8FC
123E5A5A5A1F947D8232>I<160F161F163E167C16F8ED01F0ED03E0ED07C0150FED1F80
1600153E157E5D4A5A5D14034A5A5D140F4A5AA24AC7FC143E147E5CA2495AA2495AA249
5AA2130F5CA2495AA2133F91C8FCA25B137E13FEA25B1201A25B1203A35B1207A35B120F
A35BA2121FA45B123FA690C9FC5AAA12FEB3AC127FAA7E7FA6121F7FA4120FA27FA31207
7FA312037FA312017FA212007FA2137E137FA27F80131FA26D7EA2801307A26D7EA26D7E
A26D7EA2147E143E143F6E7EA26E7E1407816E7E1401816E7E157E153E811680ED0FC015
07ED03E0ED01F0ED00F8167C163E161F160F28C66E823D>I<12F07E127C7E7E6C7E6C7E
6C7E7F6C7E1200137C137E7F6D7E130F806D7E1303806D7EA26D7E147C147E80A26E7EA2
6E7EA26E7EA2811403A26E7EA281140081A2157E157FA2811680A2151F16C0A3150F16E0
A3150716F0A31503A216F8A4150116FCA6150016FEAA167FB3AC16FEAA16FC1501A616F8
1503A416F0A21507A316E0150FA316C0151FA31680153FA216005DA2157E15FE5DA21401
5DA24A5AA214075DA24A5AA24A5AA24AC7FCA2147E147C14FC495AA2495A5C1307495A5C
131F49C8FC137E137C5B1201485A5B485A485A48C9FC123E5A5A5A28C67E823D>I<EE01
E01603EE07C0EE0F80161F1700163E5E5E15015E4B5A15074B5A5E151F4BC7FC153E157E
5DA24A5A14035D14075D140F5D141F5D143F92C8FC5C147E14FE5C1301A25C13035C1307
A25C130FA2495AA3495AA3137F91C9FCA313FEA312015BA31203A25BA21207A35BA2120F
A35BA3121FA45BA2123FA75B127FAC90CAFC5AB3B3A27E7FAC123F7FA7121FA27FA4120F
A37FA31207A27FA31203A27FA21201A37F1200A37F7FA280133FA36D7EA36D7EA2130780
A2130380130180A2130080147E147F8081141F81140F8114078114038114016E7EA2157E
153E153F6F7E150F826F7E15036F7E821500167C82821780160FEE07C0EE03E016012BF8
6C8242>32 D<12F07E127C7E123F7E6C7E6C7E6C7E7F12016C7E7F137E133E133F6D7E13
0F806D7EA26D7E80130180130080147E147F8081141F81140F81140781A2140381140181
A2140081A2157FA36F7EA382151FA282150FA3821507A382A21503A282A31501A282A315
00A382A482A21780A7163F17C0AC161F17E0B3B3A217C0163FAC1780167FA71700A25EA4
5EA31501A35EA21503A35EA21507A25EA3150F5EA34B5AA3153F5EA34BC7FCA315FEA25D
1401A25D14035D1407A25D140F5D141F5D143F92C8FC5C147E14FE5C13015C13035C495A
A2495A5C131F49C9FC133E137E5B5B485A12035B485A485A48CAFC5A123E5A5A5A2BF87E
8242>I<B61280A600FCC8FCB3B3B3B3B3B3B3B3B3B3B3B3B3A2B61280A619F86A8230>I<
B61280A6C7121FB3B3B3B3B3B3B3B3B3B3B3B3B3A2B6FCA619F8808230>I<EE03C0160F
163F167F923801FF004B5A4B5AED0FF04B5A4B5A4B5A4BC7FC5C5D4A5A14075D4A5AA214
1F5DA24A5AA44A5AB3B3B3B214FF92C8FCA35B5CA2495AA25C13075C130F495A5C133F49
5A49C9FC485A485A485A485AEA1FC0485AB4CAFC12FCA2B4FCEA3F806C7EEA0FF06C7E6C
7E6C7E6C7E6D7E6D7E131F806D7E130780130380A26D7EA2807FA381147FB3B3B3B26E7E
A46E7EA281140FA26E7E8114036E7E81806F7E6F7E6F7E6F7EED07FC6F7E6F7E9238007F
C0163F160F16032AF8748243>40 D<EC01F01407140F143F147F903801FFC04913804913
00495A495A495A495A5C495A485B5A91C7FC485AA2485AA2485AA2123F5BA2127F5BA412
FF5BB3B3A71C4B607E4A>56 D<EAFFC0B3B3A77F127FA47F123FA27F121FA26C7EA26C7E
A26C7E807E6C7F6D7E806D7E6D7E6D7E6D7E6D13806D13C09038007FF0143F140F140714
011C4B60804A>58 D<EC1FF8B3B3A7143F15F0A4EC7FE0A315C014FFA2491380A215005B
5C1307495A5C131F495A5C495A495A4890C7FC485A485A485A485AEA7FE0EAFF8090C8FC
12FCB4FC7FEA7FE0EA1FF06C7E6C7E6C7E6C7E6C7F6D7E6D7E806D7E130F806D7E130380
7F1580A26D13C0A2147F15E0A3EC3FF0A415F8141FB3B3A71D9773804A>60
D<EAFFC0B3A90A1B60804A>62 D<BB12FC86A3D87FC0C9001F7FF0007F6C6C17076C6C05
0113806C6CEF007F1A1F6C6CF00FC06C6C18076C6C1803F201E06C6D17006D6C1860013F
19706E18306D7E6D6C18181B006D7E6D7E6D7EA26D7F6E7E6E7EA26E7E6E7E6E7EA26E7E
6E7E80826F7E6F7EA26F7E6F7E6F5A5EA24B5A5E4BCBFC153E157E5D5D4A5A4A5A14075D
4A5A4ACCFC143E147E147C5C4948181801031930495A4A18704948186049CC12E0491801
017EF003C0017C180749180F4848F01F800003197F49EF01FF4848050713004848173F48
CA000FB5FC48BA5AA25ABB5AA24D537B7F58>80 D<167F923801FFC0923803C0F0923807
803892380F007892381F01FC151E153EA2157E92387C0070170015FCA44A5AA81403A45D
A41407A94A5AAA4A5AA95DA4143FA492C8FCA7143E147EA4147C123800FE13FC5CA2495A
5CEA7803387007C0383C0F80D80FFEC9FCEA03F82E5C7C7F27>82
D<BF12E08AA38A6C90CCFC0900806C6D19076C6D07007F6C6D1A1F1D076C6DF201FF6C6D
747E6C6DF33F801E0F6C6D1B076D6CF303C06D6D1A01F600E06D7F6D6D1B706D1D30816D
6D1B186D6D1B007F816E7E6E7FA26E7F6E7F6E7FA26E7F6E7F6E7FA26F7E6F7F6F7FA26F
7F6F7F81836F7F6F7F167F83707F707F8284707F707FA2707F82715A60173F715A604D5A
4DCDFC17FEA24C5A4C5A4C5A4C5A4C5A5F163F4CCEFC16FE4B5A4B5A4B5AA24B5A4B5A4B
5A4BCFFC15FEA24A5A4A5A4A481B184A481B304A5A4B1B70023F1C604ACF12E002FE1B01
4948F303C049481B074948F30F801E1F49481B7F4948F3FF0049481A0349CE120F01FEF3
7FFEF403FF48481A7F4848077FB55A48BEFC48655AA248655ABFFC666D747B7F78>88
D<F107C0F11FF0F13C3CF17C0EF1F83E0601137FF1F0FF18036118071A7E95380FC03C1A
00181F61A2183FA296C7FC60A3187E18FEA34D5AA4170360A31707A260A2170FA260A317
1FA360173FA44D5AA517FF95C8FCA35EA35FA21603A35FA21607A44C5AA5161F5FA4163F
5FA4167F5FA416FF5FA45D94C9FCA54B5AA54B5AA45EA2150FA35EA2151FA35EA3153F5E
A54B5AA493CAFC5DA35DA31401A25DA21403A25DA314075DA44A5AA35D141FA25DA2143F
92CBFCA25C147EA2003C5B127EB4485AA2495A5CEAFE07007C5B38700F80D83C1FCCFCEA
0FFCEA03F048B87B7F2E>90 D<B512E0A500F8C7FCB3B3B3B3B3B3B3ACB512E0A513946E
8227>104 D<B512E0A5EA0003B3B3B3B3B3B3B3ACB5FCA513947F8227>I<1B301B78A21B
F8A21BF0A21A01A21BE0A21A03A21BC0A31A07A21B80A21A0FA21B00A262A21A1EA21A3E
A21A3CA21A7CA21A78A21AF8A262A31901A262A21903A262A21907A262A2190FA297C7FC
A261A2191EA2193EA2193CA3197CA21978A219F8A261A21801A261A21803A261A21807A2
61A2180FA296C8FCA360A2181EA2183EA2183CA2187C131018781330017016F8A201F85E
120117011203486C5EA2120D001D16031219D830FE5E12700060160712C000405FEA007F
170FA295C9FC6D7E5FA2171EA26D6C143EA2173CA2177C6D7E1778A36D6C14F8A25FA216
016D7E5FA21603A26D6C5CA21607A26D6C5CA2160FA294CAFC147F5EA2161EEC3F80A216
3EA2163CEC1FC0167CA21678A291380FE0F8A25EA2EC07F1A25EA215F3EC03FB5EA215FF
A26E5BA48093CBFCA4157EA4157C153C15384DC8788353>114 D
E /Ff 2 42 df<15E01401EC03C0EC0780EC0F00141E5C147C5C495A13035C495A130F5C
131F91C7FC133E137EA25BA2485AA25B1203A2485AA3120F5BA2121FA25BA2123FA290C8
FCA35AA5127EA312FEB3A3127EA3127FA57EA37FA2121FA27FA2120FA27F1207A36C7EA2
12017FA26C7EA2137EA2133E7F80130F8013076D7E8013016D7E147C143C8080EC0780EC
03C0EC01E014001B7974D92E>40 D<12E07E12787E7E7E6C7E7F6C7E6C7E7F1200137C13
7E133E133F7F6D7E80A26D7EA26D7EA2130180A26D7EA380147EA2147FA280A21580A214
1FA315C0A5140FA315E0B3A315C0A3141FA51580A3143FA21500A25CA2147EA214FE5CA3
495AA25C1303A2495AA2495AA25C49C7FC5B133E137E137C5B12015B485A485A5B48C8FC
121E5A5A5A5A1B797AD92E>I E /Fg 1 73 df<0103B5D8F803B512F8495DA290260007
F8C73807F8004B5DA2180F4A485DA3181F021F5E5DA2183F023F5E5DA2187F027F93C7FC
92C8FCA34A15FE5CA291B7FC495EA202FCC71201A201034B5A5CA2170749485DA3170F01
0F5E5CA2171F49485DA3173F013F5E5CA2177F017F93C8FC91C8FC496C4A7EB690B6FCA3
45397DB845>72 D E /Fh 3 105 df<ED01F8ED0FFF033F138092387E0FC0913901F803
E0DA03F013F0913807E001DA0FC013F891381F8000023F14FC4AC7FC147E02FE14FE495A
13034A147E495A010F157F5C131F4A14FF133FA2495AA249C8FCA25A495C1203A25B0007
16FE1603A2485AA21607001F16FC5B90B7FCA24816F8A301E0C7121F007F16F05BA2163F
17E0485AA2EE7FC0A2178090C812FFA217005D5EA2484A5AA24B5AA24B5A5E151F5E007E
4A5AA24BC7FC007F14FE6C5C14014A5A6C6C485A5D000F495A2607C03FC8FCEBE07E3801
FFF86C13E0EB3F8030557BD337>18 D<EF07F0EF1FFE94387FFF809438FC0FC0933801F8
07933903F01FE0933807E03F040F137F17C0161F19C0163F19809438801E00047F90C7FC
A316FF94C8FCA45D5EA415035EA41507023FB612C0A491260007F8C8FC150F5EA4151F5E
A4153F5EA4157FA25EA415FF93C9FCA45C5DA414035DA54A5AA54A5AA45D141FA35DA214
3F5DA3000F49CAFCEA3FC0007F137EA200FF5BA2EBC1F8EB81F01303387C07E0387E0FC0
6CB4CBFCEA0FFEEA03F83B6C7AD33A>102 D<EC1FF0EB3FFF495BA3EB007F5D143F147F
A25DA314FF92C9FCA3495AA413035CA3495AA4130F5CED03FE92381FFFC090261FE07F13
F09238FC07F89139E3E003FC9139E7C001FED93FEFC7FC02DE8014FC5C495A5CA25C495A
A291C8FC5E485E5BA2160348485DA3160700075E5B160F5F485A161F5FA2001F033F1307
4915C0167FEF800F003F170E4914FFEF001E181C4848163C4C13381878187000FF17F090
C8EB01E093387E03C093383F0F804892381FFF00EE0FFC0078ED03F0385479D243>104
D E /Fi 15 113 df<007FB912E0BA12F0A26C18E03C04789A4D>0
D<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B789E1C>I<16C04B7EB3AC00
7FBA1280BB12C0A26C1980C8D801E0C9FCB3A9007FBA1280BB12C0A26C198042427BC14D
>6 D<19E0F003F0180FF03FE0F0FF80943803FE00EF0FF8EF3FE0EFFF80DC03FEC7FCEE
0FF8EE3FE0EEFF80DB03FEC8FCED1FF8ED7FE0913801FF80DA07FEC9FCEC1FF0EC7FC049
48CAFCEB07FCEB1FF0EB7FC04848CBFCEA07FCEA1FF0EA7FC048CCFCA2EA7FC0EA1FF0EA
07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FC913801FF809138
007FE0ED1FF8ED07FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FE0EF0FF8EF03
FE943800FF80F03FE0F00FF01803F000E01900B0007FB912E0BA12F0A26C18E03C4E78BE
4D>20 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF90
38007FC0EC1FF0EC07FC913801FF809138007FE0ED1FF8ED07FE923800FF80EE3FE0EE0F
F8EE03FE933800FF80EF3FE0EF0FF8EF03FE943800FF80F03FE0F00FF0A2F03FE0F0FF80
943803FE00EF0FF8EF3FE0EFFF80DC03FEC7FCEE0FF8EE3FE0EEFF80DB03FEC8FCED1FF8
ED7FE0913801FF80DA07FEC9FCEC1FF0EC7FC04948CAFCEB07FCEB1FF0EB7FC04848CBFC
EA07FCEA1FF0EA7FC048CCFC12FC1270CDFCB0007FB912E0BA12F0A26C18E03C4E78BE4D
>I<D907F81780D93FFFEE01C090B512C04814F048804814FE270FF807FF1503261FC000
01C0158048C7D83FE01407003EDA0FF8140F486E6CEC1F000078DA01FF5C00706E01C013
FE00F092393FF807FC486FB55A04075C705C04005C053F90C7FC0040EE07F8CEFCA4D907
F81780D93FFFEE01C090B512C04814F048804814FE270FF807FF1503261FC00001C01580
48C7D83FE01407003EDA0FF8140F486E6CEC1F000078DA01FF5C00706E01C013FE00F092
393FF807FC486FB55A04075C705C04005C053F90C7FC0040EE07F8422C7BAF4D>25
D<1AF0A3861A78A21A7C1A3CA21A3E1A1E1A1F747EA2747E747E87747E747E1B7E87757E
F30FE0F303F8007FBC12FEBE1280A26CF3FE00CEEA03F8F30FE0F31F8051C7FC1B7E6350
5A505A63505A505AA250C8FC1A1E1A3E1A3CA21A7C1A78A21AF862A359347BB264>33
D<49B4EF3FC0010F01E0923803FFF8013F01FC030F13FE4901FF92383FE01F48B66C9139
7E0007C02603F80301E0D901F8EB01E02807E0007FF049486D7E01806D6CD907C0147048
C76C6C494880001EDA07FE49C87E001C6E6C013E150C486E6D48150E71481506486E01E0
160793387FF1F0006092263FF3E08193381FFBC000E004FF1780486F4915017090C9FC82
707F8482717E844D7E6C4B6D1503006004EF1700933803E7FE0070922607C7FF5DDC0F83
7F003004816D140E00384BC6FC0018033E6D6C5C001C4B6D6C143C6C4BD91FFC5C6C4A48
6D6C5C6DD907E06D6C13036C6C49486D9038E00FE0D801F0013FC890B55A27007C03FE6F
91C7FC90263FFFF8031F5B010F01E0030313F8D901FECAEA7FC0592D7BAB64>49
D<1706170F171FA2173EA2177CA217F8A2EE01F0A2EE03E0A2EE07C0A2EE0F80A2EE1F00
A2163EA25EA25EA24B5AA24B5AA24B5AA24B5AA24BC7FCA2153EA25DA25DA24A5AA24A5A
A24A5AA24A5AA24AC8FCA2143EA25CA25CA2495AA2495AA2495AA2495AA249C9FCA2133E
A25BA25BA2485AA2485AA2485AA2485AA248CAFCA2123EA25AA25AA25A1260305C72C600
>54 D<0403B712F8043F16FE4BB9FC1507151F157F912601FC0090C7EA07FE912603F001
ED01FCDA07C04915F0DA0F80EE0080021F1800EC3F004A495A5C5C495A4A495A5C495A6D
C7FC90C8485AA35F161FA34C5AA35F167F94B612C0A293B7FC624B93C7FC19FC04FCC712
70030392C8FC5EA24B5AA2150F5E151F5EA24B5AA24BCBFCA215FEA24A5AA24A5AEA0180
000F495AEA1FC0486C485AD87FF05B39FFFC1F80D87FFF90CCFC14FE6C5B6C13F06C5B00
031380D800FCCDFC50477EC348>70 D<031FB512FC0203B712E0021F16FC91B9FC010318
C0010F8490283FE07FC00380D9FE00EC001FD801F804037FD803E04A13004848EF3FFC00
0F181F4848170F003F14FF007F180790C7FC00FE92C8FC486112F01280C7485F190F4B5E
62191F6202034CC7FC4B157E197C614E5A4A48EC07E0F00F80063FC8FCEF03FC4A4848B4
5A040F13E04C13804C48C9FC4A48487EA2041F7FEDC007023F6D7F824B6C7F147F717E92
C7FC4A6E7EA24A141F010182170F4A8101031907716C141F4A183E01076F6D137C4A18F8
719038C001F0010F9438E003E04A6E9038F007C0011F9438FC1F804A92397FFFFE006249
486F13F091C96C13C0017C7048C7FC0170EE03F050467EC354>82
D<ED0FE015FF913803FC00EC0FE0EC3FC04A5A4AC7FC5C495AA2495AB3AD495AA2495A13
1F495A495A01FEC8FCEA07F8EAFFE0A2EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7E
B3AD6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0150F236479CA32>102
D<12FEEAFFE0EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E
6E7EEC0FE0EC03FC913800FFE0A2913803FC00EC0FE0EC3FC04A5A4AC7FC5C495AA2495A
B3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE048C9FC236479CA32>I<126012
F0B3B3B3B3B3A81260046474CA1C>106 D<1B0C1B1E1B3EA21B7CA21BF8A2F201F0A2F2
03E0A2F207C0A2F20F80A2F21F00A21A3EA262A262A24F5AA2621903A24F5AA24F5AA24F
C7FCA2193EA261A261A24E5AA24E5AA24E5AA24E5AA2010C4CC8FC133C017C163EEA01FE
00035F487E001E5F00387FD8707F4B5A00E07FD8003F4B5A80011F4B5AA26E4A5A130F6E
4AC9FC13076E143E13036E5C13016E5C7F6F5B027F1301A26F485A143F6F485A141F6F48
5A140F6F48CAFC1407EDFC3E14035E15FE02015B15FF6E5BA26F5AA26F5AA26F5AA26FCB
FC150E4F647A8353>112 D E /Fj 26 121 df<157E913801FFC091380781E091381E00
F014384A13F84A1378495A494813F891C7FC5B1306010E1301010C14F0131C0118EB03E0
ED07C0013814809039301FEF00EC3FFE13709038601FEF9138000F80ED07C013E04914E0
A312015BA30003140F90C713C0A348EC1F80A2ED3F00A26D137E000D147C6D5B390CE001
F090387003E039183C0F80D91FFEC7FCEB03F80038C9FC1230A312701260A312E05AA325
3C7EAE28>12 D<147C49B4FC903803C78090380783C090381F03E0EB1E01133E017C13F0
13F8A2EA01F0120313E01207A2EA0FC01403A2EA1F80A21407003F14E0130090B5FCA239
7F000FC0127EA2141F1580127C00FC14005CA2147EA248137C14FC00785B495AA2387C03
E0383C07C0495A001C90C7FCEA1E3EEA0FF8EA03E01C307DAE21>18
D<90B612F812035A4815F03A1E0380C000003C130000701301130700E05CEAC00638000E
03A3131CA2133C140713381378A201F07FA21201A2D803E07FA20007130313C0A26C486C
5A251E7E9C29>25 D<0103B512F0131F137F90B612E03A01FC1F80003903F00FC03807C0
0748486C7E121F1300123EA25AA2140700FC5C5AA2140F5D141F92C7FC143E0078133C14
7C007C5B383C01E0381F07C0D807FFC8FCEA01F8241E7D9C28>27
D<013FB6FC17C0903A00FE0007F0EE01F84AEB00FC177EA20101157F5CA30103157E4A14
FEA2EE01FC010715F84AEB03F0EE07E0EE1FC0010FEC7F009138C003FC91B55A16FE903A
1FC0003F804AEB0FC017E01607013F15F091C7FC1603A25B017E1407A217E001FE140F49
15C0161FEE3F800001ED7F004914FEED03F80003EC0FF0B712C003FCC7FC302D7CAC35>
66 D<90273FFFFC0FB5FCA2D900FEC7EA3F80A24A1500A25F0101157E5CA217FE01035D
5CA2160101075D5CA21603010F5D5C91B6FCA2903A1FC00007E05CA2160F013F5D91C7FC
A2161F495D137EA2163F01FE92C7FC5BA25E0001157E5BA2000315FEB539E03FFFF8A238
2D7CAC3A>72 D<90263FFFFC90381FFF80A2D900FEC73803F80018E04AEC07804DC7FC17
1C01015D4A14E04C5A4C5A0103020EC8FC4A5B5E16E00107495A9138E00780030EC9FC15
1F010F137F4A487E14C19138C71FC0EB1FCEEC9C0F02F07FECE007D93FC07FEC000382A2
496D7E137E6F7EA201FE147F5B707EA20001151F4981831203B539E001FFFEA2392D7CAC
3C>75 D<D93FFE923801FFF060D900FFEEF800180702DFED0DF0A2181B0101EE33E0EC8F
80186318C701035F020FEC0187EF03076E6C140F010703065B0106150CA2EF181F010E03
3090C7FC90380C03E017604D5A011C163E0118EC0180EE0300DA01F0147E01380206137C
01305CA24C13FC01704A5B13606E6C5AEEC00101E05E49EBF980EDFB0000011603037E5C
49137C487ED80FE001781307D8FFFED97001B57E1530442D7CAC44>77
D<0107B612F8A2903A0FFC0007F002E0EB0FE00280EB1FC049C71380011E143F011CEC7F
004914FE4B5A0130495A0170495A0160495A4B5A4B5A90C748C7FCA215FE4A5A4A5A4A5A
4A5A4A5A4A5A4AC8FC14FE5C130149481306495A4948130E4948130C495A49C7121C01FE
141848481438485A5E484814F048481301484813034848495A48C7127FB7FC5E2D2D7CAC
30>90 D<EB07E0EB1FF890387C1CE0EBF80D3801F00F3803E007EA07C0120FD81F8013C0
A2EA3F00140F481480127EA2141F00FE14005AA2EC3F02EC3E06A25AEC7E0E007CEBFE0C
14FC0101131C393E07BE18391F0E1E38390FFC0FF03903F003C01F1F7D9D25>97
D<13F8121FA21201A25BA312035BA312075BA3380FC7E0EB9FF8EBB83CEBF01E381FE01F
13C09038800F8013005A123EA2141F127E127CA2143F00FC14005AA2147EA2147C14FC5C
387801F01303495A383C0F806C48C7FCEA0FFCEA03F0192F7DAD1E>I<EB01F8EB0FFE90
383E0780EB7C01D801F813C03803F0073807E00FEA0FC001801380121F48C8FCA25A127E
A312FE5AA51560007C14E0EC01C0EC03806CEB0F00001E131C380F81F83807FFE0C648C7
FC1B1F7D9D1F>I<EB03F8EB0FFE90383E0780EBF803D801F013C03803E001EA07C0000F
1303D81F8013801407393F000F00141E387F01FCEBFFF091C7FC007EC8FC12FE5AA4127C
156015E0EC01C06CEB0380EC0F006C131C380F81F83803FFE0C648C7FC1B1F7D9D21>
101 D<157C4AB4FC913807C380EC0F87150FEC1F1FA391383E0E0092C7FCA3147E147CA4
14FC90383FFFF8A2D900F8C7FCA313015CA413035CA413075CA5130F5CA4131F91C8FCA4
133EA3EA383C12FC5BA25B12F0EAE1E0EA7FC0001FC9FC213D7CAE22>I<131FEA03FFA2
EA003FA2133EA3137E137CA313FC5BA30001133F9038F1FFC09038F3C1F0EBFF00D803FC
7F5BA25B485AA25B1401D80F805BA31403001F5C13001407EDC0404815C0003E130F1580
1581007E90381F0180007C1403ED0700EC0F0600FC141E48EB07F80070EB01E0222F7DAD
29>104 D<1307EB0F80EB1FC0A2EB0F80EB070090C7FCA9EA01E0EA07F8EA0E3CEA1C3E
123812301270EA607EEAE07C12C013FC485A120012015B12035BA21207EBC04014C0120F
13801381381F01801303EB0700EA0F06131EEA07F8EA01F0122E7EAC18>I<15E0EC01F0
1403A3EC01C091C7FCA9147CEB03FE9038078F80EB0E07131C013813C01330EB700F0160
138013E013C01380EB001F1500A35C143EA3147E147CA314FC5CA313015CA313035CA213
0700385BEAFC0F5C49C7FCEAF83EEAF0F8EA7FF0EA1F801C3B81AC1D>I<131FEA03FFA2
EA003FA2133EA3137E137CA313FC5BA3000114F89038F003FCEC0F0EEC1C1E0003EB387E
EBE07014E0EBE1C03907E3803849C7FC13CE13DCEA0FF8A2EBFF80EB9FE0381F83F0EB01
F81300150448140C123EA2151C007E1418007CEBF038ECF830157000FCEB78E048EB3FC0
0070EB0F801F2F7DAD25>I<137CEA0FFCA21200A213F8A21201A213F0A2120313E0A312
0713C0A3120F1380A3121F1300A35A123EA3127E127CA31308EAF818A31338133012F013
70EAF860EA78E0EA3FC0EA0F000E2F7DAD15>I<3907C007E0391FE03FF83918F8783E39
3879E01E39307B801F38707F00126013FEEAE0FC12C05B00815C0001143E5BA2157E0003
147C5B15FCEDF80800071518EBC00115F01638000F903803E0300180147016E0020113C0
001F14E390C7EAFF00000E143E251F7E9D2B>110 D<EB01F8EB0FFF90383F078090387C
03C0D801F813E03903F001F0EA07E0D80FC013F8EB8000121F48C7FC14015A127EA21403
00FE14F05AA2EC07E0A2EC0FC0A2007CEB1F801500143E6C5B6C485A380F83E03803FF80
D800FCC7FC1D1F7D9D22>I<90387C01F89038FE07FE3901CF8E0F3A03879C0780D907B8
13C0000713F000069038E003E0EB0FC0000E1380120CA2D8081F130700001300A349130F
013E14C0A3017EEB1F80A2017C14005D01FC133E5D15FC6D485A9038FF03E03901FB87C0
D9F1FFC7FCEBF0FC91C8FC485AA312075BA3120FA2EAFFFCA2232B829D24>I<3807C01F
390FF07FC0391CF8E0E0383879C138307B8738707F07EA607E13FC00E0EB03804848C7FC
A2128112015BA312035BA312075BA3120F5BA3121F90C8FC120E1B1F7E9D20>114
D<EB07E0EB3FF8EB781EEBF0063801E0073803C00F141FA20007131E140CEBE00013F8EB
FF806C13E06C13F06C13F8EB3FFC13011300147C0078133C12FCA2147C48137800E013F8
14F0386001E0387807C0381FFF00EA07F8181F7C9D21>I<130E131FA35B133EA3137E13
7CA313FCB512F8A23800F80012015BA312035BA312075BA3120F5BA21410001F13301300
1470146014E0381E01C0EB0380381F0700EA0F0EEA07FCEA01F0152B7EA919>I<013F13
7C9038FFC1FF3A01C1E383803A0380F703C0390700F60F000E13FE4813FC12180038EC07
00003049C7FCA2EA200100005BA313035CA301075B4A5AA200385CD87C0F130600FC140E
011F130C011B131C39F03BE038D8707113F0393FE0FFC0260F803FC7FC221F7E9D28>
120 D E /Fk 12 94 df<123C127E12FFA7127EA9123CAA1218A41200A7123C127E12FF
A4127E123C082F7AAE14>33 D<13031307130E131C1338137013F0EA01E013C01203EA07
80A2EA0F00A2121EA35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0
120113E0EA00F013701338131C130E1307130310437AB11B>40 D<12C07E12707E7E7E12
0FEA0780120313C0EA01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131E
A5133CA41378A313F0A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B
>I<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A5
00FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC
3800FFF0EB3FC01C2D7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200B3B113FE38
7FFFFEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A00
60EB07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E
147C5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001F
B5FC5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80
003F14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB
00FC143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070
131F6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<000CEB0180380F
C01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F801F01
001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E0006014C0
0070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>53
D<007FB712F8B812FCA2CBFCADB812FCA26C16F82E137C9937>61
D<B712FEA23903F800010001EC003E828282A282A3178016011518A293C7FCA315381578
15F890B5FCA2EBF800157815381518A21760A392C712C0A4160117801603A21607160F16
3F0003913801FF00B8FCA22B2D7EAC30>69 D<EAFFE0A3EAE000B3B3B3A7EAFFE0A30B43
79B114>91 D<EAFFE0A31200B3B3B3A712FFA30B437FB114>93 D
E /Fl 38 123 df<1578913807FFE0021F13FC91383C7FFEEC7007EC6003ECE0004A1338
1600A280A380A280147CA2147E143E143F816E7EA26E7E81140781EC3FFC14FF903803E1
FEEB07C190381F00FF133E49EB7F805B0001143F485A484814C049131F120F485AA248C7
FC150F5A127EA300FEEC1F805AA316005A5DA2153E157E157CA26C5C127C4A5A6C495AA2
6C495A6C6C485A6C6C48C7FC3803E07C3800FFF0EB1FC027487CC62B>14
D<157E913801FF80913807C3E091381F01F0EC3E004A13F814FC4948137C495A5C010714
7E495A131F5C133F49C7127FA213FEA212015B12034914FF1207A25B000F15FE1501A248
5AA21503003F15FC5B90B6FCA24815F89038800007A2150F00FF15F090C7FCA2ED1FE0A2
5AED3FC0A21680157F16005A15FEA24A5AA25D14035D4A5A007C495AA24A5A007E49C7FC
003E133E5C001E5B6C485A380783C06CB4C8FCEA00FC28477CC52D>18
D<147002F8140E0101153FA35F0103157E5CA217FE01075D5CA2160149485CA316034948
5CA3160749C75BA3160F495D137EA2041F131801FEED8038491630A2043F137000011760
EE7F005E6D16E00003DA01DF13C09238039F016DD9071F13809139801E0F833C07E7C078
078700903AE1FFE003FE903AE07F8000F891CAFC485AA4121F5BA3123F90CBFCA35A127E
A212FEA25A123835417DAB3B>22 D<010FB712E0013F16F05B48B812E04817C02807E006
0030C7FCEB800EEA0F00001E010C13705A0038011C13605A0060011813E000E013381240
C7FC5C4B5AA214F014E01301150314C01303A3EB078082130FA2EB1F00A34980133E137E
A24980A2000114015BA26C48EB00E0342C7EAA37>25 D<0203B612E0021F15F091B7FC49
16E0010716C090270FF80FF8C7FC90381FC00349486C7E017EC7FC49147E485A4848143E
0007153F5B485AA2485AA2123F90C8FC5E48157E127EA216FE00FE5D5A15015EA24B5A00
7C5D15074B5A5E6C4AC8FC153E6C5C5D390F8003F03907C007C02601F03FC9FC38007FFC
EB1FE0342C7DAA37>27 D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A78891B>58
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
1206120E5A5A5A12600B1D78891B>I<F001C0F007E0181FF07FC0943801FF00EF07FCEF
1FF0EF7FC04C48C7FCEE0FFCEE3FF0EEFFC0030390C8FCED0FF8ED3FE0EDFF80DA03FEC9
FCEC1FF8EC7FE0903801FF80D907FECAFCEB1FF0EB7FC04848CBFCEA07FCEA1FF0EA7FC0
48CCFCA2EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FE903801FF809038007FE0
EC1FF8EC03FE913800FF80ED3FE0ED0FF8ED03FF030013C0EE3FF0EE0FFCEE01FF933800
7FC0EF1FF0EF07FCEF01FF9438007FC0F01FE01807F001C03B3878B44C>I<1618163C16
7CA2167816F8A216F01501A216E01503A216C01507A21680150FA2ED1F00A2151E153EA2
153C157CA2157815F8A25D1401A24A5AA25D1407A25D140FA292C7FC5CA2141E143EA214
3C147CA25CA25C1301A25C1303A25C1307A25C130FA291C8FC5BA2133EA2133C137CA213
7813F8A25B1201A25B1203A2485AA25B120FA290C9FC5AA2121E123EA2123C127CA21278
12F8A25A126026647BCA31>I<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB
1FF0EB07FE903801FF809038007FE0EC1FF8EC03FE913800FF80ED3FE0ED0FF8ED03FF03
0013C0EE3FF0EE0FFCEE01FF9338007FC0EF1FF0EF07FCEF01FF9438007FC0F01FE0A2F0
7FC0943801FF00EF07FCEF1FF0EF7FC04C48C7FCEE0FFCEE3FF0EEFFC0030390C8FCED0F
F8ED3FE0EDFF80DA03FEC9FCEC1FF8EC7FE0903801FF80D907FECAFCEB1FF0EB7FC04848
CBFCEA07FCEA1FF0EA7FC048CCFC12FC12703B3878B44C>I<91B87E19F019FC02009039
C00003FF6F480100138003FFED3FC01AE093C8121FF10FF0A24A4816F81907A314035D19
0FA2020717F04B151F1AE0193F020F17C04BED7F80F1FF004E5A021F4B5A4B4A5AF01FF0
F03FC0023F4AB4C7FC4BEB1FFC92B612F018FEDA7FC0C7EA7F804BEC1FC0F00FF0727E02
FF6F7E92C8FC727EA249835CA313035CA301075F4A1503A24E5A130F4A4B5A4E5AA2011F
4C5A4A4B5A4D485A013F4B48C7FCEF0FFC4AEC3FF801FF913801FFE0B9128005FCC8FC17
C045447CC34A>66 D<4CB46C1318043F01F013384BB512FC0307D9007E1378DB1FF09038
0F80F0DB7F80EB03C1DA01FEC7EA01C34A48EC00E7DA0FF0ED7FE04A48153F4A5A02FFC9
121F494817C04948160F495A130F4A178049481607495A137F4948170091CAFC5A485A19
06485AA2485A96C7FC121F5BA2123F5BA3127F5BA4485AA419C0A2180161127F180396C7
FC6018066C6C160E601818001F17386D5E000F5F6D4B5A6C6C4B5A00034CC8FC6C6C150E
6C6C153C017F5DD93FC0EB01E0D91FF0EB0FC0D907FE017FC9FC0101B512FCD9003F13E0
020790CAFC45487CC546>I<91B912F8A3020001C0C7123F6F48EC07F003FF1503190193
C9FCA21A704A5AA4020317605DA314075D18C01701020F4B13005DA21703021F92C8FC4B
5BA25F023F141E4B13FE92B5FCA24A5CED8000173CA202FF141892C7FCA217384915305C
A21770010315604A91C9FCA313075CA3130F5CA3131F5CA2133FA313FFB612F8A345447C
C33F>70 D<4CB46C1318043F01F013384BB512FC0307D9007E1378DB1FF090380F80F0DB
7F80EB03C1DA01FEC7EA01C34A48EC00E7DA0FF0ED7FE04A48153F4A5A02FFC9121F4948
17C04948160F495A130F4A178049481607495A137F4948170091CAFC5A485A1906485AA2
485A96C7FC121F5BA2123F5BA3127F5BA4485A4CB612805EA293C7EBE000725AA3007F60
A218FF96C7FCA26C7E5F606C7EA2000F16036D5E6C6C15070003160F6C6C151F6C6CED3D
F8D97F8014786D6CEB01E0D91FF0903807C078D907FE90387F00700101B500FC1330D900
3F01F090C8FC020790CAFC45487CC54D>I<91B6D8E003B61280A3020001E0C70003EB80
00DB7F806E48C7FC03FF1503A293C85BA219074A485EA3190F02035F5DA2191F02075F5D
A2193F020F5F5DA2197F021F5F5DA219FF023F94C8FC92B8FCA3DA7FC0C712014B5DA218
0302FF5E92C8FCA21807495F5CA2180F01035F5CA2181F01075F5CA2183F010F5F5CA301
1F4C5A5CA2013F16FFA24A93C9FCD9FFE002037FB6D8E003B67EA351447CC351>I<91B6
00E049B512C0A3020001E0C8383FF800DB7F80ED1FE003FF94C7FC1A3E93C9127862F101
C04A484B5A4FC8FC191C6102035E4B5DF003804EC9FC0207150E4B14386060020F4A5A4B
0107CAFC170E5F021F14784B13F84C7E1603023F130F4B487E163BEEE1FF91387FC1C1DB
83807FED8700159CDAFFB86D7E5D03C06D7E5D4990C7FC4A6E7EA2717E13034A811707A2
01076F7E5C717EA2130F4A6E7FA2727E131F5C727E133F854A82D9FFE04B7EB600E0010F
B512E05FA252447CC353>75 D<91B500C0933803FFFE63630200F1FE00DB6FE0EE1BF803
EF171F1B3703CFEF67F0A21BCFDA018F9338018FE0A2DB87F0ED030F1B1F020305065B03
07160CA2F2183F020705305B14066F6C15601B7F020E05C090C7FC020CEE0180A24F485A
021C04065B14186F6C5C1A01023804185B02301630A2F16003027016C00260606F6CEB01
801A0702E0DB03005B4A1506A24E130F01014C5C5C047F5B1A1F01034C5C91C75CA24D48
133F494BC75B1306EE3F861A7F010E038C92C8FC010C1598A217B0011C03E014FE131801
386E5A190101785D01FC92C75BD803FFEF07FEB500F8011E0107B512FE161C160C5F447B
C35E>77 D<91B712F018FF19E002009039C0003FF86F48EB07FC03FFEC01FEF0007F93C8
EA3F801AC0F11FE04A5AA21AF0A214035DA30207EE3FE05DA2F17FC0020F17804B15FF1A
004E5A021F4B5A4B4A5AF00FE04E5A023F037FC7FC4BEB03FCEF1FF092B612804A4AC8FC
923980007F80EF0FC0EF07F002FF6E7E92C77F1701845B4A1400A2170113035CA3010715
035CA260010F15075CA3011F18185CA2013F4C13381A304A6F1370D9FFE0020314E0B600
E0ED01C00501EB0380943900FE0F00CBEA3FFEF007F045467CC34A>82
D<48BA12C05AA291C7D980001380D807F092C7121F4949150F0180170748C75B1903120E
484A481500A212181238003014074C5C00701806126000E0140F485DA3C8001F92C7FC5E
A3153F5EA3157F5EA315FF93CAFCA35C5DA314035DA314075DA3140F5DA3141F5DA3143F
5DA2147FA214FF01037F001FB612FCA25E42447EC339>84 D<B6D88003B500FC0107B5FC
5E03005D000301C09026001FFEC8EA7FE06C90C8D80FF8ED3F80F41F001C1E1C1C17076C
1B1864050F16701C60051F5EA205374B5AA205674BC7FC17E705C71506DC0187150E7214
0C6ED903075DA2017FDA06035DA2040C5E041C16E004185E04304B5AA204604BC8FCA204
C01506150104805DDB03005D84DAC0065E1701013F495EA24B5E4B1501624B4BC9FCA24B
1506A2DAC1805D02C3161C92C7141802C66F5A14E602EC5E83D91FF85EA24A5E4A93CAFC
A24A5DA24A5DA291C95AA2011E5E011C5E010C166060467BC35C>87
D<020FB812C05C1A809326800001130003F8C7FCDA3FE04A5A03804A5A92C8485A027E4B
5A027C4B5A02784B5A4A4B5AA24A4A90C7FC4A4A5A01014B5A4D5A4A4A5A01034B5A91C8
485A4D5AA290C84890C8FC4C5A4C5A4C5A4C5A4C5A4C5A4C5AA24B90C9FC4B5A4B5A4B5A
4B5A4B5A4B5AA24B5A4A90CAFC4A5A4A4814064A5A4A5A4A48140E4A48140CA24A48141C
4990C8121849481538495A49485D495A494815F049485D1701494814034890C8485A4848
150F4848151F48484B5A484815FF48481403043F90C8FC48B8FCB9FC5F42447BC343>90
D<EB0FE0EA07FFA338001FC0130F131FA25CA3133F91C8FCA35B137EA313FE5BA312015B
EC0FC0EC3FF00003EBF07C9038F3C03E9038F7001F01FE14804848130F4914C05B16E048
5A5BA3121F5BA2151F123F90C7FCA2153F4815C0127EA2157F16805A16005DA24A5A007C
5CA24A5A4A5A5D003C130F003E495A001E495A001F017EC7FC6C5B3807C1F03801FFC06C
6CC8FC23467CC429>98 D<EC07F8EC3FFF9138FC07C0903903F000E049481370D91F8013
3049C71270017EEB03F801FE1307485A4848EB0FF012075B000FEC07C0484890C7FCA248
5AA2127F5BA312FF90C9FCA45AA5161816381670007E15E0ED01C06CEC0380ED07006C6C
131E000F14383907C001F03903F00FC02600FFFEC7FCEB1FF0252D7CAB2A>I<EE01FC16
FFA3EE03F816011603A217F0A3160717E0A3EE0FC0A4EE1F80A3163FA21700EC0FC0EC7F
F0903901F8387F903907E01C7E90380FC00E90383F0007496D5A13FE485A49130100035D
485A120F491303121F5E485AA2007F4A5A5BA300FF4A5A90C7FCA2151F5E5AA21730033F
1370EE0060A24B13E017C015FE007E130102031301003ED9073E1380003F010E13036C01
1C14006C6C486C5A3A07C0F00F0E3A01FFC007FC3A007F0001F02E467CC433>I<EE07E0
EE1FF8EE7C1CEEF80E923801F03E923803E07F17FFED07E116C117FE92380FC0FC177817
004B5AA4153F93C7FCA45D157EA491B61280A3DA00FCC7FCA314015DA414035DA414075D
A4140F5DA5141F5DA4143F92C8FCA45C147EA45CA45C1301A25CA2EA1C03007F5B12FF5C
13075C4848C9FC12F8EA601EEA783CEA1FF0EA07C0305A7BC530>102
D<157E913803FF8091390FC1E0E091391F0073F0027E13334A133F4948131F010315E049
48130F495A17C0495A133F5C017FEC1F8091C7FC5B163F4816005BA30003157E5BA216FE
A2495CA215015EA315034B5A1201150F0000141F6D495A017C137790383E01E790381F07
87903907FE0FC0EB01F890C7FCA2151F5EA2153FA293C7FCA2001C147E007F14FE485C4A
5A140348495AEC0FC000F8495A007C01FEC8FC381FFFF8000313C02C407EAB2F>I<14FE
137FA3EB01FC13001301A25CA3495AA4495AA4495AA4495AA2ED3FC0913881FFF090393F
07C0FC91380E007E023C133E0270133FD97EE07FD97FC014805CA249C7FC5BA249143F00
0116005BA25E0003157E5BA216FE00075D5B15015E120F4913035E1707001F0207130649
14E0150FEEC00E003F160C90C7141CEE80181738481630007E167017E092380781C000FE
EDC38048913801FF000038EC007C30467BC438>I<141E143F5C5CA3147E143891C7FCAE
133EEBFF803801C3C0380781E0380601F0120E121CEA180312381230A2EA700700605BA2
EAE00F00C05BEA001F5CA2133F91C7FCA25B137E13FE5BA212015BEC03800003140013F0
1207495A1406140E140CEBC01C141814385C00035BEBE1C0C6B45A013EC7FC19437DC121
>I<163C16FEA21501A316FCED00701600AE15FCEC03FF91380F0780021C13C091383803
E0147014E014C01301EC8007130314005B1306010E130F010C14C090C7FCA2151F1680A3
153F1600A3157EA415FE5DA34A5AA44A5AA414075DA3140F5DA2141F5DA2143F001C91C7
FC127F48137E5CA248485AEB03E038F807C038781F80D83FFEC8FCEA07F0275681C128>
I<14FE137FA3EB01FC13001301A25CA3495AA4495AA4495AA4495AA2163FEEFFC0903A3F
0003C0E0ED0703ED1E0F1538017EEB701F15E0EC01C0038013C0D9FC03EB07004AC8FC14
0E5C00015B495A5CEBFBC048B4C9FC8014F8EBF1FE3907F03F809038E00FE06E7E140300
0F80EBC001A2EE01C0001F16801380A21603003F1600010013F05E160648150E007E150C
161C02005B00FEEC787048EC3FE00038EC0F802B467BC433>I<01F8D903FCEC7F80D803
FED91FFF903803FFE0D8071F903B7C0FC00F81F83E0E0F80E007E01C00FC001C9026C3C0
030178137C271807C700D9F0E0137E02CE902601F1C0133E003801DCDAFB80133F003001
D892C7FCD90FF814FF0070495C0060495CA200E04949485CD8C01F187E4A5C1200040715
FE013F6091C75BA2040F14014960017E5D1903041F5D13FE494B130762043F160E000193
C7000F130C4918C0191F4CED801C00031A1849027E1638F2003004FE167000074B166049
19E0F201C096380F0380000F0201EE8700494AEC03FED80380D90070EC00F84F2D7DAB55
>109 D<01F8EB03FCD803FEEB1FFFD8071F90387C0FC03B0E0F80E007E03A0C07C3C003
001CD9C7007F001801CE1301003801DC80003013D8EB0FF800705B00605BA200E0491303
D8C01F5D5C12001607013F5D91C7FCA2160F495D137E161F5F13FE49143F94C7FC187000
014B136049147E16FE4C13E0000317C049150104F81380170300071700495D170EEE781C
000FED7C3849EC1FF0D80380EC07C0342D7DAB3A>I<01F8EB0FC0D803FEEB7FF0D8070F
EBF038000E903883C07C3A0C07C701FC001C13CE0018EBDC03003813D8003013F8D90FF0
13F800709038E000E0006015005C12E0EAC01F5C1200A2133F91C8FCA35B137EA313FE5B
A312015BA312035BA312075BA3120F5BEA0380262D7DAB2C>114
D<EC0FF0EC7FFE903901F00F809039078001C049C712E0011E14605BED01F0491307A201
F8EB0FE05B7FED03806D90C7FC7F7F14F86DB47E15E06D13F86D7F01077F1300EC07FF14
0081ED3F80151F120E003FEC0F00487EA25D48C7121EA200FC5C12605D00705C6C495A6C
EB07C0260F803FC7FC3803FFFC38007FE0242D7BAB2E>I<141C147EA314FE5CA313015C
A313035CA313075CA2007FB512FCB6FC15F839000FC000A2131F5CA3133F91C7FCA35B13
7EA313FE5BA312015BA312035BA21570000714605B15E015C0000F130101C013801403EC
070000071306140E5C6C6C5A000113F03800FFC0013FC7FC1E3F7EBD23>I<013E1738D9
FF80D901C013FC2603C3C0903907E001FE380703E0380601F0000E150F001C16C0D81803
16000038187E0030031F143E00705ED86007171E5C163FD8E00F92C7121C00C049160CEA
001F4A49141C047E1418133F91C7FC04FE1438494A1430137EA20301157001FE4A14605B
19E019C0A24949481301198018031900606D0107140670130E017C010F5C017E010C1418
013ED91CFC13386DD9387E13F0903B0FC0F01F01C0903B03FFC00FFF809028007F0001FE
C7FC3F2D7DAB46>119 D<02FCEB07E0903A03FF801FFC903A0F07C0781E903A1C03E0E0
1F903A3801F1C07FD9700013804901FB13FF4848EBFF00495B000316FE90C71438484A13
0012061401000E5C120CC7FC14035DA314075DA3140F5DA3021F143817305D1770023F14
60121E003F16E0267F807FEB01C0026F148000FF01EF1303D901CFEB070000FE903887C0
0E267C03835B3A3C0F01E0783A1FFC00FFE0D803F0EB3F80302D7EAB37>I<027CEB0180
49B413034901801300010F6D5A49EBE00E6F5A90393F03F838903978007EF80170EB1FF0
0160EB01E001E05C49495A90C748C7FC150E5D5D5D5D4A5A4A5A4AC8FC140E5C5C5C5CEB
03C049C9FC130E49141C4914185B49143848481430491470D8039014F048B4495A3A0FEF
C007C0391E03F01FD81C01B55A486C91C7FC485C00606D5A00E0EB3FF048EB0FC0292D7C
AB2D>122 D E /Fm 36 123 df<B812C0AD2A0D7EA636>45 D<16F04B7E1507151F153F
EC01FF1407147F010FB5FCB7FCA41487EBF007C7FCB3B3B3B3007FB91280A6395E74DD51
>49 D<913801FFF8021FEBFFC091B612F8010315FF010F16C0013F8290267FFC0114F890
27FFE0003F7F4890C7000F7F48486E7FD807F86E148048486E14C048486E14E048486F13
F001FC17F8486C816D17FC6E80B56C16FE8380A219FFA283A36C5BA26C5B6C90C8FCD807
FC5DEA01F0CA14FEA34D13FCA219F85F19F04D13E0A294B512C019804C14004C5B604C5B
4C5B604C13804C90C7FC4C5A4C5A4B13F05F4B13804B90C8FC4B5AED1FF84B5A4B5A4B48
143F4A5B4A48C8FC4A5A4A48157E4A5A4A5AEC7F8092C9FC02FE16FE495A495A4948ED01
FCD90FC0150749B8FC5B5B90B9FC5A4818F85A5A5A5A5ABAFCA219F0A4405E78DD51>I<
92B5FC020F14F8023F14FF49B712C04916F0010FD9C01F13FC90271FFC00077FD93FE001
017F49486D8049C86C7F484883486C6F7F14C0486D826E806E82487FA4805CA36C5E4A5E
6C5B6C5B6C495E011FC85A90C95CA294B55A614C91C7FC604C5B4C5B4C5B4C5B047F1380
92260FFFFEC8FC020FB512F817E094C9FC17F817FF91C7003F13E0040713F8040113FE70
7F717F7113E085717FA2717F85A285831A80A31AC0EA03FCEA0FFF487F487F487FA2B57E
A31A80A34D14005C7E4A5E5F6C495E49C8485BD81FF85F000F5ED807FE92B55A6C6C6C49
14806C01F0010791C7FC6C9026FF803F5B6D90B65A011F16F0010716C001014BC8FCD900
1F14F0020149C9FC426079DD51>I<F01F804E7E187F18FFA25F5F5F5FA25F5F5FA294B5
FC5E5E5EA25E5EEE3FBFEE7F3FA216FEED01FCED03F8ED07F0A2ED0FE0ED1FC0ED3F8016
005D15FE4A5A4A5AA24A5A4A5A4A5A4A5AA24AC7FC14FE495A5C1303495A495A495A5C13
3F49C8FC13FE485AA2485A485A485A5B121F485A48C9FC12FEBCFCA6CA6CEBC000B1037F
B8FCA6485E7CDD51>I<01C0EE01C0D801F8160F01FF167F02F0EC07FFDAFF8090B5FC92
B7128019006060606060606095C7FC17FC5F17E0178004FCC8FC16E09026FC3FFCC9FC91
CBFCADED3FFE0203B512F0020F14FE023F6E7E91B712E001FDD9E00F7F9027FFFE00037F
02F801007F02E06EB4FC02806E138091C8FC496F13C04917E07113F0EA00F090C914F8A2
19FC83A219FEA419FFA3EA03F0EA0FFC487E487E487FA2B57EA319FEA35C4D13FC6C90C8
FC5B4917F8EA3FF001804B13F06D17E0001F5E6C6C17C06D4B1380D807FC92B512006C6C
4A5B6C6C6C01075B6C01E0011F5BD97FFE90B55A6DB712C0010F93C7FC6D15FC010115F0
D9003F1480020301F0C8FC406078DD51>I<F00FE04E7EA24E7EA34E7EA24E7EA34D7FA2
4D80A24D80A34D80A24D80A34D80A2DD7FBF7FA2181F05FF8017FE04016D7FA24D7E0403
8217F804076D80A24D7E040F8217E0041F6D80A24D7F043F825F047F6E7FA294C77E4C82
5E03016F7FA24C800303845E03076F80A24C80030F845E031F6F80A24C81033F845E037F
707F93B9FCA292BA7EA24A85A203FCC912070203865D020771805D86020F864B82021F86
5D87023F864B83027F8692CBFC874A864A840101875C496C728090381FFFC0B700E092B8
12FEA66F647BE37A>65 D<4DB5ED03C0057F02F014070407B600FE140F047FDBFFC0131F
4BB800F0133F030F05FC137F033F9127F8007FFE13FF92B6C73807FF814A02F0020113C3
020702C09138007FE74A91C9001FB5FC023F01FC16074A01F08291B54882490280824991
CB7E49498449498449498449865D49498490B5FC484A84A2484A84A24891CD127FA25A4A
1A3F5AA348491A1FA44899C7FCA25CA3B5FCB07EA380A27EA2F50FC0A26C7FA37E6E1A1F
6C1D80A26C801D3F6C6E1A00A26C6E616D1BFE6D7F6F4E5A7F6D6D4E5A6D6D4E5A6D6D4E
5A6D6E171F6D02E04D5A6E6DEFFF806E01FC4C90C7FC020F01FFEE07FE6E02C0ED1FF802
0102F8ED7FF06E02FF913803FFE0033F02F8013F1380030F91B648C8FC030117F86F6C16
E004071680DC007F02F8C9FC050191CAFC626677E375>67 D<B912E0A6C702E0C7FCB3B3
B3B3AEB912E0A633627CE13C>73 D<B700C0083FB612F070627097B7FCA37061D800010D
F8C7FC70F103EFA202FD6DF107CFA202FC6DF10F8FA36F6DF01F0FA26F6D183EA26F6D18
7CA26F6D18F8A36F6DEF01F0A26F6DEF03E0A26F6DEF07C0A26F6DEF0F80A3706DEE1F00
A2706D163EA2706D5EA2706D5EA3706D4B5AA2706D4B5AA2706D4B5AA2706D4B5AA3716D
4AC7FCA2716D143EA2716D5CA2716D5CA3716D495AA2716D495AA2716D495AA2716D495A
A3726D48C8FCA272EBC03EA2726D5AA2726D5AA372EBF9F0A272EBFFE0A2725CA2725CA3
7390C9FCA2735AA2735A90381FFFC0B700F86E480207B812F0A3735AA2735A8C627AE199
>77 D<BB7E1AFCF2FFC01BF81BFE757ED800010280C7001F80070114F0736C7F081F7F74
7F747F7414807414C0A27414E0A21DF0A27513F8A41DFCA91DF8A498B512F0A21DE0A250
14C01D8062501400505B505B087F5B4FB512E0071F5C93B9C7FC1BFC1BF01B8008F0C8FC
04C0CCFCB3B3A2B97EA65E627AE16E>80 D<BA12F8F1FFE01AFEF2FFC01BF01BFED80001
0280C76C7F070714C0070014F0747F081F7F747F747F7480A2748089A37480A389A865A3
505CA265A2505C9AC9FC505B505B505B087F5B4FB55A0707148096B548CAFC93B812F81B
C050CBFC621AFF932680000314C0DE007F7F071F13F8737F737F737F73808885888688A2
747FA688A688A676140FF71F80A374801F3F86771400745E746E5BB96E6E5B746E485A75
EBFE07091F90B55A090715E009015DCF003F91C7FC0A0013FC71647AE178>82
D<DBFFFCEC01E0020FD9FFE01303027F02FC130749B7130F0107EEC01F011F16F049D9C0
07EBF83F4948C7383FFE7FD9FFF8020FB5FC4801E014014849804849153F91C97E484882
001F834982003F83845B007F187FA2193FA200FF181FA27F190FA27FA26D17078080806C
01F893C7FC80ECFF8015F86CECFFC016FC6CEDFFE017FE6CEEFFE018F86C17FE6C717E6C
846C846D17F86D836D836D8313036D18806D6C17C0020F17E01401DA000F16F015000407
15F8EE007F1703050014FC183F84060713FE84A2007C8300FC83A2197FA3193F7EA31AFC
7EA27F1AF86D177F7F1AF06D17FF6D18E06D5E01FF18C06E4B138002E04B130002F84B5A
02FFED3FFC01CF01E0ECFFF8018301FF010F5B010191B65A6D6C5E48011F93C7FC480103
15FC48D9003F14E048020149C8FC476677E35A>I<001FBEFCA64849C79126E0000F1480
02E0180091C8171F498601F81A0349864986A2491B7FA2491B3F007F1DC090C9181FA400
7E1C0FA600FE1DE0481C07A5CA95C7FCB3B3B3A3021FBAFCA663617AE070>I<000FBB12
FE87A54BC86C5B03C05F4AC9B5FC4801F84B5C02E0604A5D4A4B5C91C95D495E494C5C49
96C7FC60494C5B496095B5FC4D5C49605F4D5C4960003F5E4D5C97C8FC90C95A4D5B6194
B5FC4C5CC95D5E4C5C615E4C5C96C9FC5E4C5B6093B5FC4B5C605D604B5C5D605D4B91CA
FC5F5D92B55A5F5C4A4AED1F805F5C4A5C5F5C4A91C9FC4C163F5C91B55A4C17005B495C
4C5E5B495C4C5E5B4991CAFC4B5E5B90B5485E4B5E5A484A5E4B5E4861484A5E4B4BB5FC
4806075B4891C9121F4A93B5FC48171FBCFCA57E516277E163>90
D<913803FFFE027FEBFFF00103B612FE010F6F7E4916E090273FFE001F7FD97FE001077F
D9FFF801017F486D6D7F717E486D6E7F85717FA2717FA36C496E7FA26C5B6D5AEB1FC090
C9FCA74BB6FC157F0207B7FC147F49B61207010F14C0013FEBFE004913F048B512C04891
C7FC485B4813F85A5C485B5A5CA2B55AA45FA25F806C5E806C047D7F6EEB01F96C6DD903
F1EBFF806C01FED90FE114FF6C9027FFC07FC01580000191B5487E6C6C4B7E011F02FC13
0F010302F001011400D9001F90CBFC49437CC14E>97 D<903807FF80B6FCA6C6FC7F7FB3
A8EFFFF8040FEBFF80047F14F00381B612FC038715FF038F010014C0DBBFF0011F7FDBFF
C001077F93C76C7F4B02007F03F8824B6F7E4B6F13804B17C0851BE0A27313F0A21BF8A3
7313FCA41BFEAE1BFCA44F13F8A31BF0A24F13E0A24F13C06F17804F1300816F4B5A6F4A
5B4AB402075B4A6C6C495B9126F83FE0013F13C09127F00FFC03B55A4A6CB648C7FCDAC0
0115F84A6C15E091C7001F91C8FC90C8000313E04F657BE35A>I<92380FFFF04AB67E02
0F15F0023F15FC91B77E01039039FE001FFF4901F8010113804901E0010713C049018049
13E0017F90C7FC49484A13F0A2485B485B5A5C5A7113E0485B7113C048701380943800FE
0095C7FC485BA4B5FCAE7EA280A27EA2806C18FCA26C6D150119F87E6C6D15036EED07F0
6C18E06C6D150F6D6DEC1FC06D01E0EC7F806D6DECFF00010701FCEB03FE6D9039FFC03F
FC010091B512F0023F5D020F1580020102FCC7FCDA000F13C03E437BC148>I<F17FF805
0FB5FCA6EF000F8484B3A892380FFF804AB512F8020F14FE023FECFF8391B712E3010391
38807FF3499039F8000FFB011F01E00103B5FC494913004990C87E49488148498148834A
815A485BA2485BA25AA3485BA4B5FCAE7EA46C7FA37EA26C7FA26C5F806C5F6C6D5D6C6D
5D017F93B5FC6D6C6C0103806D6D49806D01F0D91FF7EBFFFE6D9039FE01FFE7010190B6
12876D6CECFE07021F14F8020314E09127003FFE00ECC0004F657BE35A>I<92380FFFC0
4AB512FC020FECFF80023F15E091B712F80103D9FE037F499039F0007FFF011F01C0011F
7F49496D7F4990C76C7F49486E7F48498048844A804884485B727E5A5C48717EA35A5C72
1380A2B5FCA391B9FCA41A0002C0CBFCA67EA380A27EA27E6E160FF11F806C183F6C7FF1
7F006C7F6C6D16FE6C17016D6C4B5A6D6D4A5A6D01E04A5A6D6DEC3FE0010301FC49B45A
6D9026FFC01F90C7FC6D6C90B55A021F15F8020715E0020092C8FC030713F041437CC14A
>I<EE3FFC0307B51280033F14C04AB612F0020715F84A9038F03FFC4AEB807F913A7FFE
00FFFE4A5A4B4813FF4913F05B4913E0A24913C0A27013FE4949EB7FFCEF3FF8EF1FF0EF
07C094C7FCB0B812C0A6D8001F01C0C8FCB3B3B0007FB612FCA638657CE431>I<F107F8
DB7FFEEC3FFE020FB5D8F001B5FC027FDAFE03148049B7128F49DCDFFD13C0010FD9F00F
EBFFC149D9800114014990C7EBFC0349486E6C7E4948EC3FFF48496E0181138007801300
48F0C03E97C7FC48496E7FA34884A96C60A36C6D4A5BA26C60A26C6D4A90C8FC6D6C4A5A
6D6C4A5A6D6D485BDBF00F5B4990B612C060D97C7F4AC9FCD9FC0F14F09126007FFECAFC
92CCFC1201A47FA27F8014F091B77E18FE6CEFFFC019F06D17FC19FF6D846D846D846D84
013F8490BAFC0003854801E0C712014890C9000F7F484816014848EE007F4848717E8512
FF5B85A56D5F007F616D173F003F616D177F6C6C4D5A6C01C003035B6C6D4B5B6C01F803
1F5BC601FF92B5C7FC6D01F8011F5B011F90B712F8010717E0010094C8FC020F15F0DA00
3F01FCC9FC4A607CC151>I<903807FF80B6FCA6C6FC7F7FB3A8EF1FFF94B512F0040714
FC041F14FF4C8193267FE07F7F922781FE001F7FDB83F86D7FDB87F07FDB8FC0814C7F03
9FC78015BE03BC8003FC825DA25DA25DA45DB3B2B7D8F007B71280A651647BE35A>I<EB
0FE0EB3FF8497E48B5FCA24880A24880A76C5CA26C91C7FCA238007FFC6D5AEB0FE090C9
FCAF903807FF80007FB5FCA6C6FC7F7FB3B3AEB712C0A622657BE42C>I<903807FF80B6
FCA6C6FC7F7FB3B3B3B3ADB712E0A623647BE32C>108 D<902607FF80D91FFFEEFFF8B6
91B500F00207EBFF80040702FC023F14E0041F02FF91B612F84C6F488193267FE07F6D48
01037F922781FE001F9027E00FF0007FC6DA83F86D9026F01FC06D7F6DD987F06D4A487F
6DD98FC0DBF87EC7804C6D027C80039FC76E488203BEEEFDF003BC6E4A8003FC04FF834B
5FA24B5FA24B94C8FCA44B5EB3B2B7D8F007B7D8803FB612FCA67E417BC087>I<902607
FF80EB1FFFB691B512F0040714FC041F14FF4C8193267FE07F7F922781FE001F7FC6DA83
F86D7F6DD987F07F6DD98FC0814C7F039FC78015BE03BC8003FC825DA25DA25DA45DB3B2
B7D8F007B71280A651417BC05A>I<923807FFE092B6FC020715E0021F15F8027F15FE49
4848C66C6C7E010701F0010F13E04901C001037F49496D7F4990C87F49486F7E49486F7E
48496F13804819C04A814819E048496F13F0A24819F8A348496F13FCA34819FEA4B518FF
AD6C19FEA46C6D4B13FCA36C19F8A26C6D4B13F0A26C19E06C6D4B13C0A26C6D4B13806C
6D4B13006D6C4B5A6D6D495B6D6D495B010701F0010F13E06D01FE017F5B010090B7C7FC
023F15FC020715E0020092C8FC030713E048437CC151>I<902607FF80EBFFF8B6010FEB
FF80047F14F00381B612FC038715FF038F010114C09227BFF0003F7FC6DAFFC0010F7F6D
91C76C7F6D496E7F03F86E7F4B6E7F4B17804B6F13C0A27313E0A27313F0A21BF885A21B
FCA3851BFEAE4F13FCA41BF861A21BF0611BE0611BC06F92B512801B006F5C6F4A5B6F4A
5B03FF4A5B70495B04E0017F13C09226CFFC03B55A03C7B648C7FC03C115F803C015E004
1F91C8FC040313E093CBFCB3A3B712F0A64F5D7BC05A>I<D90FFFEB0FFCB690383FFF80
93B512E04B14F04B14F8923907FC7FFC92390FE0FFFEC6EC1F806DD93F0113FF6D133E15
7E157C15F8A215F07013FEA24BEB7FFCEF3FF8EF0FE04B90C7FCA55DB3B0B712F8A63841
7BC042>114 D<913A3FFF8007800107B5EAF81F011FECFE7F017F91B5FC48B8FC48EBE0
014890C7121FD80FFC1407D81FF0801600485A007F167F49153FA212FF171FA27F7F7F6D
92C7FC13FF14E014FF6C14F8EDFFC06C15FC16FF6C16C06C16F06C826C826C826C82013F
1680010F16C01303D9007F15E0020315F0EC001F1500041F13F81607007C150100FC8117
7F6C163FA2171F7EA26D16F0A27F173F6D16E06D157F6D16C001FEEDFF806D0203130002
C0EB0FFE02FCEB7FFC01DFB65A010F5DD8FE0315C026F8007F49C7FC48010F13E035437B
C140>I<EC07E0A6140FA5141FA3143FA2147FA214FF5BA25B5B5B5B137F48B5FC000F91
B512FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC171F6D6D1480A2173F6D16006F5B6D6D13
7E6D6D5B6DEBFF836EEBFFF86E5C020F14C002035C9126003FFCC7FC325C7DDA3F>I<90
2607FFC0ED3FFEB60207B5FCA6C6EE00076D826D82B3B3A260A360A2607F60183E6D6D14
7E4E7F6D6D4948806D6DD907F0ECFF806D01FFEB3FE06D91B55A6E1500021F5C020314F8
DA003F018002F0C7FC51427BC05A>I<B70081B600FC0103B512FCA6C66C0180C701FCC8
381FFE006F6FED03F86D047F5F856F6E16076D646F70140F6D705F866F6E161F6D646F4A
6D143F6D99C7FC4E7F6F616D1B7E6F4A6D14FE6D6395B57E7001FC15016E62DCC0016E13
036EDBF87F5D05038004E0496C14076E62DCF007ED800F6E4B6C5D050F15C004F8496C14
1F6E62DCFC1FEDE03F6E4B6C92C8FC053F15F004FE496C5C6E197E7048EDF8FE6E027E6D
5C05FE15FC4D6D13FD6F601BFF6F496E5BA24D806F60A26F496E5BA24D806F60A26F496E
90C9FCA294C87E6F5FA26F486F5A047C6F5A6E417DBF75>119 D<B700C00103B512FCA6
D8003F01C0C8381FFE006FED07F0A26D6D5E190F6D6D5E191F6D6D5E193F6D95C7FC6F5D
6D177E6F15FEA26D6E495AA26E6D5C18036E6D5C18076E5E70130F6E5E70131FA26E6D49
5AA26E6D91C8FC606E6D137E18FE6E5D17816F5C17C3A26FEBE7F0A26FEBF7E017FF6F5C
A26F5CA26F91C9FCA36F5BA26F5BA2705AA2705AA2705AA35FA25F163F94CAFC5E167E16
FED807E05CD81FF81301487E486C495AA2B5495AA24B5A5E151F4B5A6C4849CBFC15FEEB
FC01393FF807FC391FF03FF06CB55A6C5C6C91CCFCC613FCEB1FE04E5D7DBF55>121
D<0007B912E019F0A402FCC714E04801C04914C091C7FC494A1480494A1400494A5B5B4C
5B494A5B4C5B5B93B55A4B5C5D001F5F494991C7FC4B5BA24B5B4B5BC8485BA292B55A4A
5C4A5CA24A91C8FC4A5B4A5BA24A5B4A49EB03F091B55AA2495C495C4991C7FC18074949
15E0495B5B5D4949140F90B55AA2484A141F485C4891C8123F187F484915FF48495C4849
1407051F13C0484949B5FCBAFCA47E3C407CBF48>I E /Fn 28 119
df<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A31201138012031300
5A120E5A1218123812300B1C798919>44 D<B512FEA617067F961E>I<121EEA7F80A2EA
FFC0A4EA7F80A2EA1E000A0A798919>I<EB01C013031307131F137FEA07FFB5FC139FEA
F81F1200B3B3ACEB7FF0B612F8A31D3D78BC2D>49 D<EB07FC90383FFF8090B512E03903
F01FF83907C007FC390F0001FE001E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB
1FF07FA56C5A6CC7FC120CC813E0153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A
5A4A5A4AC7FC147E147C5C495A495A495A495A49C71270133E133C5B4914E0485A485A48
5A48C7120148B6FCA25A4815C0B7FCA3243D7CBC2D>I<EB07FC90383FFF809038F80FE0
3901E003F839078001FCD80F007F000E6D7E001E1580D81F80137F486C14C07FA27F5BA2
121F6C5AC8138015FF1600A24A5AA24A5A5DEC07E04A5A023FC7FCEB1FFCECFF80903800
0FE0EC07F86E7E6E7E6E7E1680ED7FC0A216E0153FA216F0A2120C123F487E487EA316E0
A249137F6CC713C01278EDFF807E6C4913006C495A3907C007FC3903F80FF0C6B55A013F
1380D907F8C7FC243F7CBC2D>I<150E151E153EA2157EA215FE1401A21403EC077E1406
140E141CA214381470A214E0EB01C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A
90C7FC5A120E120C121C5AA25A5AB8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<12
38123C123F90B612FCA316F85A16F016E00078C712010070EC03C0ED078016005D48141E
151C153C5DC8127015F04A5A5D14034A5A92C7FC5C141EA25CA2147C147814F8A213015C
1303A31307A3130F5CA2131FA6133FAA6D5A0107C8FC26407BBD2D>55
D<EB03FC90381FFF8090387C07E09038F001F83901E0007C48487F48487F48C7FCED0F80
121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D140001FC133E6C6C5B9038FF8078
6C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F013F13F801787F48486C7E3903E0
1FFF48486C1380260F800313C048487E489038007FE0003E143F007E141F007CEC0FF015
07481403A31501A46C15E0007C1403A2007E15C06C14076CEC0F806DEB1F006C6C133ED8
07F05B3901FC03F86CB512E0011F1380D903FCC7FC243F7CBC2D>I<EB03FCEB1FFF9038
7E07C09038FC03F048486C7E48486C7E4848137C000F147E4848137F81003F15805B007F
15C0A2151F12FF16E0A516F0A5127F153FA36C7EA2001F147F120F6C6C13FF6D13DF0003
13013900F8039F90387E0F1FD91FFE13E0EB07F090C7FCA2ED3FC0A41680157FD80F8014
00487E486C13FEA24A5A5D49485AEB8007391E000FE0001F495A260FC07FC7FC3803FFFE
6C13F838003FC0243F7CBC2D>I<B912E0A300019038C000016C6C48EB001FEF0FF01703
A217011700A31870A41838161CA41800A2163CA2167C16FC150391B5FCA3EC8003150016
7C163CA2161CA21807A3180E93C7FCA4181E181CA2183CA2187CA218F817011703170717
1F48486CEB01FFB912F0A3383E7DBD3E>69 D<B612F0A3C6EBF000EB3FC0B3B3B2EBFFF0
B612F0A31C3E7EBD21>73 D<B500C093383FFFF0A300016D93387FF800D8007F18E0D977
F016EFA3D973F8ED01CFA2D971FCED038FA3D970FEED070FA26E150E80A26E6C141CA36E
6C1438A26E6C1470A36E6C14E0A26E6CEB01C0A36E6CEB0380A36E6CEB0700A2037F130E
A36F6C5AA26F6C5AA36F6C5AA2EEF060030713E0A2923803F9C0A36FB45AA26F90C7FCA2
13F8486C147ED807FFEF3FF8B500F8013C011FB512F0A34C3E7DBD53>77
D<B56C91B512F88080D8007F030713006EEC01FC6E6E5A1870EB77FCEB73FEA2EB71FF01
707FA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F
7EA26F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF7013F0A2
177F173FA2171F170FA2170701F81503487ED807FF1501B500F81400A218703D3E7DBD44
>I<003FB91280A3903AF0007FE001018090393FC0003F48C7ED1FC0007E1707127C0078
1703A300701701A548EF00E0A5C81600B3B14B7E4B7E0107B612FEA33B3D7DBC42>84
D<EB0FF8EBFFFE3903F01F8039078007E0000F6D7E9038E001F8D81FF07F6E7EA3157F6C
5AEA0380C8FCA4EC1FFF0103B5FC90381FF87FEB7F803801FC00EA07F8EA0FE0485A485A
A248C7FCEE038012FEA315FFA3007F5BEC03BF3B3F80071F8700261FC00E13CF3A07F03C
0FFE3A01FFF807FC3A003FC001F0292A7DA82D>97 D<49B4FC010F13E090383F00F8017C
131E4848131F4848137F0007ECFF80485A5B121FA24848EB7F00151C007F91C7FCA290C9
FC5AAB6C7EA3003FEC01C07F001F140316806C6C13076C6C14000003140E6C6C131E6C6C
137890383F01F090380FFFC0D901FEC7FC222A7DA828>99 D<EB01FE90380FFFC090383F
03F09038FC01F848486C7E4848137E48487F000F158049131F001F15C04848130FA2127F
16E090C7FCA25AA290B6FCA290C9FCA67EA27F123F16E06C7E1501000F15C06C6C13036D
EB07806C6C1400C66C131E017E5B90381F80F8903807FFE0010090C7FC232A7EA828>
101 D<167C903903F801FF903A1FFF078F8090397E0FDE1F9038F803F83803F001A23B07
E000FC0600000F6EC7FC49137E001F147FA8000F147E6D13FE00075C6C6C485AA23901F8
03E03903FE0FC026071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512E015FE6C6E
7E6C15E06C810003813A0FC0001FFC48C7EA01FE003E140048157E825A82A46C5D007C15
3E007E157E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313
C0293D7EA82D>103 D<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC127FA312
0712031201B3AC487EB512F0A3143E7DBD1A>105 D<EA01FC12FFA3120712031201B3B3
B1487EB512F8A3153F7DBE1A>108 D<3901F801FE00FF903807FFC091381E07E0913878
03F000079038E001F82603F9C07F0001138001FB6D7E91C7FC13FF5BA25BB3A6486C497E
B5D8F87F13FCA32E287DA733>110 D<14FF010713E090381F81F890387E007E01F8131F
4848EB0F804848EB07C04848EB03E0000F15F04848EB01F8A2003F15FCA248C812FEA448
15FFA96C15FEA36C6CEB01FCA3001F15F86C6CEB03F0A26C6CEB07E06C6CEB0FC06C6CEB
1F80D8007EEB7E0090383F81FC90380FFFF0010090C7FC282A7EA82D>I<3901FC03FC00
FF90381FFF8091387C0FE09039FDE003F03A03FFC001FC6C496C7E91C7127F49EC3F805B
EE1FC017E0A2EE0FF0A3EE07F8AAEE0FF0A317E0161FA2EE3FC06D1580EE7F007F6E13FE
9138C001F89039FDE007F09039FC780FC0DA3FFFC7FCEC07F891C9FCAD487EB512F8A32D
3A7EA733>I<3901F807E000FFEB1FF8EC787CECE1FE3807F9C100031381EA01FB1401EC
00FC01FF1330491300A35BB3A5487EB512FEA31F287EA724>114
D<90383FC0603901FFF8E03807C03F381F000F003E1307003C1303127C0078130112F814
00A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE6C7F6C1480000114C0D8003F13E00103
13F0EB001FEC0FF800E01303A214017E1400A27E15F07E14016C14E06CEB03C090388007
8039F3E01F0038E0FFFC38C01FE01D2A7DA824>I<131CA6133CA4137CA213FCA2120112
031207001FB512C0B6FCA2D801FCC7FCB3A215E0A912009038FE01C0A2EB7F03013F1380
90381F8700EB07FEEB01F81B397EB723>I<B539E00FFFE0A32707FE000313006C48EB00
FC5E00015D7F00005DA26D13016D5CA26D6C485AA2ECC007011F91C7FCA290380FE00EA2
ECF01E0107131CA26D6C5AA2ECFC7801011370A2ECFEF001005BA2EC7FC0A36E5AA26EC8
FCA3140E2B287EA630>118 D E /Fo 36 122 df<EB07C0EB0FE0EB1FF0EB3FF8137F13
FFA25A4813F05A4813C01480381FFE00EA3FF8EA7FE0EAFF8048C7FC127C1230151369C5
38>19 D<00201420007814F0007E130339FFC01FF8397FF07FF0001FB512C06C14800003
EBFE006C5B38007FF06D5AEB0F806DC7FC1D0D73C038>I<EA07C0EA1FF0EA3FF8EA7FFC
EAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F0F788E1F>46 D<EC03C01407141F147FEB03FF
133FB6FCA413C3EA0003B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F6D7E
90B612E0000315F82607FC0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C0
15E001F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B
1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE49
5A494814F8D907E014F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8
FC17C0A42D417BC038>I<EE1F80A24C7EA24C7EA34C7EA24B7FA34B7FA24B7FA34B7F16
9F031F80161F82033F80ED3E07037E80157C8203FC804B7E02018115F0820203814B137F
0207815D173F020F814B7F021F8292C77EA24A82023E80027E82027FB7FCA291B87EA249
8302F0C8FCA20103834A157F0107834A153FA249488284011F8491C97E4984133E017E82
B6020FB612F0A54C457CC455>65 D<B9FC18F018FE727E19E026003FFCC700077F05017F
716C7E727E727EA2721380A37213C0A74E1380A24E1300A24E5A4E5A4E5A4D5B05075B94
B5128091B700FCC7FC18F018FF19E002FCC7000113F8716C7EF01FFE727E7213801AC072
13E0A27213F0A31AF8A71AF0A2601AE0604E13C0604E138095B5120005075BBA12F86119
C04EC7FC18E045447CC350>I<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023F
EDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948
814948167F4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A349
94C7FC12FFAE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE
0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D
903AFFF001FF80023F90B6C7FC020715FC020115F0DA001F1480030001F8C8FC44467AC4
51>I<B9FC18F018FE727E19E026003FFEC7001F13F805017F9438003FFF060F7F727F72
7F727F84737E737EA2737EA2737EA21B80A2851BC0A51BE0AD1BC0A51B8061A21B006162
193F624F5A19FF624E5B06075B4E5B063F90C7FC4DB45A050F13F8BA5A19C04EC8FC18F0
95C9FC4B447CC356>I<BA1280A419C026003FFEC7121F1701EF007F183F181F180F1807
19E01803A31801A3EE01E0F000F0A419001603A31607160F167F91B6FCA59138FE007F16
0F16071603A31601A693C9FCAFB712F0A53C447CC346>70 D<0107B7FCA590C7001F1300
B3B3A9EA1FE0487E487EA2487EA44B5AA26C48495A495C6C4813FF6C48485B260FFC0713
C06CB65A6C4AC7FCC66C13F8010F138030457DC33A>74 D<B76C0103B512F8A526003FFE
C93807E0004F5A4F5A077EC7FC614E5A4E5A4E5AF01F804EC8FC187E604D5AEF07F0EF0F
C04D5A4DC9FC177E4C5AEE03F04C5A4C5A4C7EEE7FF04C7E5D4B7F4B7F4B7FED3F3FDB7E
1F7F03FC806E486C7F4B7E4B6C7F0380804B6C7F4A7F717E84717F83717F85717F83717F
85717F187F727E86727F84727F86727F84B76C90B612FCA54E447CC358>I<B500FE067F
B512806E95B6FCA26F5EA2D8003F50C7FC013D6DEE03DFA2013C6DEE079FA26E6CEE0F1F
A26E6C161EA26E6C163CA36E6C1678A26E6C16F0A26E6DEC01E0A26E6DEC03C0A36E6DEC
0780A26F6CEC0F00A26F6C141EA26F6C5CA36F6C5CA26F6C5CA26F6D485AA26F6D485AA2
6F6D485AA3706C48C7FCA293383FF81EA2706C5AA2706C5AA3706C5AA2705BA2705BA270
5BA2B6057FB6128071C7FCA2173E171C61447CC36A>77 D<B9FC18F018FE727E19E0D800
1F90C7000F7F05017F716C7E727E727E721380A21AC084A21AE0A91AC0A24E1380A21A00
604E5A4E5A4D485A050F5B92B712C096C7FC18FC18C092CBFCB3A7B712E0A543447DC34D
>80 D<003FBA12E0A59026FE000FEB8003D87FE09338003FF049171F90C71607A2007E18
03007C1801A300781800A400F819F8481978A5C81700B3B3A20107B8FCA545437CC24E>
84 D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C
6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC
01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE
013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>
97 D<EB7FC0B5FCA512037EB1ED0FF892B57E02C314E002CF14F89139DFC03FFC9139FF
000FFE02FCEB03FF4A6D13804A15C04A6D13E05CEF7FF0A218F8173FA318FCAC18F8A217
7F18F0A3EFFFE06E15C06E5B6E491380027C491300496C495A903AFC1FC07FFC496CB512
F0D9F00314C049C691C7FCC8EA1FF036467DC43E>I<EC3FFC49B512C0010F14F0013F14
FC90397FF003FE9039FFC001FF0003495A48494813805B120F485AA2485A6F1300007F6E
5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB
1F006C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391C7FC9038003FF82A2F7C
AD32>I<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039
FFF807FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA3127F5BA212
FFAC127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038
F01FEF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>I<EC3FF80103
B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D1380485A
001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2
123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE
01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<EDFF80020F13E002
7F13F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0FFCEBFFE0
ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A527467DC522>I<DAFFE0
137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F489038001FF84848EB0FFC
4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F5D
6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013E0000F90CAFCA4
7F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81FF0C77ED83FC014
074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC3F
F83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>I<
EB7FC0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F89139C7F03FFC9138CF80
1F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<13
7C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA
7FFFA512037EB3AFB6FCA518467CC520>I<EB7FC0B5FCA512037EB293387FFFE0A59338
0FE0004C5A4CC7FC167E5EED03F8ED07E04B5A4B5A037FC8FC15FEECC1FCECC3FE14C7EC
DFFF91B57E82A202F97F02E17F02C07FEC807F6F7E826F7E816F7F836F7F816F7F83707E
163FB60003B512F8A535457DC43B>107 D<EB7FC0B5FCA512037EB3B3B3A3B61280A519
457CC420>I<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512E00281
6E4880913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E007F6C01
9E6D013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA557
2D7CAC5E>I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F80
1F000390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC
3E>I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848
C7EA3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F17
00A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F
90C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90397FC00FF8B590
B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB07FF6C496D13804A15
C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA24C13E06E15C06E5B6E
4913806E4913006E495A9139DFC07FFC02CFB512F002C314C002C091C7FCED1FF092C9FC
ADB67EA536407DAC3E>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1F
FE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A527
2D7DAC2E>114 D<90391FFC038090B51287000314FF120F381FF003383FC00049133F48
C7121F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC
6C800003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA2
6C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FE
C7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90
B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391F
FC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5FCA5
0003EC000F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C701
0F1407010313FE9026007FF0EBFC00372E7CAC3E>I<B6903803FFFCA5000101E0903800
3E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D
92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E
5BA36E5BA26E90C8FCA26E5AA26E5AA21578362C7EAB3B>I<B6903803FFFCA5000101E0
9038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED
800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B
15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D001F1303D83F805B
387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A6C5B000790CAFCEA
01FC36407EAB3B>121 D E /Fp 54 123 df<EF7FF80407B5FC93391FC00FC093393E00
01E004FCEB00F04B4813014B4813075E0307140FA24B5A19E0031FEC03804C90C7FCA315
3F93C9FCA45D157EA415FE91B8FCA260DA00FCC7127E020115FE4B5CA317016014035D17
0360A214074B130760A3020F140F4B5CA3171F021F5D5DA2053F13E01801023F16C092C7
FCA2EF7F03057E13805C027E15071900173E180E02FEEC1E1E4AEC1F1CEF07F8EF01E094
C8FC495AA35C1303A2001C5B127FEAFF075CA2495A00FE90CBFCEAF81FEA701EEA783CEA
1FF0EA07C03C5A83C537>12 D<167016F0ED01C0ED0380ED0700150E153C5D15F85D4A5A
4A5A4A5A140F4AC7FC141E143E5C147814F8495A5C1303495AA2495AA249C8FCA25B133E
137E137CA25BA212015BA212035BA212075BA2120FA25BA2121FA290C9FCA25AA2123EA3
127EA2127CA65AAB1278A6127C123CA47EA2120E120FA27E6C7EA26C7EA26C7E13602464
72CA28>40 D<1560A2157081A281151E150E150FA2811680A3ED03C0A516E0A21501A715
03A91507A216C0A4150FA21680A2151FA21600A25DA2153EA2157EA2157C15FCA25D1401
A25D14035DA214075D140F5DA24AC7FCA2143EA25C147814F8495AA2495A5C1307495A91
C8FC131E133E5B13785B485A485A485A48C9FC121E5A5A12E05A23647FCA28>I<13F0EA
03FC1207A2EA0FFEA4EA07FCEA03CCEA000C131C1318A2133813301370136013E0EA01C0
13801203EA0700120E5A5A5A5A5A0F1D7A891E>44 D<007FB5FCB6FCA214FEA218057897
23>I<120FEA3FC0127FA212FFA31380EA7F00123C0A0A76891E>I<9026380FC0131C9038
787FE0902671FFF0133C01F3157801EF15F090B5FC4801E0EB01E09139007003C04848EB
380701F8EC1F804848EB1C3F4990381FFF004848EB07DF49EB001E48C85A121E5E4815F8
00385D0078140100705D00F01403485D1507C8485AA24BC7FCA25D153E157E157C15FC5D
1401A24A5AA214075D140F5D141FA25D143FA24AC8FCA314FEA21301A25C1303A25C1307
A35C130FA25CA25C6D5A2E4472C132>55 D<ED3FC0EDFFF0020313FC91380FE07E91383F
803F4A487E02FC14800101140F494814C0495A495AA2495A133F4A14E0137FA249C7FC16
1FA24816C05BA2163F12035BA2167F17804914FFA34B130012015D5D00005D6D130F017C
131D153B6DEB73FC90381F03E3903907FF83F8903801FC0790C7FC5E150F5E151F5E4B5A
A24BC7FCA2001C14FE007F5C48495A4A5A14074A5A485C00F8013FC8FC48137E5C387C07
F0383FFFE06C1380D803FCC9FC2B4476C132>57 D<130FEB1FC0133FEB7FE0A213FF14C0
EB7F801400131E90C7FCB3A5120FEA3FC0127FA212FFA35B6CC7FC123C132B76AA1E>I<
EF03801707A24D7EA2171FA2173F177FA217FFA25EA2EE03BF1607173F160F160E161C84
1638171F167016F016E0ED01C0A2ED0380A2ED0700A2150E151E151C5D845D170F5D1401
5D14035D4AC7FC92B6FC5CA2021CC7120F143C14385CA24A81A249481407A2495A130791
C8FC130E131EA25B137C13FC00014C7ED807FE151FB500E00107B512F8A219F03D477BC6
48>65 D<91B712FCF0FF8019E00201903980001FF06E90C7EA07F84A6F7E727E4B81841A
804A48157FA414075D19FFA2020F17004B5C611803021F5E4B4A5A180F4E5A023F4B5A4B
EC7F804EC7FCEF03FC027FEC0FF84BEBFFC092B6C8FC18E0913AFF800007F892C7EA01FC
717E187F49834A6F7EA30103835CA313075CA3010F5F4A157FA24E5A131F4A4A90C7FC60
1703013F4B5A4A4A5A4D5A017F4B5A4D5A4A4948C8FC01FFEC0FFEB812F817C04CC9FC41
447AC345>I<DC0FF8130393B513070307ECC00F923A1FF803E01F923A7FC000F81E4BC7
EA7C3EDA03FCEC3C7EDA0FF0EC1EFE4A48EC0FFC4A4814074AC8FC02FE1503494816F813
0349481501495A494816F0495A137F5C01FF17E04890C9FCA2485A19C0485AA2485A95C7
FC121F5BA2123F5BA3127F5BA4485AA41838A218781870A218F0007F5F1701601703003F
5F17076D4BC7FC001F160E171E6C6C5D6D5D00075E6C6C4A5A6DEC07C06C6C4A5AD8007F
023EC8FCD93FC013FC90391FF807F00107B512C0010191C9FC9038001FF0404872C546>
I<91B712F818FF19C00201903980003FF06E90C7EA0FF84AED03FCF000FE4B157FA2F13F
804A48ED1FC0A2F10FE0A214074B16F01907A2140F5D1AF8A2141F5DA2190F143F5D1AF0
A2147F4B151FA302FF17E092C9123FA34918C04A167F1A80A2010317FF4A1700A24E5A13
074A4B5A611807010F5F4A4B5A181F61011F4C5A4A4BC7FC18FE4D5A013F4B5A4A4A5A4D
5A017FED3FC005FFC8FC4AEB03FE01FFEC1FF8B812E094C9FC16F845447AC34A>I<91B9
12C0A30201902680000313806E90C8127F4A163F191F4B150FA34A48ED0700A414074B5D
190EA2140F4B1307A25F021F020E90C7FC5DA2171E023F141C4B133C177C17FC027FEB03
F892B5FCA39139FF8003F0ED00011600A2495D5CA2160101034B13705C19F061010791C8
FC4A1501611803010F5F4A150796C7FC60131F4A151E183E183C013F167C4A15FC4D5A01
7F1503EF0FF04A143F01FF913803FFE0B9FCA26042447AC342>I<DC0FF81306DCFFFE13
0E03079038FF801E923A1FF807E03E923A7F8001F03CDA01FEC7EA787CDA03F8EC3CFCDA
0FF0141D4A48EC1FF8DA3F80140F4AC8FCD901FE1507494816F05C01071603495A494816
E0495A137F5C01FF17C04890C9FC5B12031980485AA2485A95C7FC121F5BA2123F5BA312
7F5BA4485A043FB512E0A39339001FF80060A360A2007F163F60A3177F003F5F7F121F17
FF6D93C7FC000F5D6C6C5C7F6C6C4A5A6C6CEC1F3E6C6C143ED93FC0EBF81E903A1FF007
F01C0107B5EAC00C010149C9FC9038003FF03F4872C54B>71 D<027FB512E091B6FCA202
00EBE000ED7F8015FFA293C7FCA34A5AA414035DA314075DA3140F5DA3141F5DA3143F5D
A3147F5DA314FF92C8FCA35B5CA313035CA313075CA3130F5CA3131F5CA2133FA25CEBFF
E0B612E0A25D2B447BC326>73 D<031FB512F05DA29239000FFC005FA35FA2161F5FA316
3F5FA3167F5FA316FF94C7FCA35D5EA315035EA44B5AA44B5AA3151F5EA3153F5EA3157F
5EA2EA0F80D83FE013FF93C8FC127FA24A5AEAFFC04A5A1300007C495A0070495A4A5A6C
5C003C495A6C01FEC9FC380F81F83803FFE0C690CAFC344679C333>I<91B612F0A25F02
0101C0C7FC6E5B4A90C8FCA25DA34A5AA414075DA3140F5DA3141F5DA3143F5DA3147F5D
A314FF92C9FCA35B5CA3010316104A1538A21878010716705C18F018E0010F15015C18C0
1703011F15074A1580170FA2013FED1F004A5C5F017F15FE16034A130F01FFEC7FFCB8FC
A25F35447AC33D>76 D<91B56C93387FFFC08298B5FC02014DEBC0006E614A5F15DF506C
C7FC1A0E639126038FE04B5AA21A381A71020760030F16E1A2F101C3020F93380383F814
0EF107036F6C1507021E040E5B141C191CF1380F023C6002381670A2F1E01F0278DB01C0
5B91387003F8F003801A3F02F0ED070002E0030E5CA24E137F010196C8FC02C05D606201
036D6C495B14804D5A94380380010107600200EC0700A2050E1303494B5C130E6F6C5A19
07011E4B5C011C5DA2705A013C4D5A01385D017892C7FC191F01F85C486C027E5DD807FE
027C4A7EB500F00178013FB512C0A216705A447AC357>I<91B56C49B512E0A282020092
39000FFC00F107F0706E5A4A5F15DF705D1907DA038F93C7FC82A203875D02076D140E15
03A270141EDA0F01151C140E826F153C021E1638021C80167F1978023C6E13700238133F
A27113F00278011F5C147083040F130102F014F84A5E1607EFFC0301015F4A130317FE18
070103020191C8FC4A14FFA2705B0107168E91C8FC177F18DE4916DC010E153F18FCA201
1E6F5A131CA2170F013C5E013815071378A201F86F5A487EEA07FEB500F0140160A24B44
7AC348>I<EE1FF84BB5FC923907F01FC092391F8003F092397E0001F8DA01F86D7EDA03
E0147EDA0FC0804A48EC1F804AC813C0027E150F4A16E049481507494816F01307495A49
4816F8013F16035C137F49C9FC4917FC120112035B1207491607120FA25B121F19F84916
0F123FA34848EE1FF0A3183F19E0485A19C0187FA2F0FF80A219005F604D5AA2007F4C5A
4D5AA24D5A003F5F4D5A6D4BC7FC001F5E4C5A6C6C5DEE03F06C6C4A5A0003ED1FC06C6C
4A5A6C6C027EC8FC017EEB01F890393F8007F090390FE03F80902603FFFEC9FC9038007F
E03E4872C54B>I<91B712F018FEF0FF800201903980007FE06E90C7EA1FF04AED07F818
034B15FCF001FEA214034B15FFA314075DA3020FED03FE5DA219FC021F15074B15F8180F
19F0023FED1FE04B15C0F03F80F07F00027F15FE4BEB03FCEF0FF0EF7FC091B7C7FC17F8
92CAFCA25B5CA313035CA313075CA3130F5CA3131F5CA3133F5CA2137FA25C497EB67EA3
40447AC342>I<EE1FF84BB5FC923907F01FC092391F8007F092397E0001F8DA01F86D7E
4A48147EDA0FC0804A4815804AC8EA1FC0147E4AED0FE013014948ED07F0495A495A011F
17F8495A5C137F49C9120319FC485A000317075B12075B120FA25B121FF00FF85B123FA3
4848EE1FF0A449EE3FE012FF19C0187FA2198018FF190090C95A604D5AA26C4C5A6D5E17
0F03F85C003FD907FE495ADA0F07495ADA1C0349C7FC3A1FC0380180023014FE000F0170
EB81FCD9E060EB83F00007913800C7E03B03F0E001CFC02601F8C0EBFF80D800FC4AC8FC
D97EE013F890393F6007F090270FF03FC013300103B5FC9026007FE11470DA0003146018
E0A2170170485A170770485A923807F83F93B5C7FCA26F5B5FA25F6F5B6F13C0043FC8FC
3E5972C54B>I<91B77E18F818FE020190398001FF806E90C7EA3FC04AED1FE0F00FF04B
EC07F8180319FC4A5A19FEA314075DA3020FED07FC5DA2F00FF8141F4B15F0F01FE0F03F
C0023F16804BEC7F0018FEEF03F8027F4A5A4BEB1FC04CB4C7FC92B512F891B612E09238
0003F8EE00FE177F496F7E4A6E7EA28413034A140FA2171F13075CA3010F153F5CA26001
1F157F5CA3013F170E5CA2017FEE801E191C4A163C496C1638B66C90383FC070051F13F0
94380FE1E0CA3803FF80943800FE003F467AC347>I<DB03FE130C92390FFF801C037FEB
E03C9238FE03F8913A03F0007C784A48EB3EF84A48131F4A48130F4AC713F0027E14075C
1703494815E0A2495AA2010716C05CA3010F1680A38094C7FCA280806D7EECFFE015FC6D
EBFF806D14F016FC6D14FF023F80020F801403DA003F7F150703007F163F161F160FA216
07A3120716031607A2485EA2120E160F001E5EA2001F4B5AA2484BC7FC6D143E167E6D5C
007F4A5A6D495AD87CF0495AD8787CEB1F8027F03F807FC8FC90381FFFFCD8E00713F039
C0007F80364879C537>I<48B912F85AA2913B0007FC001FF0D807F84A130701E0010F14
0349160148485C90C71500A2001E4A4814E0A2121C123C0038143F4C1301007818C01270
00F0147F485DA3C800FF91C7FC93C9FCA35C5DA314035DA314075DA3140F5DA3141F5DA3
143F5DA3147F5DA314FF92CAFCA35B5CA21303A21307497E007FB612C0A25E3D446FC346
>I<001FB500F090383FFFFCA326003FF0C7000113806D48913800FE00013F167C18785C
187018F0017F5E5CA2170101FF5E91C8FCA21703485F5BA21707000394C7FC5BA25F0007
160E5BA2171E000F161C5BA2173C001F16385BA21778003F16705BA217F0007F5E5BA216
0100FF5E90C8FCA216035F16074893C8FC5E160E161E5E007E1538007F15785E6C4A5A6D
495A001F4A5A6D49C9FC6C6C133E6C6C13F83903FC07F0C6B512C0013F90CAFCEB07F83E
466DC348>I<B6913807FFFEA25C000301C0020013E06C90C9EA7F00183E183C60A26C17
70601701604D5AA24DC7FC5F170E6E5CA2017F5D177817705FA24C5AA24C5A16076E91C8
FC160E133F5E163C16385EA25E15015E6E485AA24BC9FC131F150E151E151C5DA25D15F0
5DECF1C0A290380FF38014F792CAFC14FEA25CA25C5CA25C13075CA25C91CBFC3F466CC3
48>I<021FB712F85C19F093C7121F03F0EC3FE0DA7FC0EC7FC04BECFF80027EC813004A
5C4A4A5A4D5A49484A5A4A5D4D5A4A143F01034B5A4A4A5A4C90C7FC01075D91C712034C
5A4C5A90C8485A5F163F4C5A4C5A4B90C8FC5E15034B5A4B5A4B5A5E4B5A157F4B5A4A90
C9FC4A5A5D14074A5A4A4814E04A5A5D027F14014A485C4990C7FC494814034A5D130749
481407495A49484AC7FC5C49485C01FF151E4890C8123E4848157E484815FE494A5A000F
1503484814074848EC3FF84848EB03FF90B7FCB8FC5F3D4479C33C>90
D<EC1F80EC7FE0903901F07070903907C039F890380F801D90381F001F013E6D5A137E5B
484813075E485A120749130F000F5DA2485A151F003F5D5BA2153F007F92C7FC90C7FCA2
5D157E12FEA29238FE0380EDFC071700A2007E13015E913803F80E1407003E010F131E16
1C6C131C02385B3A0F80F078783A07C3E07C703A01FF801FE03A007E000780292D76AB32
>97 D<EB0FE0EA07FFA338001FC0130F131FA25CA3133F91C8FCA35B137EA313FE5BA312
015BEC1F80EC7FE03903F9E0F89038F3C07C9038F7003E13FE48487F5BA2491480485AA2
5BA2121F5BA2153F123F90C7FCA2157F481500127EA25D5D5AA24A5AA24A5AA2007C5C4A
5A140F5D4A5A003C49C7FC003E137E001E5B6C485A380783E03803FF80C648C8FC214676
C42D>I<EC0FE0EC7FF8903801F81E903807E00F90390F80078090381F0003017E14C049
131F0001143F5B4848EB7F801207485AED3E00484890C7FCA2485AA2127F90C9FCA35A5A
A45AA5ED0180ED03C0ED0780A2007CEC0F00007E141E003E147C15F06CEB03E0390F800F
802607C07EC7FC3801FFF838007FC0222D75AB2D>I<EE07F0ED03FFA39238000FE01607
160FA217C0A3161F1780A3EE3F00A4167EA316FEA25EEC1F80EC7FE0903801F071903907
C039F890380F801DEB1F00013EEB0FF0137E5B484813075E485A120749130F120F5E485A
A2003F4A5A5BA3007F4AC7FC90C7FCA25D157E12FEA2EE0380EDFE0703FC1300A2007E13
015E913803F80E1407003E010F131E161C6C131C02385B3A0F80F078783A07C3E07C703A
01FF801FE03A007E0007802C4676C432>I<EC0FE0EC7FF8903801F83E903807C00F9039
1F800780EB3F00017E14C0491303485A48481307000715805B000F140F484814005D4848
133E15FCEC07F0007FEBFFC0D9FFFEC7FC14C090C9FC5A5AA55AA4ED0180ED03C0007CEC
0780A2007EEC0F00003E141E157C6C14F06CEB03E03907800F802603C07EC7FC3801FFF8
38003FC0222D75AB2D>I<EE0F80EE3FE0EEF870923801F038923803E0F8923807E1FC16
C3ED0FC7A2EE87F892381F83F0EE81E0EE8000153F93C7FCA45D157EA415FE5DA349B512
FEA390260001F8C7FCA314035DA414075DA4140F5DA4141F5DA4143F92C8FCA55C147EA3
14FE5CA413015CA4495AA35C1307121C007F5B12FF495AA291C9FC485AEAF81E485AEA78
78EA1FF0EA07C02E5A83C51E>I<15FCEC03FF91390F83838091393E01CFC091387C00EF
4A13FF4948137F010315804948133F495A011F15005C133F91C7FC49147EA213FE16FE00
015D5BA300034A5A5BA21503A2495CA215075EA3150F4B5AA20001143F157F6C6C495AEC
01DF90387C039F90383E0F1F90260FFC3FC7FCEB03F090C7FCA25D157EA215FEA25DA200
1C495A127F48495A14074A5A485C023FC8FC00F8137E387C01F8381FFFE0000390C9FC2A
407BAB2D>I<14FE137FA3EB01FC13001301A25CA3495AA4495AA4495AA4495AA2157F91
3883FFC090393F0F81F091381E00F802387F4A137CEB7EE0D97FC0137EA25C49C7FCA25B
4914FE00015D5BA2150100035D5BA2150300075D5B15075E120F49130F5E1778001F021F
1370491480A2033F13F0003FED00E090C7FC1601033E13C0481503007E1680EE0700ED1E
0F00FEEC1F1E48EC0FF80038EC03E02D467AC432>I<143C147E14FE1301A3EB00FC1470
1400AE137C48B4FC3803C780380703C0000F13E0120E121C13071238A21278EA700F14C0
131F00F0138012E0EA003F1400A25B137EA213FE5B12015BA212035B141E0007131C13E0
A2000F133CEBC038A21478EB807014F014E0EB81C0EA0783EBC7803803FE00EA00F81743
78C11E>I<14FE137FA3EB01FC13001301A25CA3495AA4495AA4495AA4495AA2167E4BB4
FC903A3F000783C0ED0E07ED3C1F1570017EEB603F15E0EC01C0DA03801380903AFC0700
0E00020E90C7FC5C5C00015B495AEBF9C0EBFB8048B4C9FCA214F0EBF3FC3807F07F9038
E01FC06E7E1407000F80EBC003A2160F121F0180140EA2161E003F151C010013E0A25E5A
007E1578167002015B00FE14F1489038007F800038021FC7FC2A467AC42D>107
D<EB03F8EA01FFA3380007F013031307A214E0A3130F14C0A3EB1F80A4EB3F00A35BA213
7EA313FE5BA3485AA312035BA31207A25BA3485AA4485AA3123F90C7FCA3EB01C0EA7F03
007E1380A2130700FE130012FCA25B130EEA7C1E131CEA3C3CEA3E786C5AEA07C0154678
C419>I<D801F0D90FE0EB07F0D803FCD97FF8EB3FFC28071E01F03EEBF81F3E0E1F03C0
1F01E00F80271E0F8700D983807F001C018E90390F870007003C019C148E003801B802DC
8002F814FC26781FF05C0070495CA24A5C00F0494948130FD8E03F6091C75B1200043F14
1F4960017E92C7FCA24C143F01FE95C7FC49147E6104FE147E1201494A14FE610301EE07
8000034B010114004917F8A2030302035B0007F0F00E495C1A1E0307EDE01C000F4B153C
49183862060113F0001F020FEDF1E0494A903800FF800007C7D80380023EC7FC492D78AB
50>I<D801F0EB0FE0D803FCEB7FF83A071E01F03E3A0E0F03C01F001ED987001380001C
018E130F003C139C003801B814C014F838781FF000705BA25C00F049131FD8E03F158091
C7FC1200163F491500137EA25E01FE147E5B16FE5E12014913015E170F00030203130E49
14F0A20307131E0007EDE01C5B173CEEC038000F167849157017E0ED03C1001FEDE3C049
903801FF000007C8127C302D78AB37>I<EC0FE0EC7FFC903801F83E903907E00F809039
0F8007C0EB1F00017EEB03E04914F0A248481301484814F81207485AA2485AA2485A1503
127F90C7FCA215074815F05AA2150F16E05AED1FC0A21680153F16005D157E5D007C495A
007E495A003E5C4A5A6CEB1F80260F803EC7FC3807C0FC3801FFF038003F80252D75AB32
>I<D903E0137E903A07F801FF80903A0E3C0783E0903A1C1E0F01F0903A3C1F1C00F801
385B017849137C01705BA24A48137E01E05BA292C7FC1201EBC07EA2C7FC17FE14FE5CA2
0101140117FC5CA2010314034A14F8A3EE07F0495AEE0FE0A217C0010FEC1F80163F1700
6E137E011F5C4B5A9138B803F090393F9C07E091389E0F80DA07FEC7FCEC01F849C9FC13
7EA45BA4485AA31203A21207B512F0A25C2F3F7FAB32>I<91381F800C91387FE01C9039
01F0703C903907C0387890390F801CF890381F001D013E130F017E14F05B48481307A248
4814E012075B000F140F16C0485AA2003F141F491480A3007F143F90C71300A35D00FE14
7EA315FE5DA2007E1301A24A5A1407003E130FA26C495A143B380F80F33807C3E73901FF
87E038007E071300140F5DA3141F5DA3143F92C7FCA25CA25C017F13FEA25D263F76AB2D
>I<D801F0EB3F803A03FC01FFF03A071E03C0F83A0E0F0F007C001E90389E01FC001C13
9CECB803003813F0A2D91FE013F80078EC00E00070491300A200F05BEAE03F91C8FC1200
A25B137EA313FE5BA312015BA312035BA312075BA3120F5BA3121F5B0007C9FC262D78AB
29>I<EC0FE0EC7FF8903801F01E903803C00F90390780078090380F0003011E14C01507
49131FA2017CEB3F801378137CED0E0092C7FC137E137F14F014FF6D13C06D13F06D7F6D
7F1300EC0FFE14011400157F81120E003F141E487EA2153E48C7123CA200FC5C12705D00
78495A6C495A6CEB0F80260F803EC7FC3803FFF838007FC0222D7AAB28>I<1470EB01F8
A313035CA313075CA3130F5CA3131F5CA2007FB512E0B6FC15C0D8003FC7FCA25B137EA3
13FE5BA312015BA312035BA312075BA3120F5BA2EC0780001F140013805C140E003F131E
EB001C143C14385C6C13F0495A6C485AEB8780D807FEC7FCEA01F81B3F78BD20>I<137C
48B414072603C780EB1F80380703C0000F7F000E153F001C1600130712385E0078157EEA
700F5C011F14FE00F0495B12E0EA003FEC00015E5B137E150301FE5C5BA2150700015D5B
A2030F13380003EDC078491570A3031F13F0EE80E0153F00011581037F13C06DEBEF8300
000101148090397C03C787903A3E0F07C70090391FFE01FE903903F000782D2D78AB34>
I<017C143848B414FC3A03C78001FE380703C0000F13E0120E001C14000107147E123816
3E1278D8700F141E5C131F00F049131C12E0EA003F91C7123C16385B137E167801FE1470
5BA216F0000115E05B150116C0A24848EB0380A2ED0700A2150E12015D6D5B000014786D
5B90387C01E090383F0780D90FFFC7FCEB03F8272D78AB2D>I<017CEE038048B4020EEB
0FC02603C780013FEB1FE0380703C0000E7F5E001C037E130F01071607123804FE130300
785DEA700F4A1501011F130100F001804914C012E0EA003FDA000314034C14805B137E03
07140701FE4A14005BA2030F5C00014B130E5BA260A24848495A60A2601201033F5C7F4B
6C485A000002F713036D9039E7E0078090267E01C349C7FC903A1F0781F81E903A0FFF00
7FF8D901FCEB0FE03B2D78AB41>I<02F8133FD907FEEBFFE0903A0F0F83C0F0903A1C07
C780F890393803CF03017013EE01E0EBFC07120101C013F8000316F00180EC01C000074A
C7FC13001407485C120EC7FC140F5DA3141F5DA3143F92C8FCA34AEB03C01780147EA202
FEEB0700121E003F5D267F81FC130E6E5BD8FF83143CD903BE5B26FE079E5B3A7C0F1F01
E03A3C1E0F83C0271FF803FFC7FC3907E000FC2D2D7CAB2D>I<137C48B414072603C780
EB1F80380703C0000F7F000E153F001C1600130712385E0078157EEA700F5C131F00F049
5B12E0EA003F91C7FC4B5A5B137E150301FE5C5BA2150700015D5BA2150F00035D5BA215
1F5EA2153F12014BC7FC6D5B00005BEB7C0390383E0F7EEB1FFEEB03F090C712FE5DA214
015D121F397F8003F0A24A5A4848485A5D48131F00F049C8FC0070137E007813F8383801
F0381E07C06CB4C9FCEA01FC294078AB2F>I<027C130749B4130F49EB800E010F141E49
EBC03CEDE03890393F03F07890397C00FDF00178EB3FE00170EB03C001F0148049130790
C7EA0F00151E5D5D5D4A5A4A5A4A5A4AC7FC141E5C5C5C495A495A495A49C8FC011E14F0
4914E05B491301485A4848EB03C0D807B0130701FEEB0F80390FCF801F3A1F07E07F0039
3E03FFFED83C015B486C5B00705C00F0EB7FC048011FC7FC282D7BAB28>I
E /Fq 41 123 df<EEFFFC031FEBFF804AB612E0020781021F9038C00FF8913A7FFE0003
FCDAFFF0EB00FE4949EB03FF4901805B4990C7487F49485CA2495A4D7F013F6F5B5CA371
90C7FC715AEF01F894C9FCA90403B512C0BAFCA526003FFCC7120783B3B3A6003FB5D8FC
03B612C0A542547DD34B>12 D<B712F0AB240B7F9F2D>45 D<EA07F0487E487E487E487E
B51280A76C13006C5A6C5A6C5A6C5A1111769025>I<157815FC14031407141F14FF130F
0007B5FCB6FCA2147F13F0EAF800C7FCB3B3B3A6007FB712FEA52F4E76CD43>49
D<EC3FFE0103B512E0010F14FC013F14FF90B712C048D9C07F7F2703FE000F13F8D807F8
01037FD80FE06D7F48486D7F48488001F01680486C6E13C07F486C6E13E07FA27013F0A5
6C5AA26C5AEA0FF0EA03C0C914E05EA218C05E1880A24C13005F4C5A4B5B5F4B5B5F4B5B
4B90C7FC4B5A5E4B5AED7FE04B5A4A5B4A48C8FC4A5A5D4A48EB01F04A5AEC3F804AC7FC
02FEEC03E0495A495A495A495AD91F80140749C8FC013E150F017FB7FC90B812C05A5A5A
5A5A5A5AB9FC1880A4344E79CD43>I<91380FFFC091B512FC0107ECFF80011F15E09026
3FF8077F9026FF800113FC4848C76C7ED803F86E7E491680D807FC8048B416C080486D15
E0A4805CA36C17C06C5B6C90C75AD801FC1680C9FC4C13005FA24C5A4B5B4B5B4B13C04B
5BDBFFFEC7FC91B512F816E016FCEEFF80DA000713E0030113F89238007FFE707E701380
7013C018E07013F0A218F8A27013FCA218FEA2EA03E0EA0FF8487E487E487EB57EA318FC
A25E18F891C7FC6C17F0495C6C4816E001F04A13C06C484A1380D80FF84A13006CB44A5A
6CD9F0075BC690B612F06D5D011F1580010302FCC7FCD9001F1380374F7ACD43>I<177C
17FEA2160116031607160FA2161F163F167FA216FF5D5DA25D5DED1FBFED3F3F153E157C
15FCEC01F815F0EC03E01407EC0FC01580EC1F005C147E147C5C1301495A495A5C495A13
1F49C7FC133E5B13FC485A5B485A1207485A485A90C8FC123E127E5ABA12C0A5C96C48C7
FCAF020FB712C0A53A4F7CCE43>I<BA12C019FEF1FFC01AF01AFCD8000701F0C7000313
FFDE007F7F737F070F7F737F878587858785A287A84F5BA263616361634F5B4F5B077F90
C7FC4E485A060713F892B812E097C8FC861AF003F0C7000313FE9539003FFF80070F13E0
737F07017F87737F747E1C807413C0A27413E0A31CF0A386A362A31CE0A2621CC0A25013
8097B5FC1C004F5B19074F5B073F13F04EB55ABC128098C7FC1AF81AC007F8C8FC54527C
D160>66 D<932601FFFCEC01C0047FD9FFC013030307B600F81307033F03FE131F92B8EA
803F0203DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848
C9FC4901F8824949824949824949824949824990CA7E494883A2484983485B1B7F485B48
1A3FA24849181FA3485B1B0FA25AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA21B
0F6C6D1980A26C1A1F6C7F1C006C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C5A
6D6D4C5A6D01FC4C5A6D6DEE7F806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF80203
903AFFE001FFF0020091B612C0033F93C8FC030715FCDB007F14E0040101FCC9FC525479
D261>I<BA7E19FCF1FF801AF01AFCD8000701F0C7000F13FF060014C0071F7F070713F8
07017F737F747E747F747F86747F747F8886888688A2757EA31D8087A21DC0A51DE0A387
A963A31DC0A51D80A2631D00A3515AA2646264505B6264505B505B5090C7FCF2FFFE4F5B
07075B071F5B96B512C0060F91C8FCBB5A1AF01AC007FCC9FC19805B527CD167>I<B812
C0A5D8000701F8C7FCB3B3B3B2B812C0A52A527CD132>73 D<B812F8A5D8000701F8CAFC
B3B3A91A7CA41AFC1AF8A51901A31903A219071AF0190FA2191F193F197F19FF18036018
3F4DB5FCBB12E0A546527CD151>76 D<B600FC073FB512FE6F61A26F96B6FCA2D80007F5
C00070EF01EFA202EF6DEF03CFA202E76DEF078FA202E36DEF0F0FA202E16D171EA302E0
6D173CA26F6C1778A26F6C17F0A26F6DED01E0A26F6DED03C0A36F6DED0780A26F6DED0F
00A26F6D151EA26F6D5DA3706C5DA2706C5DA2706D495AA2706D495AA2706D495AA3706D
49C7FCA2706D131EA2706D5BA2716C5BA3716C5BA271EB81E0A271EBC3C0A271EBE780A2
7101FFC8FCA3715BA2715BA2725AA2725AA2D93FFC6F5AB74DB712FEA2725AA2725A7752
7CD180>I<93380FFFC00303B6FC031F15E092B712FC0203D9FC0013FF020F01C0010F13
C0023F90C7000313F0DA7FFC02007F494848ED7FFE4901E0ED1FFF49496F7F49496F7F49
90C96C7F49854948707F4948707FA24849717E48864A83481B804A83481BC0A2481BE04A
83A2481BF0A348497113F8A5B51AFCAF6C1BF86E5FA46C1BF0A26E5F6C1BE0A36C6D4D13
C0A26C6D4D1380A26C1B006C6D4D5A6E5E6C626D6C4C5B6D6D4B5B6D6D4B5B6D6D4B5B6D
6D4B5B6D6D4B90C7FC6D6D4B5A6D01FF02035B023F01E0011F13F0020F01FC90B512C002
0390B7C8FC020016FC031F15E0030392C9FCDB001F13E0565479D265>79
D<B912F0F0FF8019F819FF1AC0D8000701F0C714F0060F7F060113FE727F737F737F8573
7F87A2737FA387A863A2616363A24F5B4F5B4F90C8FC4F5A06035B060F13F095B512C092
B8C9FC19F819E019F89226F0000313FE9439007FFF80727F727F727F727F727F8684A286
84A787A71D1C75133EA38575137E73157C7513FC731401B86C6D9038F803F807039038FE
07F07390B512E0736C14C0080F1400CEEA7FFC5F537CD164>82 D<91260FFF80130791B5
00F85B010702FF5B011FEDC03F49EDF07F9026FFFC006D5A4801E0EB0FFD4801800101B5
FC4848C87E48488149150F001F824981123F4981007F82A28412FF84A27FA26D82A27F7F
6D93C7FC14C06C13F014FF15F86CECFF8016FC6CEDFFC017F06C16FC6C16FF6C17C06C83
6C836D826D82010F821303010082021F16801400030F15C0ED007F040714E01600173F05
0F13F08383A200788200F882A3187FA27EA219E07EA26CEFFFC0A27F6D4B13806D17006D
5D01FC4B5A01FF4B5A02C04A5A02F8EC7FF0903B1FFFC003FFE0486C90B65AD8FC0393C7
FC48C66C14FC48010F14F048D9007F90C8FC3C5479D24B>I<003FBC1280A59126C0003F
9038C0007F49C71607D87FF8060113C001E08449197F49193F90C8171FA2007E1A0FA300
7C1A07A500FC1BE0481A03A6C994C7FCB3B3AC91B912F0A553517BD05E>I<001FBA12C0
1AE0A40380C714C002F8C75A02C0178091C8481400495D495F494B5B495D495F48484B5B
5F495F94B55A5E90C85D4C91C7FC5E60003E4B5B5E604C5B5EC95C93B55A5D604B91C8FC
5D5F4B5B5D5F4B5B5D5F92B55A5C5F4A91C9FC5C5E4A5B5C4CEC03E04A5B5C5E91B55A5B
4C14074991C8FC4918C05D495B5B4B150F495B5B4B151F90B55A48183F5D4891C9127F48
18FF4A5D48495D485F4A5D4849033F1380484CB5FC4A143FBBFCA47E435279D152>90
D<EC7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F0486C6D7F6EEB3FFC
48826E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020FB6FC91B7FC0107
1487013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A5BA2485AA45EA2
6D5C007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C9026F81FC014F0
6C90B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641>97
D<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE0001FFD97FFC
491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F1300705A4892C8FC5B
A312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C6DEC3F006C6D
147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49C7FC020113E0
33387CB63C>99 D<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13FC91B6FC01
0315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F484980485B83
485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D5C6C6D49B5
FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE0FD9003F13
F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49B6FC010715C04901817F90
3A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C0488191C7FC48
17E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06CEE01F06E14
037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB03FE903A0F
FFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>I<ED3FFC0203B5FC
020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49903800FFFC495A495AA249
5AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8C8FCB3B3A7007FB512FEA5
2E547CD329>I<DA3FFF14FF0103B5D8F00713C0010FDAFC1F13E0013FECFF7F90267FFC
0F9038FF9FF09026FFE001EBF83F48496C13E0484990387FF01F4890C7D83FF813E04893
38FC0FC0F0078048486E6CC7FCA2003F82A9001F5EA26C6C4A5AA26C5E6C6D495A6C6D49
5A6C6D485BDAFC0F5B4890B6C8FCD803EF14FC01C314F02607C03F90C9FC91CBFCA2120F
A37FA213F813FE90B7FC6C16F817FF18C06C836C836C836D828448B9FC12074848C70003
1480D81FF8EC003F4848150748486F13C083485A83A56D5D007F18806D5D003F18006C6C
4B5AD80FFEED1FFC6C6C6CEC7FF86C01E049485A6C01FE011F5B6C6CB71280010F03FCC7
FC010115E0D9000F01FCC8FC3C4F7CB543>I<EB3FF0B5FCA51203C6FCB3A4EE1FFC93B5
12C0030314F0030F8092391FE07FFC92393F001FFE037C8003F07FDAF1E081ECF3C0DAF7
807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542537BD24B>I<137F497E000313
E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017EB3B3A6B612
E0A51B547BD325>I<EB3FF0B5FCA51203C6FCB3A54CB512F8A59339003FFE00EF1FF0EF
3FC04D5A4DC7FCEE03FEEE07F84C5A4C5AEE7FC04CC8FC4B5A4B5AED0FF8ED1FE04B7E4B
7EECF1FF02F37F02F77F91B6FC83159F030F7F02FE80DAF8077F4A7E6F7F6F7F83707E82
707F84707F707F82707F84707F177F717E4D13C0B6D8F003B6FCA540537CD247>107
D<EB3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225>I<D93FF0D91FFCEDFFE0B591
B500C0010713FE030302F0011F6D7E030F6E017F8092271FE07FFCD9FF037F922A3F001F
FE01F8007F0003027C9126FF03E080C602F06DD90780137FDAF1E0038FC77FDAF3C0159E
DAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6D8C03FB512FE
A567367BB570>I<D93FF0EB1FFCB591B512C0030314F0030F8092391FE07FFC92393F00
1FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8
F807B612C0A542367BB54B>I<913801FFE0021F13FE91B612C0010315F0010F9038807F
FC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F48496D7F4A147F48834890C86C7E
A24883A248486F7EA3007F1880A400FF18C0AC007F1880A3003F18006D5DA26C5FA26C5F
6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF807FFC
6D90B55A010015C0023F91C8FC020113E03A387CB643>I<903A3FF001FFE0B5010F13FE
033FEBFFC092B612F002F301017F913AF7F8007FFE0003D9FFE0EB1FFFC602806D7F92C7
6C7F4A824A6E7F4A6E7FA2717FA285187F85A4721380AC1A0060A36118FFA2615F616E4A
5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B612E06F148003
1F01FCC8FC030313C092CBFCB1B612F8A5414D7BB54B>I<90397FE003FEB590380FFF80
033F13E04B13F09238FE1FF89139E1F83FFC0003D9E3E013FEC6ECC07FECE78014EF1500
14EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA55CB3AAB612FCA52F367CB537>114
D<903903FFF00F013FEBFE1F90B7FC120348EB003FD80FF81307D81FE0130148487F4980
127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C13FF15F86C14FF16C06C15F06C
816C816C81C681013F1580010F15C01300020714E0EC003F030713F015010078EC007F00
F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F8001F8EC7F0001FEEB01FE9039FF
C00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C387CB635>I<143EA6147EA414
FEA21301A313031307A2130F131F133F13FF5A000F90B6FCB8FCA426003FFEC8FCB3A9EE
07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0FC6DEBFFF86D6C5B021F5B0203
13802A4D7ECB34>I<D93FF8913801FFC0B50207B5FCA50003ED001FC61607B3AE5FA35F
A2017F5D173B177B6D6C14F3DC01E313F06D6CD907C3EBFFC0903A0FFFC03F836D90B512
03010114FE6D6C13F8020701E091C7FC42377BB54B>I<B600F00107B5FCA5000101F8C8
EA7FE06C6DED3F00A2017F163E6E157E013F167C6E15FC6D5E6F13016D5E8117036D5E6F
13076D5E6F130F6D5E6F131F6D93C7FC815F6E6C133E177E023F147C6F13FC6E5C16816E
5C16C3A26EEBE3E016E76E5C16FF6E5CA26E91C8FCA26F5AA36F5AA26F5AA26F5AA26F5A
6F5A40367DB447>I<B6D8E07FB5D8C003B512C0A5000101F0C701F0C7381FF8006E027F
ED07E06C715DA26E023F150F017F705DA26E181F013F4B6C92C7FC6E606D70143E94B5FC
6F177E6D4A6E137C03C001F315FC6D715B160303E001E114016D020702E05B03F013C06D
71485A160F03F8D9807F13076D05F85B93381F003F03FC160F027F4902FC5BDBFE3E011F
131F023F04FE90C8FC167EDBFF7C010F5B6E01FCECFF3E4C6D137E6E5FA24C7F6E5F4C7F
6E5FA24C7F6E5F4C147FA26E5F93C8123F6F5EA2033E6FC9FC5A367DB461>I<007FB500
F090387FFFFEA5C66C48C7000F90C7FC6D6CEC07F86D6D5C6D6D495A6D4B5A6F495A6D6D
91C8FC6D6D137E6D6D5B91387FFE014C5A6E6C485A6EEB8FE06EEBCFC06EEBFF806E91C9
FCA26E5B6E5B6F7E6F7EA26F7F834B7F4B7F92B5FCDA01FD7F03F87F4A486C7E4A486C7E
020F7FDA1FC0804A486C7F4A486C7F02FE6D7F4A6D7F495A49486D7F01076F7E49486E7E
49486E7FEBFFF0B500FE49B612C0A542357EB447>I<B600F00107B5FCA5C601F8C8EA7F
E06EED3F00A26D6C153E187E013F167C6E15FC6D5E6F13016D5E6F13036D5E8117076D6D
5C170F6D6D5C171F6D93C7FC6F5B027F143E6F137E023F147C6F13FCA26E6D5A16816EEB
C1F016C36E5C16E76E5C16FF6E5CA26E91C8FCA36F5AA26F5AA26F5AA26F5AA26F5AA35E
150F5E151F93C9FC5DD81FC0133E486C137E486C137C486C13FC5D14015D14034A5A6C48
485A49485A263FC07FCAFCEB81FE6CB45A6C13F000035BC690CBFC404D7DB447>I<001F
B8FC1880A3912680007F130001FCC7B5FC01F0495B495D49495B495B4B5B48C75C5D4B5B
5F003E4A90C7FC92B5FC4A5B5E4A5B5CC7485B5E4A5B5C4A5B93C8FC91B5FC495B5D4949
EB0F805B495B5D495B49151F4949140092C7FC495A485E485B5C485E485B4A5C48495B48
15074849495A91C712FFB8FCA37E31357CB43C>I E /Fr 89 124
df<BBFCA300010180C700011380D8007FEEFE00B3B3B3A62601FFE0913807FF80B6D8C0
03B6FCA340447CC349>5 D<9239FFC001FC020F9038F80FFF913B3F803E3F03C0913BFC
00077E07E0D903F890390FFC0FF0494890383FF81F4948EB7FF0495A494814E049C7FCF0
0FE04991393FC0038049021F90C7FCAFB912F0A3C648C7D81FC0C7FCB3B2486CEC3FF000
7FD9FC0FB512E0A33C467EC539>11 D<4AB4FC020F13E091387F80F8903901FC001C4948
7FD907E0130F4948137F011FECFF80495A49C7FCA25B49EC7F00163E93C7FCACEE3F80B8
FCA3C648C7FC167F163FB3B0486CEC7FC0007FD9FC1FB5FCA330467EC536>I<913801FF
C0020FEBFB8091387F803F903801FC00494813FFEB07E0EB1FC0A2495A49C7FC167F4914
3F5BAFB8FCA3C648C7123FB3B2486CEC7FC0007FD9FC1FB5FCA330467EC536>I<DBFF80
EB3FE0020F9039F001FFFC913B3F807C0FF01F913CFC000E3F800380D903F86D48486C7E
4948D90FFC804948D93FF8130F4948017F4A7E49485C49C75BA25B494B6D5A041F6E5A96
C8FCACF107F0BBFCA3C648C7391FC0001F190F1907B3B0486C4A6C497E007FD9FC0FB500
83B512E0A34B467EC551>I<131F1480133F137FA2EBFF00485A485A5B485A485A138048
C7FC123E123C5A12E0124011126CC431>19 D<6C130100E013076C130F007C133E001F13
F8380F81F03807E7E03803FFC06C138038007E00133C1318180C74BF31>I<EA03F0EA0F
FCEA1C0EEA300338600180A238C000C0A538600180A238300300EA1C0EEA0FFCEA03F012
1165C649>23 D<121EEA7F80EAFFC0A9EA7F80ACEA3F00AB121EAC120CA5C7FCAA121EEA
7F80A2EAFFC0A4EA7F80A2EA1E000A4778C61B>33 D<001EEB03C0397F800FF000FF131F
01C013F8A201E013FCA3007F130F391E6003CC0000EB000CA401E0131C491318A3000114
384913300003147090C712604814E0000614C0000E130148EB038048EB070048130E0060
130C1E1D7DC431>I<D91F801618D97FE0163CD9F078167C2603E01C16FC48486C4B5A26
0F800F4B5A6E6C1407271F0003E04A5A6FEC3FC0003ED901BE14FF923ACFC00FCF80007E
D900C1B5001FC7FC9238C03FF0007C92C7123E6F147E00FC0260147C601701604D5A1707
604D5A171F95C8FC173E007C02E0137E4B137C007E5E1601003E01015C4B485A6C13034B
485A6C6C48130F020E5C2607C00C49C9FC2603E01C5B2600F078133ED97FE05BD91F8001
FCEB03F090C848EB0FFC4B48EB1E0F030391387C03804CEBF801922707C001F013C0030F
ED00E04C48481360DB1F0015704D481330033E1638037E010F1418157C4B5C0201171C4B
011F140C4A5A14075D4A5A141F92C7FC143E147E147C5C0101030F141C4A1718494881A2
494802071438010F18304A6E6C137049C81560496F6C13E0013EEF01C049DB00F8138001
FCEE7C034993381E0F0049EE0FFC0160EE03F046517BCA51>37 D<EC03F0EC0FF8EC3E1E
EC7C0E4A7E49487E130302E07F01071301A3EB0FC0A4150393CAFC14E05D1506150E5D15
18010713386E5A156015E0ECF1C0DAFB800107B512C06DB4C7FC5C4A9139007FFC000101
EE1FE019806E6FC7FC0100160E497E495E496C6C1418010E1638496C6C14300118167090
26381FE05C01705E496C6C1301D801C06D5C000301071403D807806D91C8FC000F6D6C5B
001F0101140E003F6E130C90C7EB801C48027F5BEEC0304891383FE070031F5B705AED0F
F9923807FB806D6DB4C812C05E6F7E007F6E6D13016D6E6C14804C6C13036C6C496D1400
001F912603CFF85B6C6C90260F07FC130E6C6C90263E01FE133C3D03FE01F800FF80F8C6
B54890383FFFF0013F0180010713C0D907FCC890C7FC42497CC64C>I<121EEA7F8012FF
13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A1206120E5A5A5A12
600B1D78C41B>I<140C141C1438147014E0EB01C01303EB0780EB0F00A2131E5BA25B13
F85B12015B1203A2485AA3485AA348C7FCA35AA2123EA2127EA4127CA312FCB3A2127CA3
127EA4123EA2123FA27EA36C7EA36C7EA36C7EA212017F12007F13787FA27F7FA2EB0780
EB03C01301EB00E014701438141C140C166476CA26>I<12C07E12707E7E7E120F6C7E6C
7EA26C7E6C7EA21378137C133C133E131E131FA2EB0F80A3EB07C0A3EB03E0A314F0A213
01A214F8A41300A314FCB3A214F8A31301A414F0A21303A214E0A3EB07C0A3EB0F80A3EB
1F00A2131E133E133C137C13785BA2485A485AA2485A48C7FC120E5A5A5A5A5A16647BCA
26>I<16C04B7EB3AB007FBAFCBB1280A26C1900C8D801E0C9FCB3AB6F5A41407BB84C>
43 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313
005A1206120E5A5A5A12600B1D78891B>I<B612C0A61A067F9721>I<121EEA7F80A2EAFF
C0A4EA7F80A2EA1E000A0A78891B>I<1618163C167CA2167816F8A216F01501A216E015
03A216C01507A21680150FA2ED1F00A2151E153EA2153C157CA2157815F8A25D1401A24A
5AA25D1407A25D140FA292C7FC5CA2141E143EA2143C147CA25CA25C1301A25C1303A25C
1307A25C130FA291C8FC5BA2133EA2133C137CA2137813F8A25B1201A25B1203A2485AA2
5B120FA290C9FC5AA2121E123EA2123C127CA2127812F8A25A126026647BCA31>I<14FF
010713E090381F81F890383E007C01FC133F4848EB1F8049130F4848EB07C04848EB03E0
A2000F15F0491301001F15F8A2003F15FCA390C8FC4815FEA54815FFB3A46C15FEA56D13
01003F15FCA3001F15F8A26C6CEB03F0A36C6CEB07E0000315C06D130F6C6CEB1F806C6C
EB3F00013E137C90381F81F8903807FFE0010090C7FC28447CC131>I<143014F0130113
03131F13FFB5FC13E713071200B3B3B0497E497E007FB6FCA3204278C131>I<EB03FE90
381FFFC0017F13F03901F80FFC3903C001FE48486C7E000EC7EA7F8048EC3FC0ED1FE048
15F00030140F007015F800601407126CB415FC7F7F1503A46C4813076CC7FCC8FC16F8A2
150F16F0151F16E0A2ED3FC0ED7F8016005D5D4A5A4A5A4A5A5D4A5A4A5A4AC7FC147C5C
5C495A495A495A49C7120C131E5B013814185B5B485A4848143848C81230000E1570001F
B612F0A25A5AB712E0A326427BC131>I<49B4FC010F13E0013F13FC9038FE01FE3A01F0
007F80D803C0EB3FC048C7EA1FE0120EED0FF0EA0FE0486C14F8A215077F5BA26C48130F
EA03C0C813F0A3ED1FE0A2ED3FC01680ED7F0015FE4A5AEC03F0EC1FC0D90FFFC7FC15F0
90380001FCEC007FED3F80ED1FC0ED0FE016F0ED07F816FC150316FEA2150116FFA3121E
EA7F80487EA416FE491303A2007EC713FC00701407003015F80038140F6C15F06CEC1FE0
6C6CEB3FC0D803E0EB7F803A01FE01FE0039007FFFF8010F13E0010190C7FC28447CC131
>I<ED0380A21507150FA2151F153FA2157F15FFA25CEC03BF153F14071406140C141C14
1814301470146014C013011480EB03005B13065B131C13185B1370136013E0485A5B1203
90C7FC1206120E120C5A123812305A12E0B812C0A3C8383F8000ADEDFFE0027FEBFFC0A3
2A437DC231>I<000615C0D807C0130701FCEB7F8090B612005D5D5D15E0158026063FFC
C7FC90C9FCAE14FF010713C090381F01F090383800FC01F0137ED807C07F49EB1F8016C0
90C7120F000615E0C8EA07F0A316F81503A216FCA5123E127F487EA416F890C712075A00
6015F0A20070140F003015E00038EC1FC07E001EEC3F806CEC7F006C6C13FE6C6C485A39
01F807F039007FFFE0011F90C7FCEB07F826447BC131>I<EC07FCEC3FFF91B512C09039
03FC03E0903907E000F0D91FC0133849C71258017EEB01FC01FE1303491307485A485AA2
4848EB03F8000FEC01F092C7FC485AA3485AA3127FA29038007F80903801FFF090380780
FC39FF0E003E49EB1F8049EB0FC049EB07E0136001E0EB03F04914F8150116FC5BED00FE
A390C812FFA47EA57F123FA216FE121F15016D14FC120FED03F86C7EED07F06C6C14E06C
6CEB0FC06C6CEB1F80017EEB3F0090383F80FE90380FFFF8010313E00100138028447CC1
31>I<121CA2EA1F8090B712C0A3481680A217005E0038C8120C0030151C00705D006015
3016705E5E4814014B5A4BC7FCC81206150E5D151815385D156015E04A5AA24A5A140792
C8FC5CA25C141E143EA2147E147CA214FCA21301A3495AA41307A6130FAA6D5AEB01C02A
457BC231>I<14FF010713E0011F13F890387F00FE01FC133FD801F0EB1F804848EB0FC0
49EB07E00007EC03F048481301A290C713F8481400A47FA26D130116F07F6C6CEB03E013
FC6C6CEB07C09039FF800F806C9038C01F006CEBF03EECF87839007FFEF090383FFFC07F
01077F6D13F8497F90381E7FFFD97C1F1380496C13C02601E00313E048486C13F0000790
38007FF84848EB3FFC48C7120F003EEC07FE150148140016FF167F48153FA2161FA56C15
1E007C153EA2007E153C003E157C6C15F86DEB01F06C6CEB03E06C6CEB07C0D803F8EB1F
80C6B4EBFF0090383FFFFC010F13F00101138028447CC131>I<14FF010713E0011F13F8
90387F80FC9038FC007E48487F4848EB1F804848EB0FC0000FEC07E0485AED03F0485A16
F8007F140190C713FCA25AA216FE1500A516FFA46C5CA36C7E5D121F7F000F5C6C6C1306
150E6C6C5B6C6C5BD8007C5B90383F01E090390FFF80FE903801FE0090C8FC150116FCA4
ED03F8A216F0D80F801307486C14E0486C130F16C0ED1F80A249EB3F0049137E001EC75A
001C495A000F495A3907E01FE06CB51280C649C7FCEB1FF028447CC131>I<121EEA7F80
A2EAFFC0A4EA7F80A2EA1E00C7FCB3A5121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2B78
AA1B>I<007FBAFCBB1280A3CEFCB0BB1280A36C190041187BA44C>61
D<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA3ED30FFA203707FED607FA203E07FEDC03F
A2020180ED801FA2DA03007F160FA20206801607A24A6D7EA34A6D7EA34A6D7EA2027081
0260147FA202E08191B7FCA249820280C7121FA249C87F170FA20106821707A2496F7EA3
496F7EA3496F7EA201788313F8486C83D80FFF03037FB500E0027FEBFFC0A342477DC649
>65 D<B8FC17E017FC00019039C00003FF6C6C4801007FEF3FC0717E717E717E84170384
170184A760A21703601707604D5A4D5AEF7FC04DC7FCEE03FEEE3FF091B65A17FC0280C7
B47EEF1FC0EF0FF0717E717E717E717E1980187F19C0A2183F19E0A8F07FC0A2198018FF
4D1300A24D5AEF0FFC4D5AEF7FE048486C903803FFC0B9C7FC17FC17C03B447CC345>I<
DB0FFE146092B500C013E0020314F0913A0FFC01FC0191393FC0003E02FFC7EA0F83D903
FCEC03C74948EC01E74948EC00FF4948157F4948153F4948151F49C9120F485A49160712
0348481603A248481601A248481600A2123FA2491760127FA31900485AAE6C7EA21960A2
123F7FA2001F18E07F000F18C0A26C6C160119806C6C160312016DEE07006C6C16066D6C
150E6D6C5D6D6C5D6D6C15786D6C5D6D6C4A5AD900FFEC0780DA3FC0011FC7FCDA0FFC13
FC0203B512F0020014C0DB0FFEC8FC3B487BC546>I<B8FC17F017FC00019039C00007FF
6C499038007FC0017FED1FE0EF07F0EF03FC717E717E84727E727E727EA2727E85180385
A2180185A38584A31A80AD1A00A36061A361180361180761180F614E5A183F614EC7FC18
FEEF03FC4D5AEF1FE001FFED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B>I<
B912F8A3000101C0C7127F6C6C48EC07FC17011700187C183C181CA284A31806A4180704
067FA395C7FCA4160EA2161E163E16FE91B5FCA3EC8000163E161E160EA21606A319C0A3
F0018093C7FCA41803A21900A260A260A2181EA2183E187EEF01FE170748486C147FB95A
A33A447CC342>I<B912F0A3000101C0C7127F6C6C48EC0FF817031701170018781838A2
181CA3180CA4180E1806160CA21800A5161CA2163C167CED01FC91B5FCA3EC8001ED007C
163C161CA2160CA793C8FCB08048487EB612F8A337447CC340>I<DB0FFE146092B500C0
13E0020314F0913A0FFC01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E7
4948EC00FF4948157F4948153F4948151F49C9120F485A491607120348481603A2484816
01A248481600A2123FA2491760127FA396C7FC485AAD4CB612C06C7EA293C7387FF00072
5A003F171F7FA2121F7F120FA26C7EA26C7E6C7EA26C7E6D7E6D6C153F6D7E6D6C157F6D
6C15E7D903FEEC01C7D900FFEC0383DA3FE0EB0F01DA0FFCEBFE000203B500F813600200
02E090C7FCDB0FFEC9FC42487BC54D>I<B6D8C003B6FCA3000101E0C70007138026007F
80913801FE00B3A991B7FCA30280C71201B3AC2601FFE0913807FF80B6D8C003B6FCA340
447CC349>I<B612F0A3C6EBF0006D5A6D5AB3B3B3A4497E497EB612F0A31C447DC323>I<
010FB512FEA3D9000313806E130080B3B3AB123F487E487EA44A5A13801300006C495A00
705C6C13076C5C6C495A6CEB1F802603E07FC7FC3800FFFCEB1FE027467BC332>I<B600
C049B512C0A3000101E0C8387FFC006C49ED3FE06D481680063EC7FC183C183860604D5A
4D5A4DC8FC171E17385F5F4C5A4C5A4CC9FC160E5E5E5E5E4B5A4B7E4B7E150F4B7E4B7E
1577EDE3FE913881C1FFEC8381DA87007F028E6D7E149C02B86D7E02F06D7E14C04A6D7E
707EA2707E707EA2707F717EA2717E717EA2717E717EA2717E717EA2717F8585496C8248
6D4A13FCB600C0011FEBFFE0A343447CC34C>I<B612F8A3000101E0C9FC6C6C5A5CB3B3
1830A418701860A518E0A3EF01C0A217031707A2170F173F177FEE01FF48486C011F1380
B9FCA334447CC33D>I<B56C933807FFFC6E5EA20001F1FE0026006FE0EE1BF8A3D967F0
1633A2D963F81663A3D961FC16C3A3D960FEED0183A2027FED0303A36E6C1406A36E6C14
0CA26E6C1418A36E6C1430A36E6C1460A26E6C14C0A36E6CEB0180A3037FEB0300A29238
3F8006A36F6C5AA36F6C5AA26F6C5AA36F6C5AA36F6C5AA26FB45AA370C7FC13F0A2486C
143ED80FFFEF0FFEB500F0011C0107B512FCA34E447BC359>I<B56C020FB5FC8080C604
0013F06D6CED1F80D96FF8ED0F00A2D967FC1506EB63FEA2EB61FF01607FA26E7E6E7EA2
6E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F1380A2
EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF701386A2EF7FC6EF3FE6A2EF
1FF6EF0FFEA217071703A217011700A201F0167E183E487ED80FFF161EB500F0150EA218
0640447CC349>I<ED1FFC4AB512C0913907F007F091391F8000FC027EC7123FD901F8EC
0FC049486E7E49486E7E49486E7E49486E7E49C9127E017E8201FE834848707E4848707E
A24848707EA2000F84491603001F84A24848707EA3007F84A24982A300FF1980AD6C6C4C
1300A4003F606D1603A2001F60A26C6C4C5AA26C6C4C5AA20003606D161F6C6C4C5A0000
60017F4CC7FC6E5D013F5E6D6C4A5AD907E0EC03F06D6C4A5AD901FCEC1FC0D9007E4AC8
FCDA1F8013FC913907F007F00201B512C09126001FFCC9FC41487BC54C>I<B712FCEEFF
C017F800019039C0000FFC6C6C48EB01FF9338007F80EF1FE0170FEF07F018F8EF03FCA2
18FE1701A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE
0FFC91B612F017800280C9FCB3AA3801FFE0B612C0A338447CC342>I<ED1FFC4AB512C0
913907F007F091391F8000FC027EC7123F4948EC1FC0D903F0EC07E049486E7E49486E7E
49486E7E49C9127E49167F01FE707E4848707E00038449160F000784491607000F84A248
48707EA2003F84491601A2007F84A34982A200FF1980AD007F19006D5EA3003F60A26D16
03001F60A2000F606D16070007606DD903F0130F0003DA0FFC5C6DD91C0E131F00014A6C
5C6C6C903A3003803F80017FD9700149C7FC92386000C0D93F80ECE0FED91FC0ECE1FCD9
07E0EC63F0D903F0EC77E0902601FC70EB7FC09026007E3091C8FCDA1FB813FC912707FC
07F814C00201B57E9139001FFC3C92C7FC053E1301171E051F13031A80F08007F0C00F94
380FF03F95B51200A28361715BA2715B9438007FE0F01F8042597BC54C>I<B712E016FF
17C000019039C0003FF86C6C48EB03FCEE00FF717E717E717E717E717EA284170384A760
A21707604D5AA24D5A4D5A4DC8FCEE01FEEE07F8EE3FE091B6C9FC16FC913980007F80EE
0FE0707EEE03FC707E160083717EA2717EA784A71A6084171FA21AE0716C13C02601FFE0
02071301B600C01680943801FC03943900FE0700CBEA3FFEF007F843467CC348>I<49B4
1303010FEBE007013F13F89039FE00FE0FD801F8131FD807E0EB079F49EB03DF48486DB4
FC48C8FC4881003E81127E82127C00FC81A282A37E82A27EA26C6C91C7FC7F7FEA3FF813
FE381FFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F14F0010F80010180D9001F7F14
019138001FFF03031380816F13C0167F163F161F17E000C0150FA31607A37EA36C16C016
0F7E17806C151F6C16006C5D6D147ED8FBC05CD8F9F0495AD8F07C495A90393FC00FE0D8
E00FB51280010149C7FC39C0003FF02B487BC536>I<003FB912F8A3903BF0001FF8001F
01806D481303003EC7150048187C0078183CA20070181CA30060180CA5481806A5C81600
B3B3A54B7EED7FFE49B77EA33F447DC346>I<B600C0010FB5FCA3000101E0C813F02600
7F80ED1F80F00F00A21806B3B3A7180E6D6C150CA2181C131F6E1518010F163818306D6C
1570606D6C14016D6C5D6D6CEC0780027F4AC7FC6E6C131EDA1FE0137C913907FC03F002
01B55A6E6C1380DB07FCC8FC40467CC349>I<B692383FFFF0A3000301E003071300C649
ED01FC4A5E017F705A6E5E133F616E1501011F5FA26D6C4BC7FCA28001071606A26E150E
0103160CA26D6C5DA2806D5EA26F1470027F156081023F5DA281021F4A5AA26F1303020F
92C8FC8102071406A26F130E0203140CA26E6C5BA2816E5CA2EE8070037F1360A26F6C5A
A216E092381FE180A216F3030F90C9FCA2ED07FEA36F5AA36F5AA26F5AA3166044467EC3
49>I<B60107B500F890380FFFFEA3000301E0D9001F90C813F06C0180DA0FFCED3FC091
C86C48ED1F006C871C0E6D6C6E7E1C0CA26D6C6F5DA36EDA06FF1538011F1A30A26E020E
6D1470010FDB0C7F1560A26E021C7F0107DB183F5DA2856D6CDA301F4A5AA36D6C4A6C6C
49C7FCA36D6C4A6C6C1306A392268001806D130E027F0303140CA2DBC00380023FDA0001
5CA203E081021F01066D5CA36E6C486E6C5AA36E6C486E6C5AA36F48EC1FE1020360A2DB
FE7015F302010160020F90C8FCA2DBFFE015FB6E49EC07FEA36F486E5AA36FC86C5AA303
1E6F5AA3151C030C16605F467EC364>I<003FB500E0011FB5FCA3C691C7000713E0D93F
FC020190C7FC6D4815FC010F6F5A6D6C15E0A26D6C4A5A6D6C5D4DC8FC6D6D5B6E6C1306
5F6E6C131C6E6C13185F6E6C13706E6C13605F913803FE01DA01FF5B4CC9FC6E1387ED7F
C616CCED3FFC6F5A5E6F7E6F7EA26F7E82A203067F150E92380C7FC04B6C7E1538923830
1FF04B6C7E15E04B6C7E4A486C7E14034B6C7E02066D7F140E020C6E7E4A6E7E14380230
6E7E4A6E7E14E04A6E7E49486E7E130349C86C7E496F7F5B496C8201FF83000701E00203
13F8B500F8021FEBFFF0A344447EC349>I<B66C91380FFFFCA3000101F8C8000313C026
007FE0923800FE0061013F17F06D6C5E80010F5F6D6C4B5A18036D6C93C7FC6E15066D16
0E6D6D140C181C6E6C14186E6C5C18706E6C146018E06E6C5C6E6C495A17036E6C91C8FC
5F6E6C13066E6D5A171C92387FC0185FED3FE06F6C5A17E06F6C5AEEF980ED07FF6F90C9
FCA26F5AB3A6923807FF800203B6FCA346447FC349>I<001FB81280A391268000011300
01FCC7FC01F04A5A01C04A5A5B90C8485A121E4C5A484B5AA200384B5A4C5AA24B90C7FC
00304A5AA24B5AA24B5AC8485AA24B5A4B5AA24B5A5C93C8FC4A5AA24A5A4A5AA24A5A4A
5AA24A5A14FF5D4990C9FCEF0180495A495AA2495A494814031800495AA2495A495A5F48
90C8FC485A5F485A48485D5F48485D17FE484814034848140F16FFB8FCA331447BC33C>
I<EAFFFCA4EAF000B3B3B3B3B3A2EAFFFCA40E6476CA1B>I<01C0131800011438484813
7048C712E0000EEB01C0000C1480001C13030018140000385B003013060070130E006013
0CA300E0131C481318A400CFEB19E039FFC01FF801E013FCA3007F130FA2003F130701C0
13F8390F0001E01E1D71C431>I<EAFFFCA4EA003CB3B3B3B3B3A2EAFFFCA40E647ECA1B>
I<130C131E133F497EEBF3C03801E1E03803C0F03807807848487E001E7F487F0070EB03
8048EB01C00040EB00801A0E75C331>I<EB07FC90383FFF809038F80FE03903C003F048
C66C7E000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5
FC90380FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D
137F007F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC011300
3A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091
383C07E091387001F89039FDE0007E02807F01FFEC1F8091C713C049EC0FE049140717F0
A2EE03F8A217FCA2160117FEAB17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FB
EC3F80D9F380EB7E00D9E1C05B9039E0F001F89039C03C07E09039801FFF80C7D803FCC7
FC2F467DC436>I<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C0
0003140F4848EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB
7E7FA2123F16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700
013F131E90381FC078903807FFF001001380242E7DAC2B>I<167FED3FFFA315018182B3
EC7F80903803FFF090380FC07C90383F000E017E1307496D5AD803F87F48487F5B000F81
485AA2485AA2127FA290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F6C6C5B00035C6C6C90
38077F806C6C010E13C0013F011C13FE90380FC0F8903803FFE09026007F0013002F467D
C436>I<EB01FE903807FFC090381F03F090387E00FC49137E48487F485A4848EB1F8000
0F15C049130F121F484814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27F
A2123F16306C7E1670000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E
131E90381F80F8903803FFE0010090C7FC242E7DAC2B>I<EC0FE0EC7FF8903801F81E90
3803F03F90390FE07F8090381FC0FF5C133F495AA2ED7F0001FE131C92C7FCAFB67EA3C6
48C8FCB3B2486C7E007F13FFA321467EC51E>I<EE0F80D901FCEB7FE0903A0FFF81F0F0
90393F07E3819039FC01FF033A01F800FE014848017E13E00007027FC7FC497F000F8149
131F001F81A9000F5D6D133F000792C7FC6D5B0003147E6C6C5B6D485A3903BF07E09038
0FFF80260701FCC8FC90CAFCA25AA37F6C7E7F90B512F86C14FF16E06C15F86C6C8048B6
7E3A07C0000FFF48481300003FC8EA3F80003E151F48ED0FC0A2481507A56C150F007C16
80007E151F003E16006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFF
FEC7FC010113E02C427DAC31>I<EA01FC12FFA3120712031201B3EC01FE913807FFC091
381E07F091383801F802707FECE000D9FDC07F5C01FF147F91C7FCA25BA35BB3A8486CEC
FF80B5D8F83F13FEA32F457DC436>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA
01FC12FFA3120712031201B3B0487EB512F8A315437DC21C>I<143C14FFA2491380A46D
1300A2143C91C7FCADEC7F80EB3FFFA31300147F143FB3B3AA123E127F39FF807F00A214
7EA25C6C485A383C01F06C485A3807FF80D801FEC7FC195785C21E>I<EA01FC12FFA312
0712031201B3A292381FFFE0A36F1300ED07F816E05E5E030EC7FC5D5D5D5D4A5A4A5A4A
C8FC5CEC3F804A7E14FF9038FDCFE09038FF8FF01407496C7E01FC7F14016E7E81816F7E
82151F6F7E821507826F7E8282486C491380B5D8F81F13F8A32D457DC433>I<EA01FC12
FFA3120712031201B3B3B3A5487EB512F8A315457DC41C>I<D801FC01FFEC1FE000FF01
0701E0EBFFFC913B0F03F801E07F913C3C01FC07803F800007903C7000FE0E001FC00003
49D97E1C130F2601FDC0D97F38804A143001FFDA3FF06D7E91C75BA2495DA3495DB3A848
6C4A6C497EB5D8F81FB50003B512E0A34B2C7DAB52>I<3901FC01FE00FF903807FFC091
381E07F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35B
B3A8486CECFF80B5D8F83F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC9038
3E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C8
7E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D13010007
5D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7D
AC31>I<3901FC03FC00FF90380FFF8091383C07E091387001F83A07FDE000FE00010180
137F01FFEC3F8091C7EA1FC04915E049140F17F0160717F8160317FCA3EE01FEABEE03FC
A3EE07F8A217F0160F6D15E0EE1FC06D143F17806EEB7E00D9FDC05B9039FCF003F89138
3C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512F8A32F3F7DAB36>I<91387F800390
3903FFE00790380FE07890393F801C0F90387E000E496D5AD803F8EB039F0007EC01BF49
14FF48487F121F5B003F81A2485AA348C8FCAB6C7EA3123F7F121F6D5C120F6D5B12076C
6C5B6C6C497E6C6C130E013F131C90380FC0F8903803FFE09038007F0091C7FCAEEEFF80
033F13FEA32F3F7DAB33>I<3903F803F000FFEB1FFCEC3C3EEC707F0007EBE0FF3803F9
C000015B13FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA3202C7DAB26>I<9038
3FE0183901FFFC383907E01F78390F0003F8001E1301481300007C1478127800F81438A2
1518A27EA27E6C6C13006C7E13FC383FFFE06C13FC6C13FF6C14C06C14E0C614F0011F13
F81300EC0FFC140300C0EB01FE1400157E7E153EA27EA36C143C6C147C15786C14F86CEB
01F039F38003E039F1F00F8039E07FFE0038C00FF01F2E7DAC26>I<1306A5130EA4131E
A3133E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4150CAA017E131C017F13
18A26D133890381F8030ECC070903807E0E0903801FFC09038007F001E3E7EBC26>I<D8
01FC147F00FFEC3FFFA300071401000380000181B3A85EA35DA212006D5B017E9038077F
80017F010E13C06D011C13FE90380FC078903803FFF09026007F8013002F2D7DAB36>I<
B539F001FFFCA3000790C7EA7FE06C48EC1F8000011600160E1200160C017F5CA280013F
5CA26E1370011F146080010F5CA2ECF00101075CA26D6C48C7FCA26E5A01011306A26D6C
5AA214FF6E5AA215B8EC3FB015F06E5AA36E5AA26E5AA36EC8FC2E2C7EAA33>I<B500E0
B539E03FFF80A30007903C000FFE000FFC00D803FCD903F8EB03F8F001E0120103015D6D
80000060A26D6E13036DD9037E91C7FCA20280017F5B013FD9063F1306A2D91FC06E5AED
0C1FA2D90FE06E5AED180FA2D907F06E5AED3007A2D903F86E5AED6003A2902601FCE06D
5AEDC00117FCD900FFECFD80ED800017FF027F92C8FC92C77EA26E147E023E143EA2021E
143C021C141CA2412C7EAA46>I<B539F007FFFCA30003D9C00113C0C6496C1300017F14
FC013F5C6E13E06D7E010F495A6D6C485A02F890C7FC903803FC060101130E6E5A903800
FF186E5AEC3FF05D141F140F6E7E81140FEC0DFCEC19FEEC38FF4A7E9138603F8002C07F
0101131F49486C7E02007F01066D7E010E1303496D7E013C80017C80D801FC1580D80FFE
4913C0B5D8800F13FFA3302B7FAA33>I<B539F001FFFCA3000790C7EA7FE06C48EC1F80
00011600160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E13E0010F5CA2
6D6C485AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F18A215B8EC3F
B0A2EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC5CA25CEAFE01
387C0380D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>I<003FB612E0A29038C0003F
90C713C0003CEC7F800038ECFF00A20030495A0070495AA24A5A0060495AA24A5A4A5AA2
C7485A4AC7FC5B5C495A13075C495A131F4A1360495A495AA249C712C0485AA2485A485A
1501485A48481303A24848EB07804848131F00FF14FF90B6FCA2232B7DAA2B>I<B9FCA2
3002809B31>I E end
TeXDict begin

1 0 bop 3823 -99 a Fr(i)-116 289 y Fq(Statistical)47
b(Study)d(of)h(Zig-Zag)h(T)-11 b(ransition)46 b(Boundaries)f(in)g
(Longitudinal)1026 438 y(Digital)i(Magnetic)e(Recording)853
674 y Fr(Aleksandar)33 b(Ka)m(v)m(\024)-46 b(ci)m(\023)g(c)130
b(and)g(Jos)m(\023)-46 b(e)34 b(M.)f(F.)f(Moura)1214
1099 y(Data)g(Storage)g(Systems)i(Cen)m(ter)720 1265
y(Departmen)m(t)e(of)g(Electrical)f(and)i(Computer)g(Engineering)1260
1430 y(Carnegie)f(Mellon)g(Univ)m(ersit)m(y)1415 1596
y(5000)f(F)-8 b(orb)s(es)33 b(Av)m(en)m(ue)1380 1761
y(Pittsburgh,)g(P)-8 b(A)33 b(15213)1318 2115 y(Submitted:)43
b(August)33 b(1996)1419 2281 y(Revised:)44 b(April)31
b(1997)280 2446 y Fp(IEEE)k(T)-7 b(r)i(ansactions)33
b(on)h(Magnetics)p Fr(,)f(v)m(ol.)f(33,)g(pp.)h(4482-4491,)d(No)m(v)m
(em)m(b)s(er)k(1997)1628 3020 y Fo(Abstract)-19 3359
y Fr(In)27 b(this)f(pap)s(er,)i(w)m(e)f(study)h(the)f(statistics)e(of)h
(zig-zag)f(transition)g(w)m(alls)h(in)f(digital)f(magnetic)h(recording)
-165 3477 y(and)34 b(their)f(relationship)g(to)g(transition)g(noise)h
(de\014ning)g(quan)m(tities.)47 b(W)-8 b(e)35 b(pro)m(vide)f(analytic)f
(results)i(that)-165 3595 y(link)29 b(the)i(statistics)f(of)g(zig-zag)f
(transitions)g(to)h(media/recording)e(parameters.)43
b(The)32 b(basis)e(of)g(our)g(study)-165 3713 y(is)k(the)i(triangle)d
(zig-zag)h(transition)f(\(TZ-ZT\))i(mo)s(del)e(due)j(to)f(its)f(w)m
(ell-de\014ned)i(triangle)d(zig-zag)h(shap)s(e)-165 3831
y(and)e(its)g(cross-trac)m(k)i(stabilit)m(y)-8 b(.)42
b(The)33 b(results)g(w)m(e)h(deriv)m(e)f(here,)g(ho)m(w)m(ev)m(er,)i
(are)e(of)f(a)g(general)g(nature,)h(and,)-165 3949 y(giv)m(en)g(the)h
(righ)m(t)f(in)m(terpretation,)f(apply)h(to)h(other)f(zig-zag)f(mo)s
(dels)g(as)i(w)m(ell,)f(as)h(w)m(e)g(sho)m(w)h(in)d(the)i(pap)s(er.)
-165 4067 y(W)-8 b(e)42 b(also)g(pro)m(vide)g(an)h(in)m(terpretation)e
(of)h(the)h(cross-trac)m(k)g(correlation)e(width,)j(linking)d(this)h
(quan)m(tit)m(y)-165 4185 y(to)36 b(the)i(statistics)e(of)h(magnetized)
f(clusters)i(in)e(thin-\014lm)f(magnetic)h(media.)55
b(The)38 b(pap)s(er)f(concludes)h(b)m(y)-165 4303 y(sho)m(wing)32
b(ho)m(w)i(these)f(results)g(can)g(b)s(e)g(used)h(in)e(media)f(noise)h
(mo)s(deling.)-19 5012 y(This)25 b(w)m(ork)h(w)m(as)f(supp)s(orted)h
(in)e(part)h(b)m(y)g(the)g(National)e(Science)i(F)-8
b(oundation)24 b(under)h(Gran)m(t)g(No.)g(ECD-)-165 5130
y(8907068.)42 b(The)33 b(United)f(States)i(go)m(v)m(ernmen)m(t)f(has)g
(certain)f(righ)m(ts)h(in)f(this)g(material.)p eop
2 1 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1218 b Fr(ii)-165 289 y Fm(1)161 b(In)l(tro)t(duction)-165
671 y Fr(It)32 b(has)i(long)d(b)s(een)j(observ)m(ed)g(that)f(most)f(of)
g(the)h(noise)g(in)f(thin)g(\014lm)f(magnetic)h(recording)g(media)g(o)s
(ccurs)-165 836 y(in)38 b(the)h(transitional)e(regions)h(b)s(et)m(w)m
(een)j(t)m(w)m(o)f(opp)s(ositely)e(magnetized)g(magnetization)f
(patterns)j(in)e(the)-165 1001 y(media[1)n(,)h(2].)61
b(The)40 b(source)f(of)f(this)h(noise)f(lies)f(in)h(the)h(irregularit)m
(y)e(of)h(the)h(transition)e(b)s(oundary)-8 b(.)61 b(The)-165
1167 y(zig-zag)33 b(b)s(oundary)i(itself)f(is)g(a)h(realization)d(of)i
(a)h(random)f(pro)s(cess,)j(whic)m(h)e(is)f(wh)m(y)j(the)e(observ)m(ed)
i(media)-165 1332 y(noise)32 b(is)g(indeed)h(noise,)g(i.e.,)f(random.)
-19 1616 y(In)39 b(the)g(past,)h(there)g(ha)m(v)m(e)f(b)s(een)h(man)m
(y)e(studies)h(of)g(zig-zag)e(w)m(all)g(shap)s(es.)62
b(Sev)m(eral)39 b(zig-zag)e(mo)s(dels)-165 1781 y(ha)m(v)m(e)31
b(b)s(een)f(suggested.)44 b(These)31 b(mo)s(dels)e(cluster)h(in)f(t)m
(w)m(o)h(groups,)h(deterministic)d(and)h(sto)s(c)m(hastic)h(mo)s(dels.)
-165 1946 y(Examples)42 b(of)h(deterministic)e(mo)s(dels)g(are)i([3,)g
(4,)g(5)o(,)g(6].)74 b(While)42 b(deterministic)f(mo)s(dels)g(are)i
(useful)g(in)-165 2112 y(understanding)32 b(the)g(ph)m(ysical)f(mec)m
(hanisms)g(in)m(v)m(olv)m(ed)h(in)f(the)h(recording)f(pro)s(cess,)i
(they)g(cannot)e(explain)-165 2277 y(the)49 b(random)f(c)m(haracter)h
(of)f(noise.)92 b(The)50 b(sto)s(c)m(hastic)f(mo)s(dels)e([7,)i(8,)f
(9,)h(10,)f(11])h(mo)s(del)e(the)i(zig-zag)-165 2442
y(transition)31 b(line)g(as)i(a)f(random)g(pro)s(cess,)h(th)m(us)h
(accoun)m(ting)f(for)f(the)h(random)e(c)m(haracter)j(of)e(media)f
(noise.)-19 2726 y(Widely)46 b(accepted)j(mo)s(dels)d(for)g(describing)
h(the)h(ph)m(ysics)g(of)f(thin-\014lm)d(magnetic)i(media)g(are)h(the)
-165 2891 y(micromagnetic)33 b(mo)s(dels)h([12,)i(13)o(,)g(14)o(].)54
b(While)34 b(micromagnetic)f(mo)s(dels)i(mo)s(del)f(the)i(\014ne)g
(microph)m(ysics)-165 3057 y(of)25 b(eac)m(h)i(particle)e(\(grain\))f
(of)i(the)g(recording)g(media,)g(sto)s(c)m(hastic)g(zig-zag)f(mo)s
(dels)f(rely)i(on)g(extracting)g(only)-165 3222 y(a)36
b(few)h(random)e(parameters)i(from)e(macroscopic)g(measuremen)m(ts)j
(and)e(extrinsic)g(media)f(prop)s(erties,)j(to)-165 3387
y(accurately)29 b(mo)s(del)e(the)i(transitions)e(and)i(transition)e
(noise.)42 b(The)30 b(tradeo\013)e(b)s(et)m(w)m(een)j(the)e
(micromagnetic)-165 3553 y(mo)s(dels)46 b(and)i(sto)s(c)m(hastic)h
(zig-zag)d(mo)s(dels)h(is)h(b)s(et)m(w)m(een)i(accuracy)f(and)f(sp)s
(eed.)91 b(The)48 b(sto)s(c)m(hastic)h(zig-)-165 3718
y(zag)36 b(mo)s(dels)g(are)g(m)m(uc)m(h)h(faster,)h(while)e
(micromagnetic)e(mo)s(dels)i(pro)m(vide)g(greater)h(detail.)54
b(In)37 b(detection)-165 3883 y(studies,)32 b(fast)f(mo)s(dels,)f(lik)m
(e)h(the)g(sto)s(c)m(hastic)h(zig-zag)d(mo)s(dels)h(w)m(e)i(describ)s
(e)g(in)e(this)h(pap)s(er,)h(are)f(necessary)-165 4049
y(in)h(order)h(to)g(generate)g(the)h(large)e(n)m(um)m(b)s(er)h(of)f
(transitions)g(required)i(to)e(pro)m(vide)i(statistical)d
(signi\014cance)-165 4214 y(to)h(the)h(error)f(rate)h(computations.)-19
4497 y(In)f(this)f(pap)s(er,)h(w)m(e)h(presen)m(t)h(a)d(statistical)f
(study)j(of)e(zig-zag)f(transition)g(w)m(alls)h(in)g(longitudinal)d
(mag-)-165 4663 y(netic)d(recording.)41 b(Rather)25 b(than)h
Fp(analyzing)e Fr(the)i(statistics)f(of)g(the)h(zig-zag)e(w)m(alls,)i
(w)m(e)g(are)g(more)f(concerned)-165 4828 y(with)35 b(the)h
Fp(synthesis)p Fr(.)51 b(Syn)m(thesis)37 b(in)m(v)m(olv)m(es)g(c)m(ho)s
(osing)e(the)h(parameters)f(in)g(the)h(random)e(zig-zag)g(pro)s(cess)
-165 4994 y(suc)m(h)j(that)f(the)g(pro)s(cess)h(is)e(stable)h(and)g
(suc)m(h)h(that)f(these)h(parameters)f(can)g(b)s(e)g(related)f(to)h
(macroscopic)p eop
3 2 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1191 b Fr(iii)-165 289 y(\(measurable\))32 b(media/recording)f(prop)s
(erties.)44 b(The)34 b(triangle)d(zig-zag)h(transition)f(\(TZ-ZT\))h
(mo)s(del)g(that)-165 454 y(w)m(e)45 b(prop)s(ose)f(is)g(stable.)77
b(W)-8 b(e)44 b(sho)m(w)i(ho)m(w)e(to)g(relate)f(its)h(parameters)g(to)
f(the)i(media)d(ph)m(ysical)i(c)m(harac-)-165 619 y(teristics.)65
b(Although)40 b(the)g(deriv)-5 b(ation)39 b(of)g(our)h(theoretical)f
(results)h(is)g(tied)g(to)f(the)i(TZ-ZT)e(mo)s(del,)i(the)-165
785 y(results)33 b(are)h(general)f(and)g(can)h(b)s(e)f(applied)g(to)g
(other)g(similar)d(mo)s(dels.)45 b(In)34 b(particular,)e(w)m(e)i(men)m
(tion)f(ho)m(w)-165 950 y(to)38 b(mo)s(dify)g(the)h(mo)s(del)f(in)g
([9,)h(10])g(to)f(exhibit)h(cross)h(trac)m(k)g(stabilit)m(y)-8
b(.)61 b(W)-8 b(e)39 b(also)f(deriv)m(e)i(an)f(alternativ)m(e)-165
1115 y(expression)30 b(for)e(the)h(cross-trac)m(k)h(correlation)d
(width)i(and)f(sho)m(w)i(that)f(it)e(applies)h(not)h(only)f(to)h(the)g
(TZ-ZT)-165 1281 y(mo)s(del,)i(but)i(to)f(square-w)m(a)m(v)m(e)j(t)m
(yp)s(e)e(mo)s(dels,)f(as)h(the)g(microtrac)m(k)e(mo)s(del)g(in)h([15,)
g(16].)-19 1564 y(This)48 b(pap)s(er)f(is)g(fo)s(cused)i(on)e(the)h
(presen)m(tation)g(of)f(theoretical)f(results)i(for)f(isolated)f
(transitions.)-165 1730 y(Coupling)e(these)k(results)e(for)g(isolated)e
(transitions)h(with)h(mo)s(dels)f(for)g(bit)h(shift,)j(transition)44
b(p)s(osition)-165 1895 y(v)-5 b(ariance)31 b(increase)h([15,)g(17)o
(],)g(and)g(p)s(ercolation)e(thresholds)j([18)o(,)f(16],)g(w)m(e)h(can)
f(easily)f(extend)i(our)f(TZ-ZT)-165 2060 y(mo)s(del)f(to)h(include)g
(the)h(nonlinear)e(e\013ects)j(of)e(in)m(teracting)f(transitions)h([19)
o(].)-19 2344 y(The)23 b(pap)s(er)g(is)f(organized)g(as)g(follo)m(ws.)
39 b(Section)23 b(I)s(I)f(reviews)i(brie\015y)e(the)h(TZ-ZT)f(mo)s(del)
f(as)i(w)m(ell)f(as)g(other)-165 2509 y(prop)s(osed)31
b(sto)s(c)m(hastic)g(zig-zag)e(transition)g(mo)s(dels.)42
b(Section)30 b(I)s(I)s(I)g(deriv)m(es)i(no)m(v)m(el)f(analytic)e
(results)i(linking)-165 2674 y(the)36 b(statistics)g(of)g(zig-zag)f
(patterns)i(to)f(measurable)f(media/recording)g(quan)m(tities.)54
b(While)35 b(section)h(I)s(I)s(I)-165 2840 y(is)29 b(k)m(ept)j(short,)f
(the)g(pro)s(ofs,)f(discussions)h(and)g(examples)f(supp)s(orting)g(the)
h(results)f(deriv)m(ed)h(in)f(section)g(I)s(I)s(I)-165
3005 y(are)h(in)g(the)h(App)s(endix.)44 b(Section)31
b(IV)h(giv)m(es)g(an)g(example)f(of)g(ho)m(w)h(the)g(results)g(deriv)m
(ed)h(in)e(section)h(I)s(I)s(I)f(can)-165 3170 y(b)s(e)h(used)i(to)e
(syn)m(thesize)j(zig-zag)c(transitions.)43 b(Section)32
b(V)h(concludes)g(the)g(pap)s(er.)-165 3621 y Fm(2)161
b(T)-13 b(riangle)54 b(zig-zag)g(transition)g(mo)t(deling)-165
4003 y Fr(The)44 b(use)h(of)f Fp(sto)-5 b(chastic)43
b Fr(zig-zag)f(w)m(all)h(mo)s(dels)f(as)i(media)f(noise)g(mo)s(dels)g
(in)g(magnetic)g(recording)g(has)-165 4169 y(\014rst)e(b)s(een)g
(suggested)h(b)m(y)g(Arnoldussen)f(and)g(T)-8 b(ong)40
b([7].)68 b(Based)41 b(on)g(Loren)m(tz-microscop)m(y)g(pictures)g(of)
-165 4334 y(zig-zag)31 b(transitions)h(in)g(the)h(media,)e(they)j
(extracted)g(the)f(probabilit)m(y)e(densit)m(y)j(functions)f(\(p)s
(dfs\))g(of)f(the)-165 4500 y(sa)m(wto)s(oth)e(lengths)h(\(denoted)g(b)
m(y)g Fl(w)1192 4515 y Fk(1)1231 4500 y Fl(;)17 b(w)1345
4515 y Fk(2)1384 4500 y Fl(;)g(:)g(:)g(:)30 b Fr(in)g(Figure)f(1\))h
(and)g(of)g(the)h(zig-zag)e(v)m(ertex)j(angles)e(\(denoted)-165
4665 y(b)m(y)d Fl(\022)9 4680 y Fk(1)49 4665 y Fl(;)17
b(\022)138 4680 y Fk(2)178 4665 y Fl(;)g(:)g(:)g(:)26
b Fr(in)g(Figure)f(1\).)41 b(While)26 b(obtaining)f(the)i(p)s(dfs)g(of)
f(the)h(sa)m(wto)s(oth)g(lengths)g Fl(w)3082 4680 y Fj(i)3136
4665 y Fr(and)g(of)f(the)i(v)m(ertex)-165 4830 y(angles)38
b Fl(\022)179 4845 y Fj(i)247 4830 y Fr(su\016ces)j(for)d(the)i
Fp(analysis)e Fr(of)g(the)i(zig-zag)d(patterns,)42 b(it)c(do)s(es)h
(not)g(pro)m(vide)g(a)g(go)s(o)s(d)f(to)s(ol)f(for)-165
4996 y(their)32 b Fp(synthesis)p Fr(.)46 b(The)34 b(main)d(reason)j(is)
f(the)h(instabilit)m(y)d(of)h(the)i(mo)s(del)e(in)g([7].)46
b(If)33 b(the)h(sa)m(wto)s(oth)f(lengths)p eop
4 3 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1194 b Fr(iv)-165 289 y Fl(w)-95 304 y Fk(1)-56 289 y
Fl(;)17 b(w)58 304 y Fk(2)97 289 y Fl(;)g(:)g(:)g(:)43
b Fr(are)h(used)i(as)e(indep)s(enden)m(t)i(random)d(v)-5
b(ariables)43 b(in)h(the)h(syn)m(thesis)h(pro)s(cess,)j(the)44
b(resulting)-165 454 y(sto)s(c)m(hastic)35 b(zig-zag)f(pro)s(cess)i(is)
e(an)h(indep)s(enden)m(t)h(incremen)m(t)f(random)g(pro)s(cess)h([20)o
(,)f(11].)51 b(The)36 b(v)-5 b(ariance)-165 619 y(of)28
b(an)h(indep)s(enden)m(t)i(incremen)m(t)e(random)f(pro)s(cess)j(gro)m
(ws)f(with)e(time)g(\(in)h(this)g(case)h(with)e(the)i(cross-trac)m(k)
-165 785 y(distance\).)49 b(This)34 b(mak)m(es)h(the)g(syn)m(thesized)h
(zig-zag)d(pro)s(cess)i(unstable)g(with)f(a)g(drift)f(in)g(the)i(do)m
(wn-trac)m(k)-165 950 y(direction)j(due)i(to)f(the)h(gro)m(wth)f(of)g
(the)h(v)-5 b(ariance)39 b(with)g(the)h(cross-trac)m(k)g(distance.)64
b(This)40 b(problem)e(has)-165 1115 y(b)s(een)c(recognized)g(in)f(a)g
(follo)m(w-up)f(pap)s(er)i(b)m(y)h(T)-8 b(ang)33 b(and)h(Osse)h([8],)f
(who)g(suggest)g(decon)m(v)m(olving)g(the)g(p)s(df)-165
1281 y(of)c(the)i(sa)m(wto)s(oth)f(lengths)g Fl(w)932
1296 y Fj(i)991 1281 y Fr(to)g(obtain)f(the)i(p)s(df)f(of)g(the)g
(zero-to-p)s(eak)g(lengths)g(\(denoted)h(b)m(y)g Fl(h)3513
1296 y Fk(1)3553 1281 y Fl(;)17 b(h)3653 1296 y Fk(2)3692
1281 y Fl(;)g(:)g(:)g(:)-165 1446 y Fr(in)34 b(Figure)f(2\).)50
b(Using)34 b(the)h(zero-to-p)s(eak)g(distances)g(as)g(indep)s(enden)m
(t)h(random)e(v)-5 b(ariables)33 b(stabilizes)h(the)-165
1611 y(mo)s(del.)75 b(Although)43 b(stable,)k(the)d(mo)s(del)e(in)h
([8])h(w)m(as)h(impractical)c(to)i(use)i(since)f(it)f(relied)g(on)h
(Loren)m(tz)-165 1777 y(microscop)m(y)33 b(pictures)h(for)e(the)i
(determination)e(of)g(the)i(p)s(dfs)g(used.)47 b(Obtaining)31
b(the)j(photographs)f(of)g(the)-165 1942 y(transitions)e(in)h(the)h
(media)e(is)h(a)g(length)m(y)h(pro)s(cess.)-19 2226 y(A)39
b(more)f(systematic)g(approac)m(h)h(w)m(as)h(tak)m(en)g(b)m(y)f
(Middleton)f(and)h(Miles)f(in)f(their)i(mo)s(del)e(describ)s(ed)-165
2391 y(in)g([9])h(and)g([10].)60 b(These)40 b(authors)e(assume)g(the)h
(v)m(ertex)h(angle)d Fl(\022)k Fr(to)d(b)s(e)g(constan)m(t)h(for)f(all)
e(zig-zags,)i(and)-165 2556 y(deriv)m(e)23 b(a)f(relationship)e(b)s(et)
m(w)m(een)25 b(the)e(p)s(df)f(of)g(the)h(sa)m(wto)s(oth)g(lengths)f
Fl(w)2455 2571 y Fk(1)2494 2556 y Fl(;)17 b(w)2608 2571
y Fk(2)2647 2556 y Fl(;)g(:)g(:)g(:)22 b Fr(and)g(the)h(media)e(h)m
(ysteresis)-165 2722 y(lo)s(op.)39 b(There)26 b(are)e(sev)m(eral)i
(problems)e(that)g(remain)f(with)h(this)g(mo)s(del)f(as)i(w)m(ell.)40
b(First,)26 b(the)f(question)g(of)f(ho)m(w)-165 2887
y(to)37 b(c)m(ho)s(ose)h(the)g(v)m(ertex)i(angle)c Fl(\022)41
b Fr(remained)c(unansw)m(ered.)61 b(Second,)39 b(the)f(distinction)e(b)
s(et)m(w)m(een)k Fp(c)-5 b(enter)g(e)g(d)-165 3052 y
Fr(and)28 b Fp(non-c)-5 b(enter)g(e)g(d)26 b Fr(sa)m(wto)s(oth)i
(lengths)g(has)g(not)g(b)s(een)h(made)e(and)h(b)s(oth)g(w)m(ere)h
(inconsisten)m(tly)f(used)h(in)e(the)-165 3218 y(\014gures)38
b(and)f(equations)h(of)f([9])g(and)h([10],)g(whic)m(h)g(leads)f(to)h(p)
s(ossible)e(instabilit)m(y)f(of)i(the)h(mo)s(del.)56
b(Third,)-165 3383 y(and)26 b(most)f(imp)s(ortan)m(tly)-8
b(,)25 b(the)i(parado)m(x)f(of)g(residual)f(life)f(in)i(renew)m(al)g
(theory)h([21)o(,)f(22])g(w)m(as)h(not)f(recognized,)-165
3548 y(whic)m(h)33 b(misled)d(the)j(authors)g(in)m(to)e(deriving)h(an)g
(incorrect)g(relationship)f(b)s(et)m(w)m(een)j(the)f(sa)m(wto)s(oth)f
(lengths)-165 3714 y(p)s(df)g(and)h(the)g(magnetization)d(pro\014le.)
-19 3997 y(P)m(erhaps)42 b(these)f(hardships)g(in)f(dealing)e
(analytically)g(with)i(sto)s(c)m(hastic)g(zig-zag)f(mo)s(dels)g(led)h
(to)g(the)-165 4163 y(p)s(opularit)m(y)30 b(of)g(simpler)g(sto)s(c)m
(hastic)i(square)g(w)m(a)m(v)m(e)h(t)m(yp)s(e)g(mo)s(dels,)d(as)i(the)f
(microtrac)m(k)g(mo)s(del)e([15,)i(16].)43 b(In)-165
4328 y(the)36 b(microtrac)m(k)e(mo)s(del,)h(see)i(Figure)d(3,)i(the)g
(trac)m(k)g(is)f(divided)h(in)m(to)e(microtrac)m(ks.)52
b(The)37 b(magnetization)-165 4493 y(rev)m(ersal)e(in)f(eac)m(h)i
(microtrac)m(k)d(is)i(a)f(p)s(erfect)h(step)h(function,)f(where)h(the)f
(exact)g(p)s(osition)e(of)i(the)g(rev)m(ersal)-165 4659
y(is)40 b(go)m(v)m(erned)i(b)m(y)g(the)f(p)s(df)g(of)f(the)h(square)h
(w)m(a)m(v)m(e)h(heigh)m(ts)e(\(denoted)h(b)m(y)g Fl(h)2674
4674 y Fk(1)2713 4659 y Fl(;)17 b(h)2813 4674 y Fk(2)2852
4659 y Fl(;)g(:)g(:)g(:)40 b Fr(in)g(Figure)g(3\).)68
b(It)41 b(is)-165 4824 y(fairly)35 b(easy)j(to)e(sho)m(w)i(that)f(the)g
(p)s(df)g(of)f(the)h(heigh)m(ts)h Fl(h)1930 4839 y Fj(i)1995
4824 y Fr(in)e(the)h(microtrac)m(k)f(mo)s(del)f(in)i(Figure)e(3)i
(equals)-165 4989 y(the)d(normalized)d(\014rst)j(deriv)-5
b(ativ)m(e)33 b(of)h(the)g(magnetization)d(pro\014le,)i(while)g(the)h
(microtrac)m(k)f(width)g(equals)p eop
5 4 bop -133 -102 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1221 b Fr(v)-165 289 y(the)39 b(cross-trac)m(k)i(correlation)d(width)h
(of)g(the)g(mo)s(del.)63 b(A)m(t)39 b(the)h(same)f(time,)h(this)f(answ)
m(ers)i(the)f(question)-165 454 y(ho)m(w)33 b(to)f(set)h(the)g(p)s(df)g
(of)f(the)h Fl(h)986 469 y Fj(i)1014 454 y Fr('s)g(and)g(the)g
(microtrac)m(k)f(width,)g(whic)m(h)h(mak)m(es)h(the)f(mo)s(del)d(easy)k
(to)e(use.)-19 737 y(Our)h(goal)f(in)h(this)g(pap)s(er)h(is)f(to)g
(deriv)m(e)h(relationships)e(that)h(will)e(mak)m(e)j(the)g(sto)s(c)m
(hastic)g Fp(zig-zag)e Fr(tran-)-165 903 y(sition)37
b(mo)s(dels)h(just)h(as)g(easy)h(to)e(use)i(as)f(the)g(microtrac)m(k)f
(mo)s(del.)61 b(W)-8 b(e)39 b(deriv)m(e)g(form)m(ulas)f(that)g(link)g
(the)-165 1068 y(statistics)32 b(of)h(a)f(zig-zag)g(transition)f(to)i
(the)g(magnetization)d(pro\014le)j(and)g(to)g(the)g(cross-trac)m(k)h
(correlation)-165 1233 y(width.)40 b(Ho)m(w)m(ev)m(er,)30
b(b)s(efore)25 b(w)m(e)h(do)f(that,)h(w)m(e)h(need)f(a)f(sto)s(c)m
(hastic)g(zig-zag)f(mo)s(del)f(that)i(is)g(b)s(oth)g(stable)g(in)f(the)
-165 1399 y(cross-trac)m(k)i(direction)e(\(non-indep)s(enden)m(t)i
(incremen)m(t)f(random)f(pro)s(cess\))i(and)f(is)g(analytically)d
(tractable.)-165 1564 y(This)31 b(mo)s(del)f(is)g(the)i(triangle)d
(zig-zag)h(transition)g(\(TZ-ZT\))h(mo)s(del)e([11,)i(17],)g(whic)m(h)h
(w)m(e)g(describ)s(e)g(brie\015y)-165 1730 y(next.)-165
2136 y Fq(2.1)135 b(T)-11 b(riangle)46 b(zig-zag)f(transition)h(mo)t
(del)-165 2484 y Fr(The)h(TZ-ZT)f(mo)s(del)f(is)i(depicted)g(in)f
(Figure)f(4.)86 b(The)47 b(magnetization)d(of)i(the)h(media)f(is)g
(allo)m(w)m(ed)g(to)-165 2650 y(b)s(e)41 b(orien)m(ted)g(only)g(in)g
(the)g(do)m(wn-trac)m(k)i(direction,)f(with)f(a)g(v)-5
b(alue)40 b Fi(\006)p Fl(M)2595 2665 y Fj(r)2634 2650
y Fr(,)k(where)e Fl(M)3089 2665 y Fj(r)3169 2650 y Fr(is)e(the)i
(remanen)m(t)-165 2815 y(magnetization.)58 b(The)39 b(regions)f(of)f
(opp)s(ositely)h(orien)m(ted)g(magnetizations)e(are)i(separated)i(b)m
(y)f(a)f(zig-zag)-165 2980 y(line)31 b(cen)m(tered)k(at)e(the)g
(nominal)e(transition)g(lo)s(cation.)42 b(The)34 b(zig-zag)e(line)f(is)
i(determined)g(b)m(y)h(the)f(heigh)m(ts)-165 3146 y(of)43
b(the)h(v)m(ertices)i Fl(h)557 3161 y Fj(i)629 3146 y
Fr(and)e(the)g(v)m(ertex)i(angle)d Fl(\022)s Fr(.)77
b(W)-8 b(e)45 b(c)m(ho)s(ose)g Fl(\022)i Fr(to)c(b)s(e)h(a)g(constan)m
(t,)k(although)42 b(a)i(more)-165 3311 y(complex)33 b(mo)s(del)e(could)
i(treat)h Fl(\022)i Fr(as)e(a)f(random)g(v)-5 b(ariable.)44
b(The)35 b(constan)m(t)f(angle)f Fl(\022)s Fr(,)h(ho)m(w)m(ev)m(er,)i
(mak)m(es)e(the)-165 3476 y(mo)s(del)28 b(analytically)f(tractable,)i
(whic)m(h)i(allo)m(ws)d(us)j(to)e(deriv)m(e)i(results)f(in)f(section)h
(I)s(I)s(I.)g(The)g(heigh)m(ts)g Fl(h)3662 3491 y Fj(i)3720
3476 y Fr(are)-165 3642 y(c)m(hosen)k(to)e(b)s(e)h(samples)f(of)g
(indep)s(enden)m(t,)i(iden)m(tically)c(distributed)i(\(iid\))f(random)h
(v)-5 b(ariables.)42 b(Th)m(us,)34 b(the)-165 3807 y(zig-zag)j(line)g
(is)h(obtained)g(b)m(y)i(truncating)d(isosceles)i(triangles)f(of)g
(heigh)m(ts)g Fl(h)2793 3822 y Fj(i)2860 3807 y Fr(on)h(the)g(same)f
(basis)h(line,)-165 3972 y(whic)m(h)f(is)g(the)h(line)e(p)s(erp)s
(endicular)h(to)g(the)g(recording)g(direction)f(at)h(the)h(nominal)d
(transition)h(lo)s(cation.)-165 4138 y(The)43 b(truncated)g(triangles)d
(are)j(of)e(alternating)g(orien)m(tation,)h(one)h(p)s(oin)m(ting)d(up,)
45 b(the)e(next)g(one)f(do)m(wn,)-165 4303 y(then)31
b(up)h(again)e(and)h(so)g(on)g(un)m(til)f(the)i(whole)e(trac)m(k)i
(width)f(has)h(b)s(een)g(sw)m(ept.)44 b(W)-8 b(e)32 b(refer)f(to)g(the)
h(mo)s(del)d(as)-165 4469 y(the)37 b(triangle)f(zig-zag)g(transition)f
(\(TZ-ZT\))i(mo)s(del.)56 b(Notice)37 b(that)g(the)h(indep)s(enden)m(t)
h(random)d(v)-5 b(ariable)-165 4634 y(in)29 b(this)h(mo)s(del)f(is)h
(the)h(triangle)e(heigh)m(t)h(and)g(not)h(the)g(sa)m(wto)s(oth)f
(length.)43 b(If)30 b(w)m(e)i(start)e(dra)m(wing)g(a)g(triangle)-165
4799 y(at)g(the)h(basis)g(line,)f(w)m(e)i(w)m(ould)f(go)f
Fl(h)1175 4814 y Fj(i)1234 4799 y Fr(in)g(one)h(direction)f(and)h(then)
g(come)g(bac)m(k)h(b)m(y)f(the)h(same)e(length)h Fl(h)3705
4814 y Fj(i)3764 4799 y Fr(to)-165 4965 y(\014nish)f(at)f(the)h
(nominal)e(transition)g(lo)s(cation.)40 b(This)30 b(ensures)i(that)e
(the)g(zig-zag)f(line)f(do)s(es)j(not)e(drift)g(a)m(w)m(a)m(y)-165
5130 y(from)h(the)i(nominal)e(transition)g(lo)s(cation.)41
b(So,)32 b(unlik)m(e)f(indep)s(enden)m(t)i(incremen)m(t)f(random)f(pro)
s(cesses,)j(the)p eop
6 5 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1194 b Fr(vi)-165 289 y(TZ-ZT)32 b(mo)s(del)f(is)h(stable.)-165
736 y Fm(3)161 b(Statistical)55 b(relationships)-165
1119 y Fr(As)22 b(describ)s(ed)h(earlier,)f(the)h(inputs)f(for)f(the)h
(TZ-ZT)g(mo)s(del)e(\(restricted)i(here)h(only)e(to)h(isolated)f
(transitions\))-165 1284 y(are)35 b(the)h(p)s(df)g(of)f(the)h(triangle)
e(heigh)m(ts)h Fl(f)1378 1299 y Fj(H)1446 1284 y Fr(\()p
Fl(h)p Fr(\))g(and)h(the)g(v)m(ertex)i(angle)c Fl(\022)s
Fr(.)53 b(In)36 b(the)g(follo)m(wing)d(subsections)-165
1449 y(w)m(e)k(sho)m(w)h(the)f(relationships)f(b)s(et)m(w)m(een)i
(these)g(quan)m(tities)f(and)g(the)g(recording)f(pro)s(cess)i
(parameters.)56 b(In)-165 1615 y(particular,)31 b(w)m(e)j(sho)m(w)h
(that)d(the)i(p)s(df)f Fl(f)1301 1630 y Fj(H)1368 1615
y Fr(\()p Fl(h)p Fr(\))g(is)g(related)f(to)h(the)h(transition)d
(pro\014le,)i(and)g(that)g(the)h(v)m(ertex)-165 1780
y(angle)d Fl(\022)36 b Fr(is)c(determined)h(b)m(y)g(the)g(cross-trac)m
(k)h(correlation)d(width)h(of)g(the)h(mo)s(deled)f(thin)g(\014lm)f
(medium.)-165 2184 y Fq(3.1)135 b(T)-11 b(riangle)46
b(heigh)l(ts)f(p)t(df)f Fh(f)1425 2202 y Fg(H)1505 2184
y Ff(\()p Fh(h)p Ff(\))-165 2532 y Fr(This)38 b(subsection)h(links)f
(the)h(statistics)e(of)h(the)h(zig-zag)e(triangles)g(to)g(the)i
(magnetization)d(pro\014le)i(of)f(an)-165 2697 y(isolated)22
b(transition.)39 b(Assume)25 b(that)e(w)m(e)i(ha)m(v)m(e)g(an)e
(in\014nitely)g(wide)h(trac)m(k,)i(across)e(whic)m(h)h(w)m(e)f(ha)m(v)m
(e)h(a)f(zig-zag)-165 2862 y(transition)31 b(generated)i(b)m(y)g(the)g
(TZ-ZT)f(mo)s(del,)f(see)j(Figure)d(4)i(for)f(a)g(picture)g(of)g(the)h
(TZ-ZT)f(mo)s(del.)42 b(Let)-165 3028 y Fl(f)-117 3043
y Fj(H)-50 3028 y Fr(\()p Fl(h)p Fr(\))27 b(b)s(e)g(the)h(p)s(df)f(of)g
(the)g(triangle)e(heigh)m(ts,)k(and)e Fl(M)10 b Fr(\()p
Fl(x)p Fr(\))28 b(b)s(e)g(the)f(magnetization)e(transition)g(pro\014le)
i(of)f(an)-165 3193 y(isolated)c(transition.)38 b(W)-8
b(e)24 b(assume)g(that)f Fl(M)10 b Fr(\()p Fl(x)p Fr(\))24
b(is)f(an)g(o)s(dd)g(function,)h(for)f(example)g Fl(M)10
b Fr(\()p Fl(x)p Fr(\))29 b(=)e Fl(M)3384 3208 y Fj(r)3436
3154 y Fk(2)p 3432 3170 43 4 v 3432 3227 a Fj(\031)3485
3193 y Fr(atan)3692 3097 y Fe(\020)3751 3154 y Fj(x)p
3751 3170 40 4 v 3752 3227 a(a)3801 3097 y Fe(\021)-165
3358 y Fr(or)35 b Fl(M)10 b Fr(\()p Fl(x)p Fr(\))33 b(=)g
Fl(M)428 3373 y Fj(r)466 3358 y Fr(erf)601 3262 y Fe(\020)709
3319 y Fj(x)p 660 3335 137 4 v 660 3344 a Fd(p)p 719
3344 36 3 v 56 x Fk(2)p Fj(\033)807 3262 y Fe(\021)857
3358 y Fr(.)52 b(By)36 b Fl(M)1186 3373 y Fj(r)1259 3358
y Fr(w)m(e)h(denote)f(the)g(remanen)m(t)g(magnetization.)49
b(Let)36 b Fl(T)14 b(W)49 b Fr(denote)36 b(the)-165 3524
y(trac)m(k)28 b(width.)42 b(Without)27 b(loss)h(of)f(generalit)m(y)-8
b(,)28 b(w)m(e)h(will)d(assume)i(in)f(the)i(remainder)e(of)g(this)h
(subsection)h(that)-165 3689 y Fl(M)-71 3704 y Fj(r)-5
3689 y Fr(=)e(1.)-165 4038 y Fo(Theorem)37 b(1)49 b Fp(The)41
b(magnetization)g(pr)-5 b(o\014le)42 b Fl(M)10 b Fr(\()p
Fl(x)p Fr(\))44 b Fp(of)e(an)g(isolate)-5 b(d)41 b(tr)-5
b(ansition)42 b(cr)-5 b(e)g(ate)g(d)43 b(by)f(the)g(TZ-ZT)-165
4203 y(mo)-5 b(del)48 b(on)g(an)h(in\014nitely)g(wide)f(tr)-5
b(ack)49 b(\()p Fl(T)14 b(W)67 b Fi(!)53 b(1)p Fp(\))c(is)g(r)-5
b(elate)g(d)48 b(to)i(the)f(triangle)f(heights)h(p)-5
b(df)48 b Fl(f)3651 4218 y Fj(H)3718 4203 y Fr(\()p Fl(h)p
Fr(\))-165 4368 y Fp(thr)-5 b(ough:)1054 4674 y Fl(f)1102
4689 y Fj(H)1169 4674 y Fr(\()p Fl(h)p Fr(\))28 b(=)1433
4527 y Fe(\()1541 4612 y Fi(\000)1628 4565 y Fj(M)1703
4542 y Fc(00)1744 4565 y Fk(\()p Fj(h)p Fk(\))p 1628
4589 211 4 v 1640 4646 a Fj(M)1715 4627 y Fc(0)1737 4646
y Fk(\(0\))2043 4612 y Fr(for)f Fl(h)h Fi(\025)g Fr(0)1671
4747 y(0)324 b(for)27 b Fl(h)h(<)g Fr(0)2604 4674 y Fl(;)1095
b Fr(\(1\))-165 4984 y Fp(wher)-5 b(e)44 b Fl(M)224 4948
y Fd(0)248 4984 y Fr(\(0\))h Fp(denotes)f(the)h(\014rst)g(derivative)g
(of)g Fl(M)10 b Fr(\()p Fl(x)p Fr(\))46 b Fp(at)f Fl(x)i
Fr(=)f(0)f Fp(\(i.e.,)f(the)i(slop)-5 b(e)44 b(of)h(the)g(tr)-5
b(ansition)-165 5150 y(pr)g(o\014le\),)34 b(and)g Fl(M)493
5113 y Fd(00)536 5150 y Fr(\()p Fl(x)p Fr(\))h Fp(is)g(the)g(se)-5
b(c)g(ond)34 b(derivative)g(of)g(the)h(tr)-5 b(ansition)35
b(pr)-5 b(o\014le.)p eop
7 6 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1167 b Fr(vii)-19 289 y(The)33 b(pro)s(of)f(is)g(presen)m(ted)j(in)d
(the)h(App)s(endix.)-19 572 y(Theorem)f(1)f(sets)i(the)f(triangle)e
(heigh)m(ts)i(p)s(df)f Fl(f)1739 587 y Fj(H)1807 572
y Fr(\()p Fl(h)p Fr(\))g(of)h(the)g(TZ-ZT)f(mo)s(del)f(to)h(the)h
(desired)g(magneti-)-165 737 y(zation)f(pro\014le)h(of)g(an)h(isolated)
e(transition)g Fl(M)10 b Fr(\()p Fl(x)p Fr(\).)-19 1021
y(In)30 b([9,)g(10],)g(a)g(relationship)e(w)m(as)j(deriv)m(ed)g(b)s(et)
m(w)m(een)h(the)f(magnetization)c(pro\014le)j(and)g(the)g(statistics)g
(of)-165 1186 y(the)h(sa)m(w-to)s(oth)f(zig-zag)f(mo)s(del,)h(equation)
g(\(5\))h(in)e([10].)43 b(This)31 b(equation)f(is)g(not)h(correct)g
(since)g(it)f(neglects)-165 1352 y(the)39 b(residual)f(life)g(parado)m
(x)h(of)g(renew)m(al)g(theory)h([21],)g(see)h(the)e(App)s(endix)h(for)e
(details.)62 b(In)40 b([9)o(,)g(10)o(],)h(the)-165 1517
y(distinction)26 b(b)s(et)m(w)m(een)31 b Fp(c)-5 b(enter)g(e)g(d)28
b Fr(and)g Fp(non-c)-5 b(enter)g(e)g(d)27 b Fr(sa)m(w-to)s(oth)h
(lengths)h Fl(W)42 b Fr(is)27 b(not)i(made)f(either,)h(making)-165
1682 y(the)e(mo)s(del)e(p)s(oten)m(tially)g(unstable,)k(dep)s(ending)e
(on)g(the)g(in)m(terpretation.)41 b(If)26 b(w)m(e)i(mo)s(dify)e(the)h
(mo)s(del)e(in)i([10)o(])-165 1848 y(to)35 b(accoun)m(t)i(for)e(the)i
(residual)e(life)f(parado)m(x)i(and)g Fp(c)-5 b(enter)g(e)g(d)36
b Fr(sa)m(w-to)s(oth)g(lengths,)g(w)m(e)h(\014nd)g(that)f(the)g(true)
-165 2013 y(relationship)29 b(linking)g(the)i(magnetization)e
(pro\014le)h(to)h(the)h(sa)m(w-to)s(oth)f(p)s(df)g(is)f(v)m(ery)j
(similar)28 b(to)i(\(1\).)43 b(F)-8 b(rom)-165 2178 y(this)41
b(p)s(df)h(it)f(is)g(easy)i(to)f(deriv)m(e)g(the)h(simple)d
(relationship)g(b)s(et)m(w)m(een)k(the)e(triangle)e(heigh)m(ts)j
Fl(H)49 b Fr(and)42 b(the)-165 2344 y(sa)m(w-to)s(oth)32
b(lengths)h Fl(W)14 b Fr(,)32 b Fl(W)41 b Fr(=)28 b(2)p
Fl(H)8 b Fr(.)-165 2751 y Fq(3.2)135 b(Cross-trac)l(k)46
b(correlation)g(width)f(and)g(the)g(v)l(ertex)h(angle)g
Fh(\022)-165 3098 y Fr(The)37 b(size)f(of)f(the)i(v)m(ertex)h(angle)d
Fl(\022)k Fr(will)34 b(determine)h(ho)m(w)i(m)m(uc)m(h)g(jitter)e
(there)h(is)g(in)f(the)i(readbac)m(k)g(signal,)-165 3264
y(i.e.,)e(ho)m(w)h(m)m(uc)m(h)g(jitter)f(in)f(the)i(readbac)m(k)h
(signal)d(is)h(a)g(result)g(of)g(the)h(zig-zag)e(transitions)g(in)h
(the)h(media.)-165 3429 y(If)d(the)g(angle)g Fl(\022)j
Fr(is)c(small,)g(that)g(means)i(that)f(man)m(y)g(zig-zags)f(o)s(ccur)h
(across)h(the)g(trac)m(k)g(width.)45 b(Since)33 b(the)-165
3595 y(head)i(senses)i(the)e(a)m(v)m(erage)g(of)g(all)d(the)j(zig-zags)
f(across)h(the)h(trac)m(k,)g(jitter)d(is)h(not)h(strong.)50
b(If)34 b(the)h(angle)f Fl(\022)-165 3760 y Fr(is)k(large,)i(ho)m(w)m
(ev)m(er,)j(few)m(er)d(zig-zags)e(will)e(o)s(ccur)j(across)h(the)f
(trac)m(k)h(width,)h(less)e(zig-zags)f(are)h(therefore)-165
3925 y(a)m(v)m(eraged)27 b(across)g(the)g(trac)m(k,)h(and)f(more)f
(jitter)f(is)h(presen)m(t.)43 b(This)26 b(discussion)h(sho)m(ws)h(that)
e(it)g(is)f(reasonable)-165 4091 y(to)30 b(mak)m(e)g(the)h(v)m(ertex)h
(angle)d Fl(\022)k Fr(dep)s(enden)m(t)f(on)e(a)g(quan)m(tit)m(y)h
(directly)f(tied)g(to)f(the)i(amoun)m(t)f(of)f(jitter)h(media)-165
4256 y(noise.)43 b(This)33 b(quan)m(tit)m(y)g(is)f(the)h(cross-trac)m
(k)h(correlation)d(width)h([15].)-19 4539 y(Let)27 b(a)g(magnetization)
d(transition)h(b)s(e)i(written)g(at)f Fl(x)i Fr(=)g(0.)41
b(The)28 b(magnetization)c(asso)s(ciated)j(with)g(that)-165
4705 y(transition)37 b(is)i(a)g(t)m(w)m(o)g(dimensional)e(random)h(pro)
s(cess)i Fl(m)p Fr(\()p Fl(x;)17 b(z)t Fr(\),)42 b(where)f
Fl(x)e Fr(is)g(the)g(do)m(wn-trac)m(k)h(direction)-165
4870 y(and)d Fl(z)42 b Fr(is)37 b(the)g(cross-trac)m(k)i(direction.)56
b(Let)37 b(E)h(denote)g(the)f(exp)s(ectation)h(op)s(erator)e
(\(statistical)f(a)m(v)m(erage)-165 5035 y(op)s(erator\).)76
b(Then)46 b(the)e(normalized)e(cross-trac)m(k)j(magnetization)c(auto)s
(correlation)h(function)h Fl(r)s Fr(\()p Fl(Z)7 b Fr(\))44
b(at)p eop
8 7 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1140 b Fr(viii)-165 289 y Fl(x)28 b Fr(=)f(0)33 b(is)f(de\014ned)i(as)e
([15])332 582 y Fl(r)s Fr(\()p Fl(Z)7 b Fr(\))27 b(=)669
515 y(E)17 b([)56 b(\()28 b Fl(m)p Fr(\(0)p Fl(;)17 b(z)t
Fr(\))22 b Fi(\000)h Fr(E)17 b([)p Fl(m)p Fr(\(0)p Fl(;)g(z)t
Fr(\)])28 b(\))17 b(\()27 b Fl(m)p Fr(\(0)p Fl(;)17 b(z)27
b Fr(+)22 b Fl(Z)7 b Fr(\))22 b Fi(\000)g Fr(E)17 b([)p
Fl(m)p Fr(\(0)p Fl(;)g(z)27 b Fr(+)22 b Fl(Z)7 b Fr(\)])28
b(\))55 b(])p 669 559 2647 4 v 1921 650 a Fl(M)2025 622
y Fk(2)2015 675 y Fj(r)3326 582 y Fl(;)373 b Fr(\(2\))-165
866 y(where)46 b Fl(Z)52 b Fr(is)45 b(the)g(cross-trac)m(k)i
(displacemen)m(t.)81 b(W)-8 b(e)45 b(are)g(assuming)g(that)g(the)g
(magnetization)e(pro)s(cess)-165 1031 y Fl(m)p Fr(\()p
Fl(x;)17 b(z)t Fr(\))30 b(is)g(stationary)f(in)g(the)h(cross-trac)m(k)h
(direction,)e(whic)m(h)h(implies)e(that)h(the)h(a)m(v)m(erage)h
(magnetization)-165 1196 y(pro\014le)1435 1480 y Fl(M)10
b Fr(\()p Fl(x)p Fr(\))29 b(=)f(E)17 b([)p Fl(m)p Fr(\()p
Fl(x;)g(z)t Fr(\)])1477 b(\(3\))-165 1763 y(is)36 b(indep)s(enden)m(t)j
(of)d Fl(z)t Fr(.)58 b(Also,)38 b(since)f(w)m(e)h(assumed)g(that)f(the)
g(transition)f(is)g(written)h(at)g Fl(x)f Fr(=)f(0,)j(w)m(e)g(ha)m(v)m
(e)-165 1928 y Fl(M)10 b Fr(\(0\))28 b(=)f(E)17 b([)p
Fl(m)p Fr(\(0)p Fl(;)g(z)t Fr(\)])29 b(=)e(0.)43 b(Therefore,)34
b(equation)e(\(2\))h(simpli\014es)d(to)1186 2222 y Fl(r)s
Fr(\()p Fl(Z)7 b Fr(\))27 b(=)1524 2155 y(E)17 b([)p
Fl(m)p Fr(\(0)p Fl(;)g(z)t Fr(\))p Fl(m)p Fr(\(0)p Fl(;)g(z)27
b Fr(+)22 b Fl(Z)7 b Fr(\)])p 1524 2199 939 4 v 1921
2290 a Fl(M)2025 2261 y Fk(2)2015 2315 y Fj(r)2472 2222
y Fl(:)1227 b Fr(\(4\))-165 2505 y(The)45 b(cross-trac)m(k)g
(correlation)d(width)i Fl(s)g Fr(is)g(de\014ned)i(as)e(the)h(area)f
(under)h(the)f(cross)h(trac)m(k)g(correlation)-165 2671
y(function)1456 2968 y Fl(s)28 b Fr(=)1733 2834 y Fd(1)1708
2851 y Fe(Z)1615 3094 y Fj(Z)5 b Fk(=)p Fd(\0001)1883
2968 y Fl(r)s Fr(\()p Fl(Z)i Fr(\)d)p Fl(Z)r(:)1496 b
Fr(\(5\))-19 3423 y(W)-8 b(e)33 b(no)m(w)g(\014nd)g(an)g(expression)h
(for)e(the)h(cross-trac)m(k)g(correlation)e(width)i(of)f(the)h(TZ-ZT)f
(mo)s(del.)-165 3790 y Fo(Theorem)37 b(2)49 b Fp(The)d(cr)-5
b(oss-tr)g(ack)45 b(c)-5 b(orr)g(elation)46 b(width)h
Fl(s)1945 3805 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)2223
3790 y Fp(of)46 b(the)h(TZ-ZT)e(mo)-5 b(del)46 b(is)g(r)-5
b(elate)g(d)47 b(to)f(the)-165 3955 y(statistics)35 b(of)f(the)h
(triangle)g(b)-5 b(ases)34 b Fl(B)40 b Fp(of)34 b(the)h(TZ-ZT)f(mo)-5
b(del)34 b(thr)-5 b(ough)35 b(the)g(fol)5 b(lowing)33
b(e)-5 b(quation)1461 4239 y Fl(s)1507 4254 y Fb(T)8
b(Z)s Fc(\000)p Fb(Z)s(T)1766 4239 y Fr(=)1880 4171 y(V)-8
b(ar\()p Fl(B)5 b Fr(\))p 1880 4215 307 4 v 1925 4307
a(E)17 b([)p Fl(B)5 b Fr(])2197 4239 y Fl(;)1502 b Fr(\(6\))-165
4533 y Fp(wher)-5 b(e)35 b Fr(V)-8 b(ar\()p Fl(B)5 b
Fr(\))36 b Fp(stands)f(for)h(the)g(varianc)-5 b(e)35
b(of)h(the)g(r)-5 b(andom)35 b(triangle)g(b)-5 b(ase)36
b Fl(B)5 b Fp(,)36 b(and)g Fr(E\()p Fl(B)5 b Fr(\))36
b Fp(stands)g(for)f(the)-165 4698 y(exp)-5 b(e)g(cte)g(d)34
b(value)g(of)h Fl(B)5 b Fp(.)-19 5065 y Fr(The)33 b(pro)s(of)f(of)g
(Theorem)h(2)f(is)h(in)e(the)i(App)s(endix.)p eop
9 8 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1194 b Fr(ix)-19 289 y(Although)25 b(Theorem)i(2)f(is)f(deriv)m(ed)j
(in)d(the)i(con)m(text)g(of)f(the)g(TZ-ZT)g(mo)s(del,)g(its)g(pro)s(of)
f(holds)h(in)f(a)h(fairly)-165 454 y(general)32 b(con)m(text.)47
b(The)34 b(theorem)g(giv)m(es)f(an)g(alternativ)m(e)g(in)m
(terpretation)f(of)h(the)h(cross-trac)m(k)g(correlation)-165
619 y(width.)43 b(Rewrite)32 b(the)h(equation)g(in)f(Theorem)g(2)h(in)f
(its)g(general)g(form)1578 903 y Fl(s)c Fr(=)1765 835
y(V)-8 b(ar\()p Fl(C)7 b Fr(\))p 1765 880 305 4 v 1810
971 a(E)17 b([)q Fl(C)7 b Fr(])2080 903 y Fl(:)1619 b
Fr(\(7\))-165 1186 y(Here,)33 b Fl(s)g Fr(is)f(the)h(cross-trac)m(k)h
(correlation)c(width)j(and)g Fl(C)39 b Fr(is)32 b(a)h(random)e(v)-5
b(ariable)31 b(represen)m(ting)j(the)f(cross-)-165 1352
y(trac)m(k)25 b(size)g(of)f(a)g(magnetization)e(cluster)j(in)e(the)i
(DC)g(demagnetized)f(state)h(of)f(the)h(medium.)39 b(It)25
b(is)f(assumed)-165 1517 y(that)44 b(the)i(magnetization)c(of)i(eac)m
(h)i(cluster)f(is)f(either)h(+)p Fl(M)2136 1532 y Fj(r)2219
1517 y Fr(or)g Fi(\000)p Fl(M)2522 1532 y Fj(r)2605 1517
y Fr(p)s(oin)m(ting)e(along)h(the)h(recording)-165 1682
y(direction.)74 b(F)-8 b(or)43 b(a)g(b)s(etter)h(understanding)g(of)f
(what)g(w)m(e)i(mean)e(b)m(y)h(magnetization)d(clusters,)47
b(refer)d(to)-165 1848 y(Figure)29 b(5,)i(where)h(a)e(p)s(ortion)g(of)g
(a)g(DC)h(demagnetized)f(medium)f(is)h(sho)m(wn)i(in)e(a)g
(simpli\014ed)f(sk)m(etc)m(h.)45 b(Note)-165 2013 y(that)e(clusters)i
(are)e(not)h(the)g(same)g(as)g(grains)e(\(there)j(migh)m(t)d(b)s(e)i
(more)f(than)h(one)g(grain)e(p)s(er)i(cluster\).)-165
2178 y(Equation)27 b(\(7\))h(giv)m(es)g(the)g(relationship)e(b)s(et)m
(w)m(een)k(the)e(statistics)f(of)g(magnetization)f(cluster)i(sizes)g
(and)g(the)-165 2344 y(cross-trac)m(k)33 b(correlation)c(width.)43
b(It)32 b(clearly)f(sho)m(ws)i(that)e(the)h(cross-trac)m(k)h
(correlation)d(width)h(is)g(not)h(the)-165 2509 y(a)m(v)m(erage)c
(cluster)f(size,)i(and)e(it)f(should)h(not)g(b)s(e)h(confused)g(with)f
(the)h(zig-zag)e(half-w)m(a)m(v)m(elength)h(\(e.g.,)h(see)g([5])-165
2674 y(for)h(the)i(de\014nition)e(of)h(the)h(zig-zag)e(w)m(a)m(v)m
(elength\).)44 b(Equation)30 b(\(7\))g(sa)m(ys)i(that)e(the)h
(cross-trac)m(k)g(correlation)-165 2840 y(width)25 b(is)g(the)i(ratio)d
(b)s(et)m(w)m(een)k(the)e(v)-5 b(ariance)25 b(and)h(the)g(mean)f(of)h
(the)g(cluster)g(sizes.)42 b(Th)m(us,)29 b(a)c(lo)m(w)g(noise)h(\(lo)m
(w)-165 3005 y(cross-trac)m(k)34 b(correlation)d(width\))i(medium)e
(has)i(the)g(cluster)h(size)f(v)-5 b(ariance)32 b(V)-8
b(ar\()p Fl(C)7 b Fr(\))32 b(small)f(compared)i(to)-165
3170 y(the)i(cluster)f(mean)h(E[)p Fl(C)7 b Fr(].)49
b(In)35 b(other)g(w)m(ords,)h(it)e(is)g(not)g(the)h(a)m(v)m(erage)h
(cluster)e(size,)i(but)e(the)h(regularit)m(y)f(of)-165
3336 y(the)f(cluster)g(sizes)g(\(relativ)m(e)f(to)g(the)h(a)m(v)m
(erage)g(size\))g(that)f(determines)h(the)g(lev)m(el)f(of)g(the)h
(media)f(noise.)-19 3619 y(T)-8 b(o)23 b(v)m(erify)g(expression)h
(\(7\),)h(w)m(e)e(next)h(apply)f(it)e(to)i(an)g(alternativ)m(e)f(media)
f(noise)i(mo)s(del,)g(the)g(microtrac)m(k)-165 3785 y(media)32
b(mo)s(del)f([15,)i(16])g(\(Figure)f(3\),)h(to)g(sho)m(w)i(that)e
(\(7\))g(correctly)g(equates)i(the)f(cross-trac)m(k)g(correlation)-165
3950 y(width)28 b(to)g(the)h(microtrac)m(k)f(width.)42
b(Of)28 b(course,)j(for)d(the)h(microtrac)m(k)e(mo)s(del,)h(the)h
(cross-trac)m(k)h(correlation)-165 4115 y(width)37 b(can)g(b)s(e)g
(easily)g(calculated)f(using)h(the)g(in)m(tegral)f(de\014nition)g
(\(5\).)57 b(The)38 b(ob)5 b(jectiv)m(e)38 b(here,)h(ho)m(w)m(ev)m(er,)
-165 4281 y(is)31 b(to)g(demonstrate)g(the)h(v)-5 b(alidit)m(y)29
b(of)i(expression)i(\(7\))e(in)f(an)h(example)g(in)m(v)m(olving)f(a)h
(mo)s(del)f(di\013eren)m(t)i(from)-165 4446 y(the)h(TZ-ZT)f(mo)s(del.)
-19 4730 y(T)-8 b(o)30 b(use)g(Equation)g(\(7\),)f(w)m(e)i(need)g(to)e
(determine)g(the)h(mean)f(and)h(v)-5 b(ariance)29 b(of)g(the)h
(cross-trac)m(k)h(cluster)-165 4895 y(sizes)40 b Fl(C)47
b Fr(for)40 b(the)g(microtrac)m(k)f(mo)s(del,)i(see)g(Figure)e(3)g(for)
h(a)g(picture)g(of)f(the)i(microtrac)m(k)e(mo)s(del.)64
b(F)-8 b(rom)-165 5060 y(Figure)37 b(3)h(w)m(e)i(see)f(that)f(the)h
(cross-trac)m(k)h(magnetization)c(cluster)j(size)f(can)h(only)f(tak)m
(e)h(v)-5 b(alues)38 b Fl(C)45 b Fr(=)37 b Fl(i\026)p
Fr(,)p eop
10 9 bop -133 -102 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1221 b Fr(x)-165 289 y(where)48 b Fl(i)g Fr(is)e(a)h(p)s(ositiv)m(e)g
(in)m(teger)g(and)g Fl(\026)g Fr(is)g(the)h(microtrac)m(k)e(width.)87
b(Since)48 b(the)g(transition)d(p)s(osition)-165 454
y(\(denoted)36 b(with)f Fl(h)525 469 y Fj(i)589 454 y
Fr(in)g(Figure)g(3\))g(for)g(eac)m(h)h(microtrac)m(k)f(is)g(indep)s
(enden)m(t)i(of)e(the)h(transition)e(p)s(osition)g(in)-165
619 y(an)m(y)f(other)g(microtrac)m(k,)e(w)m(e)j(ha)m(v)m(e)g(that)e
(the)h(probabilit)m(y)e(that)h(the)h(cluster)g(size)g(equals)g
Fl(i\026)f Fr(is)1092 903 y(P)17 b Fi(f)p Fl(C)34 b Fr(=)28
b Fl(i\026)p Fi(g)f Fr(=)1730 835 y(1)p 1716 880 77 4
v 1716 971 a(2)1765 942 y Fj(i)1803 903 y Fl(;)127 b
Fr(for)55 b Fl(i)28 b Fr(=)g(1)p Fl(;)17 b Fr(2)p Fl(;)g(:)g(:)g(:)1131
b Fr(\(8\))-165 1186 y(Ha)m(ving)34 b(the)h(probabilit)m(y)e(measure)i
(in)e(Equation)i(\(8\),)g(w)m(e)g(calculate)f(the)h(mean)f(cluster)h
(size)g(E)17 b([)p Fl(C)7 b Fr(],)35 b(the)-165 1352
y(mean)d(square)i(cluster)e(size)h(E)17 b([)p Fl(C)1088
1315 y Fk(2)1128 1352 y Fr(],)32 b(and)h(the)g(cluster)g(size)g(v)-5
b(ariance)32 b(V)-8 b(ar)16 b(\()p Fl(C)7 b Fr(\))28
b(=)f(E)17 b([)p Fl(C)3093 1315 y Fk(2)3133 1352 y Fr(])22
b Fi(\000)g Fr(E)17 b([)q Fl(C)7 b Fr(])3496 1303 y Fk(2)3568
1352 y Fr(as)824 1648 y(E)17 b([)q Fl(C)7 b Fr(])83 b(=)1305
1540 y Fd(1)1281 1565 y Fe(X)1283 1747 y Fj(i)p Fk(=1)1417
1648 y Fl(i\026)p Fr(P)17 b Fi(f)p Fl(C)34 b Fr(=)28
b Fl(i\026)p Fi(g)f Fr(=)2148 1540 y Fd(1)2123 1565 y
Fe(X)2126 1747 y Fj(i)p Fk(=1)2259 1648 y Fl(i\026)2376
1580 y Fr(1)p 2361 1624 V 2361 1716 a(2)2410 1687 y Fj(i)2476
1648 y Fr(=)h(2)p Fl(\026;)1011 b Fr(\(9\))761 1933 y(E)844
1837 y Fe(h)883 1933 y Fl(C)960 1892 y Fk(2)999 1837
y Fe(i)1122 1933 y Fr(=)1305 1825 y Fd(1)1281 1850 y
Fe(X)1283 2033 y Fj(i)p Fk(=1)1400 1933 y Fr(\()p Fl(i\026)p
Fr(\))1568 1892 y Fk(2)1608 1933 y Fr(P)17 b Fi(f)p Fl(C)34
b Fr(=)28 b Fl(i\026)p Fi(g)f Fr(=)2246 1825 y Fd(1)2222
1850 y Fe(X)2225 2033 y Fj(i)p Fk(=1)2342 1933 y Fr(\()p
Fl(i\026)p Fr(\))2510 1892 y Fk(2)2573 1866 y Fr(1)p
2559 1910 V 2559 2002 a(2)2608 1973 y Fj(i)2673 1933
y Fr(=)h(6)p Fl(\026)2885 1892 y Fk(2)2924 1933 y Fl(;)726
b Fr(\(10\))717 2174 y(V)-8 b(ar)17 b(\()p Fl(C)7 b Fr(\))83
b(=)g(E)1364 2077 y Fe(h)1403 2174 y Fl(C)1480 2133 y
Fk(2)1519 2077 y Fe(i)1580 2174 y Fi(\000)23 b Fr(E)17
b([)p Fl(C)7 b Fr(])1894 2125 y Fk(2)1961 2174 y Fr(=)28
b(6)p Fl(\026)2173 2133 y Fk(2)2234 2174 y Fi(\000)22
b Fr(\(2)p Fl(\026)p Fr(\))2517 2133 y Fk(2)2584 2174
y Fr(=)27 b(2)p Fl(\026)2795 2133 y Fk(2)2834 2174 y
Fl(:)816 b Fr(\(11\))-165 2457 y(Substituting)31 b(\(9\))i(and)f
(\(11\))g(in)m(to)g(\(7\),)g(w)m(e)i(get)e(the)h(cross-trac)m(k)h
(correlation)d(width)1326 2755 y Fl(s)d Fr(=)1513 2687
y(V)-8 b(ar)16 b(\()p Fl(C)7 b Fr(\))p 1513 2732 322
4 v 1567 2823 a(E)17 b([)p Fl(C)7 b Fr(])1872 2755 y(=)1985
2687 y(2)p Fl(\026)2093 2651 y Fk(2)p 1985 2732 147 4
v 2005 2823 a Fr(2)p Fl(\026)2170 2755 y Fr(=)27 b Fl(\026;)1318
b Fr(\(12\))-165 3038 y(i.e.,)32 b(the)h(cross-trac)m(k)h(correlation)c
(width)j(of)f(the)h(microtrac)m(k)f(mo)s(del)f(equals)i(the)g
(microtrac)m(k)e(width)i Fl(\026)p Fr(.)-19 3322 y(Giv)m(en)h(the)g
(result)f(in)g(Theorem)h(2,)g(w)m(e)h(\014nd)f(no)m(w)g(an)g
(expression)h(for)e(the)h(v)m(ertex)i(angle)d Fl(\022)j
Fr(suc)m(h)g(that)-165 3487 y(the)e(cross-trac)m(k)h(correlation)d
(width)i(of)f(the)i(TZ-ZT)e(mo)s(del)g(equals)h(the)g(cross-trac)m(k)h
(correlation)e(width)-165 3652 y(of)f(the)h(media)e(w)m(e)j(are)e(mo)s
(deling.)-165 4023 y Fo(Corollary)j(2.1)49 b Fp(The)33
b(TZ-ZT)f(mo)-5 b(dele)g(d)32 b(me)-5 b(dium)33 b(and)g(the)g(thin)g
(\014lm)g(me)-5 b(dium)32 b(b)-5 b(eing)33 b(mo)-5 b(dele)g(d)32
b(have)g(the)-165 4188 y(same)i(cr)-5 b(oss-tr)g(ack)34
b(c)-5 b(orr)g(elation)34 b(width)h Fl(s)f Fp(if)h(the)g(TZ-ZT)f
(vertex)g(angle)g Fl(\022)k Fp(is)1313 4483 y Fl(\022)31
b Fr(=)c(2)h(atan)1758 4337 y Fe(")1872 4416 y Fl(s)22
b Fi(\001)g Fr(E)17 b([)p Fl(H)8 b Fr(])p 1817 4460 454
4 v 1817 4551 a(2)22 b Fi(\001)f Fr(V)-8 b(ar)17 b(\()p
Fl(H)8 b Fr(\))2280 4337 y Fe(#)2345 4483 y Fl(;)1305
b Fr(\(13\))-165 4778 y Fp(wher)-5 b(e)34 b Fl(H)42 b
Fp(is)35 b(the)g(r)-5 b(andom)34 b(variable)g(r)-5 b(epr)g(esenting)34
b(the)g(TZ-ZT)g(heights.)-165 5148 y Fo(Pro)s(of)j(2.1)49
b Fr(The)40 b(bases)h Fl(b)847 5163 y Fj(i)916 5148 y
Fr(are)e(related)g(to)h(the)g(heigh)m(ts)g Fl(h)2116
5163 y Fj(i)2184 5148 y Fr(as)g Fl(b)2352 5163 y Fj(i)2420
5148 y Fr(=)g(2)p Fl(h)2641 5163 y Fj(i)2696 5148 y Fi(\001)26
b Fr(tan)2901 5109 y Fj(\022)p 2901 5125 36 4 v 2901
5183 a Fk(2)2946 5148 y Fr(,)42 b(see)f(Figure)d(4.)65
b(If)39 b(w)m(e)p eop
11 10 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1194 b Fr(xi)-165 289 y(substitute)33 b Fl(B)g Fr(=)27
b Fl(H)j Fi(\001)22 b Fr(2tan)862 249 y Fj(\022)p 861
265 36 4 v 861 323 a Fk(2)939 289 y Fr(in)m(to)32 b(\(6\))g(and)h(solv)
m(e)g(the)g(resulting)e(equation)i(for)f Fl(\022)s Fr(,)h(w)m(e)g(get)g
(\(13\).)43 b(QED)-165 739 y Fm(4)161 b(Matc)l(hing)53
b(the)g(TZ-ZT)g(mo)t(del)h(to)f(ph)l(ysical)h(media)-165
1122 y Fr(W)-8 b(e)35 b(demonstrate)f(through)h(an)f(example)g(ho)m(w)h
(the)g(TZ-ZT)f(de\014ning)g(quan)m(tities)h(\(the)f(triangle)f(heigh)m
(ts)-165 1287 y(p)s(df)42 b(and)h(the)g(v)m(ertex)h(angle\))e(are)h
(obtained)f(from)f(measuremen)m(ts)j(of)e(magnetization)e(pro\014les)i
(of)h(iso-)-165 1452 y(lated)36 b(transitions.)57 b(W)-8
b(e)37 b(use)h(transition)e(pro\014les)h(obtained)g(b)m(y)h
(micromagnetic)c(mo)s(deling.)55 b(The)38 b(same)-165
1618 y(information)29 b(can)j(b)s(e)g(obtained)g(from)f(spin-stand)h
(measuremen)m(ts)h(b)m(y)g(decon)m(v)m(olving)f(the)g(head)h(transfer)
-165 1783 y(function)f(from)f(the)i(isolated)e(pulse)i(shap)s(es)h([19)
o(].)-19 2066 y(Here)j(w)m(e)g(demonstrate)f(the)g(extraction)g(pro)s
(cedure)h(for)f(t)m(w)m(o)g(t)m(yp)s(es)i(of)d(thin)h(\014lm)e(media.)
53 b(The)37 b(\014rst)-165 2232 y(one)28 b(is)g(an)h(orien)m(ted)f
(medium)f(with)h(the)h(orien)m(tation)e(ratio)g(O.R.=)h(1)p
Fl(:)p Fr(3.)41 b(The)30 b(second)g(one)e(is)g(an)h(isotropic)-165
2397 y(medium)i(with)h(O.R.=)27 b(1)p Fl(:)p Fr(0.)-165
2804 y Fq(4.1)135 b(Orien)l(ted)46 b(thin)f(\014lm)g(medium)-165
3152 y Fr(Using)38 b(the)h(micromagnetic)d(mo)s(del)h(of)i([14)o(],)i
(w)m(e)f(sim)m(ulated)d(a)h(thin)h(\014lm)e(magnetic)g(medium)h(with)g
(the)-165 3317 y(follo)m(wing)45 b(c)m(haracteristics:)75
b(media)47 b(thic)m(kness)j Fl(\016)58 b Fr(=)c(250)2084
3300 y(\027)2084 3317 y(A,)48 b(co)s(ercivit)m(y)g Fl(H)8
b(c)54 b Fr(=)g(1700Oe,)e(remanence)-165 3483 y Fl(M)-71
3498 y Fj(r)12 3483 y Fr(=)44 b(600em)m(u)p Fl(=)p Fr(cm)629
3447 y Fk(3)668 3483 y Fr(,)h(orien)m(tation)c(ratio)g(O.R.=)j(1)p
Fl(:)p Fr(3.)74 b(W)-8 b(e)43 b(used)g(a)g(Karlquist)e(write)i(head)g
(with)f(the)-165 3648 y(follo)m(wing)27 b(geometry:)42
b(magnetic)29 b(spacing)h(\(\015ying)f(heigh)m(t\))h
Fl(d)d Fr(=)h(0)p Fl(:)p Fr(1)p Fl(\026)p Fr(m,)h(gap)h(length)f
Fl(g)i Fr(=)d(0)p Fl(:)p Fr(24)p Fl(\026)p Fr(m,)h(trac)m(k)-165
3813 y(width)35 b Fl(T)14 b(W)46 b Fr(=)32 b(1)p Fl(:)p
Fr(25)p Fl(\026)p Fr(m.)50 b(With)35 b(this)g(head-media)f(geometry)-8
b(,)36 b(w)m(e)g(wrote)g(500)f(indep)s(enden)m(t)h(transitions)-165
3979 y Fl(M)-71 3994 y Fj(i)-43 3979 y Fr(\()p Fl(x)p
Fr(\),)d Fl(i)28 b Fr(=)g(1)p Fl(;)17 b(:)g(:)g(:)e(;)i
Fr(500,)32 b(and)h(found)f(the)h(a)m(v)m(erage)h(transition)d
(pro\014le)1359 4289 y Fl(M)10 b Fr(\()p Fl(x)p Fr(\))28
b(=)1785 4222 y(1)p 1736 4266 147 4 v 1736 4357 a(500)1916
4181 y Fk(500)1909 4206 y Fe(X)1912 4388 y Fj(i)p Fk(=1)2045
4289 y Fl(M)2139 4304 y Fj(i)2168 4289 y Fr(\()p Fl(x)p
Fr(\))p Fl(:)1351 b Fr(\(14\))-165 4598 y(W)-8 b(e)28
b(could)g(use)g(this)g(a)m(v)m(eraged)h(magnetization)d(pro\014le)h
Fl(M)10 b Fr(\()p Fl(x)p Fr(\))29 b(directly)e(in)h(Theorem)g(1)g(to)f
(obtain)g(the)h(p)s(df)-165 4763 y Fl(f)-117 4778 y Fj(H)-50
4763 y Fr(\()p Fl(h)p Fr(\).)43 b(Instead,)34 b(w)m(e)g(\014rst)f
(\014nd)g(an)f(analytic)g(\014t)g(to)h Fl(M)10 b Fr(\()p
Fl(x)p Fr(\),)1199 4996 y Fl(M)g Fr(\()p Fl(x)p Fr(\))p
1199 5041 237 4 v 1250 5132 a Fl(M)1344 5147 y Fj(r)1472
5064 y Fi(\031)28 b Fl(M)1671 5079 y Fj(a)1713 5064 y
Fr(\()p Fl(x)p Fr(\))g(=)g(erf)2111 4918 y Fe( )2254
4996 y Fl(x)p 2186 5041 191 4 v 2186 5141 a(\033)2245
5059 y Fi(p)p 2328 5059 49 4 v 82 x Fr(2)2387 4918 y
Fe(!)2469 5064 y Fl(;)1181 b Fr(\(15\))p eop
12 11 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1167 b Fr(xii)-165 289 y(The)33 b(b)s(est)g(\014t)g(in)f(a)g(least)g
(squares)i(sense)h(leads)d(to)g Fl(\033)g Fr(=)c(460)2089
271 y(\027)2089 289 y(A.)-19 572 y(With)j(the)i(analytic)d(expression)j
(in)e(\(15\),)h(and)g(using)f(Theorem)h(1,)g(w)m(e)h(get)f(the)g
(triangle)e(heigh)m(ts)i(p)s(df)782 883 y Fl(f)830 898
y Fj(H)897 883 y Fr(\()p Fl(h)p Fr(\))c(=)f Fi(\000)1247
816 y Fl(M)1351 780 y Fd(00)1341 840 y Fj(a)1395 816
y Fr(\()p Fl(h)p Fr(\))p 1247 860 280 4 v 1256 952 a
Fl(M)1360 923 y Fd(0)1350 976 y Fj(a)1393 952 y Fr(\(0\))1565
883 y(=)1668 737 y Fe(\()1805 784 y Fj(h)p 1787 800 78
4 v 1787 857 a(\033)1829 838 y Fa(2)1874 823 y Fr(exp)2040
727 y Fe(\020)2089 823 y Fi(\000)2195 784 y Fj(h)2236
760 y Fa(2)p 2177 800 113 4 v 2177 857 a Fk(2)p Fj(\033)2254
838 y Fa(2)2299 727 y Fe(\021)2570 823 y Fl(h)h Fi(\025)g
Fr(0)1777 957 y(0)138 b Fl(h)28 b(<)f Fr(0)2876 883 y
Fl(;)774 b Fr(\(16\))-165 1189 y(whic)m(h)25 b(is)e(the)i(w)m(ell-kno)m
(wn)g(Ra)m(yleigh)e(p)s(df.)40 b(The)26 b(mean)e(and)g(v)-5
b(ariance)24 b(of)g(a)g(Ra)m(yleigh-distributed)e(random)-165
1354 y(v)-5 b(ariable)30 b(are)848 1638 y(E)17 b([)p
Fl(H)8 b Fr(])27 b(=)1205 1512 y Fe(r)p 1288 1512 79
4 v 1298 1570 a Fl(\031)p 1298 1614 59 4 v 1303 1706
a Fr(2)1367 1638 y Fl(\033)142 b Fr(and)d(V)-8 b(ar)16
b(\()p Fl(H)8 b Fr(\))27 b(=)2323 1516 y Fe(\022)2385
1638 y Fr(2)21 b Fi(\000)2565 1570 y Fl(\031)p 2565 1614
V 2570 1706 a Fr(2)2634 1516 y Fe(\023)2712 1638 y Fl(\033)2771
1596 y Fk(2)2810 1638 y Fl(:)840 b Fr(\(17\))-19 2039
y(T)-8 b(o)38 b(\014nd)g(the)g(cross-trac)m(k)h(correlation)d(width)i
Fl(s)p Fr(,)h(w)m(e)f(use)h(the)f(follo)m(wing)d(relationship)h(b)s(et)
m(w)m(een)k(the)-165 2205 y(magnetization)30 b(v)-5 b(ariance)32
b Fl(\033)906 2220 y Fj(M)985 2205 y Fr(\()p Fl(x)p Fr(\))h(and)g(the)g
(magnetization)d(pro\014le)i Fl(M)10 b Fr(\()p Fl(x)p
Fr(\))33 b([23])1234 2505 y Fl(\033)1293 2464 y Fk(2)1289
2530 y Fj(M)1369 2505 y Fr(\()p Fl(x)p Fr(\))28 b(=)1706
2438 y Fl(s)p 1641 2482 177 4 v 1641 2574 a(T)14 b(W)1844
2359 y Fe(")1893 2505 y Fr(1)22 b Fi(\000)2073 2438 y
Fl(M)2177 2402 y Fk(2)2217 2438 y Fr(\()p Fl(x)p Fr(\))p
2073 2482 276 4 v 2139 2574 a Fl(M)2243 2545 y Fk(2)2233
2598 y Fj(r)2359 2359 y Fe(#)2424 2505 y Fl(:)1226 b
Fr(\(18\))-165 2801 y(The)33 b(magnetization)d(v)-5 b(ariance)32
b(is)g(de\014ned)i(as)986 3084 y Fl(\033)1045 3043 y
Fk(2)1041 3109 y Fj(M)1121 3084 y Fr(\()p Fl(x)p Fr(\))83
b(=)1552 3017 y(1)p 1504 3061 145 4 v 1504 3152 a Fl(M)1608
3124 y Fk(2)1598 3177 y Fj(r)1658 3084 y Fr(E)1741 2988
y Fe(h)1780 3084 y Fr(\()28 b Fl(m)p Fr(\()p Fl(x)p Fr(\))23
b Fi(\000)f Fr(E)17 b([)p Fl(m)p Fr(\()p Fl(x)p Fr(\)])29
b(\))2604 3036 y Fk(2)2643 2988 y Fe(i)1335 3342 y Fr(=)1552
3274 y(1)p 1504 3319 V 1504 3410 a Fl(M)1608 3381 y Fk(2)1598
3435 y Fj(r)1658 3342 y Fr(E)1741 3245 y Fe(h)1780 3342
y Fr(\()f Fl(m)p Fr(\()p Fl(x)p Fr(\))23 b Fi(\000)f
Fl(M)10 b Fr(\()p Fl(x)p Fr(\))29 b(\))2486 3293 y Fk(2)2525
3245 y Fe(i)2581 3342 y Fl(:)1069 b Fr(\(19\))-165 3640
y(W)-8 b(e)33 b(obtain)e(the)i(empirical)d(magnetization)g(v)-5
b(ariance)37 b(^)-54 b Fl(\033)1972 3604 y Fk(2)1968
3665 y Fj(M)2047 3640 y Fr(\()p Fl(x)p Fr(\))33 b(from)f(measuremen)m
(ts)h(as)1115 3950 y(^)-54 b Fl(\033)1169 3909 y Fk(2)1165
3975 y Fj(M)1244 3950 y Fr(\()p Fl(x)p Fr(\))28 b(=)1566
3883 y(1)p 1517 3927 147 4 v 1517 4019 a(499)1697 3843
y Fk(500)1690 3867 y Fe(X)1693 4050 y Fj(i)p Fk(=1)1826
3950 y Fr([)p Fl(M)1947 3965 y Fj(i)1976 3950 y Fr(\()p
Fl(x)p Fr(\))22 b Fi(\000)h Fl(M)10 b Fr(\()p Fl(x)p
Fr(\)])2492 3902 y Fk(2)2548 3950 y Fl(:)1102 b Fr(\(20\))-165
4263 y(The)34 b(plot)e(of)38 b(^)-54 b Fl(\033)408 4227
y Fk(2)404 4288 y Fj(M)517 4263 y Fr(v)m(ersus)35 b Fl(M)10
b Fr(\()p Fl(x)p Fr(\))35 b(is)e(giv)m(en)g(in)g(Figure)f(6)h(as)h(the)
f(solid)f(line.)45 b(The)34 b(dotted)g(line)e(in)g(Figure)h(6)-165
4429 y(is)g(obtained)g(b)m(y)i(least-squares)f(\014tting)f(a)g(parab)s
(ola)f(of)h(the)h(form)f(in)f(\(18\))h(to)h(equation)f(\(20\).)46
b(The)35 b(v)-5 b(alue)-165 4594 y(for)32 b(the)h(cross-trac)m(k)h
(correlation)c(width)j(that)f(pro)m(vides)h(the)g(\014t)g(is)1568
4878 y Fl(s)28 b Fr(=)g(146)p Fl(:)p Fr(86)2018 4860
y(\027)2018 4878 y(A)o Fl(:)1560 b Fr(\(21\))p eop
13 12 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1140 b Fr(xiii)-165 289 y(Substituting)34 b(\(21\))h(and)h(\(17\))f(in)
m(to)g(equation)g(\(13\))g(of)g(Corollary)f(2.1,)i(with)f
Fl(\033)i Fr(=)c(460)3127 271 y(\027)3127 289 y(A,)i(w)m(e)h(obtain)f
(the)-165 454 y(v)m(ertex)f(angle)1192 749 y Fl(\022)d
Fr(=)c(2atan)1626 603 y Fe(")1739 682 y Fl(s)c Fi(\001)e
Fr(E)c([)p Fl(H)8 b Fr(])p 1685 726 454 4 v 1685 818
a(2)21 b Fi(\001)h Fr(V)-8 b(ar)17 b(\()p Fl(H)8 b Fr(\))2148
603 y Fe(#)2224 749 y Fi(\031)28 b Fr(50)2427 708 y Fd(\016)2466
749 y Fl(:)1184 b Fr(\(22\))-19 1168 y(With)41 b(the)h(triangle)d
(heigh)m(ts)j(p)s(df)f(in)g(\(16\))f(and)i(the)g(v)m(ertex)h(angle)d
(in)h(\(22\),)i(w)m(e)g(generated)f(50)p Fl(;)17 b Fr(000)-165
1333 y(indep)s(enden)m(t)42 b(transitions)e(with)h(the)g(TZ-ZT)g(mo)s
(del.)67 b(W)-8 b(e)42 b(next)g(mak)m(e)f(a)g(statistical)e(comparison)
h(b)s(e-)-165 1499 y(t)m(w)m(een)c(the)f(transitions)f(created)i(b)m(y)
f(the)g(micromagnetic)d(mo)s(del)h(and)i(those)h(created)f(with)g(the)g
(TZ-ZT)-165 1664 y(mo)s(del.)59 b(Figure)38 b(7)g(sho)m(ws)i(a)e(v)m
(ery)i(go)s(o)s(d)d(agreemen)m(t)i(b)s(et)m(w)m(een)h(the)f(a)m(v)m
(erage)h(transition)d(pro\014les)h(of)g(the)-165 1829
y(micromagnetic)22 b(mo)s(del)i(and)i(the)g(TZ-ZT)f(mo)s(del.)39
b(In)26 b(Figure)e(8,)j(w)m(e)f(plotted)f(the)h(normalized)e
(histograms)-165 1995 y(\(empirical)h(p)s(dfs\))j(of)f(the)h(p)s
(osition)e(jitter)h(for)g(the)i(micromagnetic)c(mo)s(del)h(and)i(the)g
(TZ-ZT)f(mo)s(del.)41 b(Here)-165 2160 y(w)m(e)33 b(see)h(a)f(v)m(ery)h
(go)s(o)s(d)e(agreemen)m(t)h(as)g(w)m(ell.)43 b(While)32
b(the)h(TZ-ZT)f(mo)s(del)f(pro)m(vides)j(go)s(o)s(d)d(matc)m(hes)j(for)
e(the)-165 2326 y(a)m(v)m(erage)38 b(transition)e(pro\014le)h(and)h
(jitter)f(noise,)i(w)m(e)g(see)f(the)g(limitations)c(of)j(the)h(TZ-ZT)f
(mo)s(del)f(in)h(Fig-)-165 2491 y(ure)c(9)h(where)g(w)m(e)h(plotted)e
(the)g(normalized)f(histograms)g(of)h(the)h(transition)e(slop)s(es.)46
b(The)34 b(TZ-ZT)f(mo)s(del)-165 2656 y(underestimates)e(the)g(v)-5
b(ariance)31 b(of)f(the)i(transition)d(slop)s(es)i(b)m(y)h(ab)s(out)e
(30\045.)43 b(W)-8 b(e)31 b(b)s(eliev)m(e)g(that)g(the)g(reason)-165
2822 y(for)e(this)h(is)g(that)g(TZ-ZT)g(mo)s(dels)f(a)h(p)s(erfect)h
(step)g(transition)e(across)i(the)f(zig-zag)f(b)s(oundary)-8
b(,)31 b(whereas)h(in)-165 2987 y(real)f(media,)h(the)h(magnetization)d
(rotates)i(across)i(the)f(w)m(all)e(with)h(some)h(\014nite)f(w)m(all)f
(width.)-165 3394 y Fq(4.2)135 b(Isotropic)46 b(thin)e(\014lm)h(medium)
-165 3742 y Fr(W)-8 b(e)33 b(sim)m(ulated)e(an)i(isotropic)e(medium)h
(\(O.R.=)27 b(1)p Fl(:)p Fr(0\))33 b(with)f(the)h(follo)m(wing)d(c)m
(haracteristics)j(\(same)g(as)g(for)-165 3907 y(the)g(orien)m(ted)h
(medium\):)43 b Fl(\016)33 b Fr(=)28 b(250)1159 3889
y(\027)1159 3907 y(A,)33 b Fl(H)1373 3922 y Fj(c)1437
3907 y Fr(=)28 b(1700Oe,)33 b Fl(M)2010 3922 y Fj(r)2077
3907 y Fr(=)c(600em)m(u)p Fl(=)p Fr(cm)2679 3871 y Fk(3)2717
3907 y Fr(.)46 b(This)33 b(w)m(as)h(ac)m(hiev)m(ed)h(at)e(the)-165
4072 y(exp)s(ense)e(of)d(increasing)g(the)h(saturation)f(magnetization)
f(of)h(the)h(isotropic)f(medium)f(b)m(y)j(ab)s(out)e(16\045)h(with)-165
4238 y(resp)s(ect)k(to)g(the)g(orien)m(ted)f(medium.)-19
4521 y(F)-8 b(ollo)m(wing)31 b(the)k(same)f(pro)s(cedure)i(as)e(for)g
(the)h(isotropic)e(medium,)g(w)m(e)j(found)e(the)h(a)m(v)m(erage)g
(magneti-)-165 4687 y(zation)c(pro\014le)h(for)g(the)h(isotropic)f
(medium)f(to)h(b)s(e)1199 4914 y Fl(M)10 b Fr(\()p Fl(x)p
Fr(\))p 1199 4959 237 4 v 1250 5050 a Fl(M)1344 5065
y Fj(r)1472 4982 y Fi(\031)28 b Fl(M)1671 4997 y Fj(a)1713
4982 y Fr(\()p Fl(x)p Fr(\))g(=)g(erf)2111 4836 y Fe( )2254
4914 y Fl(x)p 2186 4959 191 4 v 2186 5058 a(\033)2245
4976 y Fi(p)p 2328 4976 49 4 v 82 x Fr(2)2387 4836 y
Fe(!)2469 4982 y Fl(;)1181 b Fr(\(23\))p eop
14 13 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1142 b Fr(xiv)-165 289 y(with)32 b Fl(\033)g Fr(=)27
b(530)394 271 y(\027)394 289 y(A.)32 b(The)i(triangle)c(heigh)m(ts)j(p)
s(df)g(is)f(then)782 594 y Fl(f)830 609 y Fj(H)897 594
y Fr(\()p Fl(h)p Fr(\))c(=)f Fi(\000)1247 527 y Fl(M)1351
491 y Fd(00)1341 551 y Fj(a)1395 527 y Fr(\()p Fl(h)p
Fr(\))p 1247 571 280 4 v 1256 663 a Fl(M)1360 634 y Fd(0)1350
687 y Fj(a)1393 663 y Fr(\(0\))1565 594 y(=)1668 448
y Fe(\()1805 495 y Fj(h)p 1787 511 78 4 v 1787 568 a(\033)1829
549 y Fa(2)1874 534 y Fr(exp)2040 438 y Fe(\020)2089
534 y Fi(\000)2195 495 y Fj(h)2236 471 y Fa(2)p 2177
511 113 4 v 2177 568 a Fk(2)p Fj(\033)2254 549 y Fa(2)2299
438 y Fe(\021)2570 534 y Fl(h)h Fi(\025)g Fr(0)1777 668
y(0)138 b Fl(h)28 b(<)f Fr(0)2876 594 y Fl(:)774 b Fr(\(24\))-165
900 y(Using)30 b(the)h(least-squares)g(parab)s(ola-\014tting)c(pro)s
(cedure,)32 b(w)m(e)g(\014nd)f(the)g(cross-trac)m(k)h(correlation)c
(width)j(to)-165 1065 y(b)s(e)1568 1349 y Fl(s)d Fr(=)g(165)p
Fl(:)p Fr(76)2018 1331 y(\027)2018 1349 y(A)o Fl(:)1560
b Fr(\(25\))-165 1632 y(Figure)28 b(10)h(sho)m(ws)i(the)f(plots)f(of)g
(the)g(empirical)e(magnetization)g(v)-5 b(ariance)29
b(\(solid)f(line\))g(and)h(the)h(parab)s(ola)-165 1797
y(\014t)i(\(dotted)h(line\))e(for)h(the)h(isotropic)f(medium.)41
b(The)34 b(v)m(ertex)g(angle)e(obtained)g(with)g(\(24\))g(and)h(\(25\))
f(is)1192 2098 y Fl(\022)f Fr(=)c(2atan)1626 1952 y Fe(")1739
2031 y Fl(s)c Fi(\001)e Fr(E)c([)p Fl(H)8 b Fr(])p 1685
2075 454 4 v 1685 2167 a(2)21 b Fi(\001)h Fr(V)-8 b(ar)17
b(\()p Fl(H)8 b Fr(\))2148 1952 y Fe(#)2224 2098 y Fi(\031)28
b Fr(49)2427 2057 y Fd(\016)2466 2098 y Fl(:)1184 b Fr(\(26\))-19
2517 y(With)42 b(the)i(TZ-ZT)e(de\014ning)h(quan)m(tities)g(giv)m(en)g
(in)f(\(24\))g(and)h(\(26\),)i(w)m(e)f(created)g(50)p
Fl(;)17 b Fr(000)42 b(indep)s(en-)-165 2682 y(den)m(t)f(transitions)d
(using)i(the)g(TZ-ZT)g(mo)s(del)e(and)i(compared)g(their)g(statistics)f
(to)h(the)g(micromagnetic)-165 2848 y(transitions.)68
b(The)42 b(a)m(v)m(erage)h(magnetization)38 b(pro\014le)j(comparison)f
(is)h(sho)m(wn)i(in)d(Figure)h(11.)69 b(The)42 b(nor-)-165
3013 y(malized)34 b(jitter)h(histograms)g(are)i(compared)f(in)g(Figure)
f(12.)54 b(As)37 b(in)f(the)h(case)g(of)f(the)g(orien)m(ted)h(medium,)
-165 3178 y(w)m(e)k(see)h(that)e(for)g(the)h(isotropic)e(medium,)h(the)
h(TZ-ZT)f(mo)s(del)f(sho)m(ws)j(v)m(ery)g(go)s(o)s(d)d(agreemen)m(t)i
(for)f(the)-165 3344 y(a)m(v)m(erage)33 b(transition)d(pro\014le)i(and)
h(jitter)e(noise)h(but)g(underestimates)h(the)g(transition)d(slop)s(e)i
(v)-5 b(ariance,)32 b(see)-165 3509 y(Figure)f(13.)-165
3960 y Fm(5)161 b(Conclusion)-165 4342 y Fr(In)39 b(this)f(pap)s(er,)j
(w)m(e)f(pro)m(vided)f(analytic)f(to)s(ols)g(for)g(extracting)h(the)g
(de\014ning)g(quan)m(tities)g(for)f(sto)s(c)m(hastic)-165
4508 y(zig-zag)f(transition)g(noise)i(mo)s(dels)f(in)g(longitudinal)d
(magnetic)j(recording.)62 b(The)40 b(particular)d(mo)s(del)g(w)m(e)-165
4673 y(used)c(w)m(as)h(the)f(triangle)e(zig-zag)g(transition)g
(\(TZ-ZT\))h(mo)s(del.)42 b(W)-8 b(e)33 b(deriv)m(ed)g(a)g
(relationship)d(linking)h(the)-165 4838 y(p)s(df)e(of)g(the)h(triangle)
e(heigh)m(ts)i(to)f(an)h(a)m(v)m(erage)h(transition)d(pro\014le.)42
b(W)-8 b(e)30 b(determined)f(the)h(zig-zag)f(angle)f(b)m(y)-165
5004 y(matc)m(hing)35 b(the)h(cross-trac)m(k)i(correlation)c(width)i
(of)g(the)h(TZ-ZT)f(mo)s(del)e(to)i(the)h(cross-trac)m(k)g(correlation)
p eop
15 14 bop -133 -102 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1169 b Fr(xv)-165 289 y(width)30 b(of)h(the)g(real)g(media.)41
b(W)-8 b(e)32 b(also)e(pro)m(vide)h(an)g(alternativ)m(e)f(in)m
(terpretation)g(of)h(the)g(cross-trac)m(k)i(corre-)-165
454 y(lation)h(width,)j(linking)d(this)i(quan)m(tit)m(y)h(to)f(the)h
(statistics)e(\(mean)h(and)h(v)-5 b(ariance\))35 b(of)h(the)h
(magnetization)-165 619 y(cluster)g(sizes.)58 b(Through)38
b(t)m(w)m(o)g(examples,)g(one)f(for)g(orien)m(ted)g(media)f(and)h(one)h
(for)e(isotropic)g(media,)h(w)m(e)-165 785 y(demonstrated)c(ho)m(w)g
(these)h(results)f(can)f(b)s(e)h(used)h(in)e(statistical)e(media)i
(noise)g(mo)s(deling.)-19 1068 y(With)41 b(the)h(analytic)f(to)s(ols)f
(that)i(w)m(e)h(ha)m(v)m(e)g(presen)m(ted,)k(the)42 b(sto)s(c)m(hastic)
g(zig-zag)e(transition)g(mo)s(dels)-165 1233 y(\(particularly)34
b(the)j(TZ-ZT)f(mo)s(del\))f(ha)m(v)m(e)j(b)s(een)g(made)e(m)m(uc)m(h)h
(easier)g(to)f(use.)57 b(Although)36 b(not)g(explicitly)-165
1399 y(discussed)23 b(in)e(this)h(pap)s(er,)i(extensions)f(of)e(the)i
(mo)s(del)d(to)h(incorp)s(orate)g(nonlinear)f(e\013ects)k(suc)m(h)f(as)
f(nonlinear)-165 1564 y(transition)36 b(shift)i(and)g(p)s(ercolation)f
(e\013ects)i(are)f(also)g(relativ)m(ely)f(easy)i(to)f(incorp)s(orate,)h
(see)g([24,)f(19])g(for)-165 1730 y(details.)i(The)26
b(sto)s(c)m(hastic)f(zig-zag)f(transition)f(mo)s(dels)h(are)h(a)g(m)m
(uc)m(h)h(faster)f(alternativ)m(e)f(to)h(micromagnetic)-165
1895 y(mo)s(deling)36 b(\(for)j(example,)i(TZ-ZT)e(mo)s(deling)d(is)j
(appro)m(ximately)f(4)h(orders)h(of)f(magnitude)f(faster)h(than)-165
2060 y(micromagnetic)27 b(mo)s(deling\).)40 b(This)30
b(mak)m(es)g(them)g(v)m(ery)h(attractiv)m(e)f(in)f(statistical)f
(studies)i(lik)m(e)g(error)f(rate)-165 2226 y(predictions,)41
b(where)g(thousands)h(of)d(statistically)f(indep)s(enden)m(t)j
(transitions)e(need)i(to)e(b)s(e)i(created)f(in)g(a)-165
2391 y(short)32 b(time)g(p)s(erio)s(d.)-165 2842 y Fm(A)161
b(Pro)t(ofs)66 b(of)h(relationships)g(b)t(et)l(w)l(een)c(magnetization)
j(c)l(har-)118 3024 y(acteristics)54 b(and)f(zig-zag)h(transition)g
(statistics)-165 3407 y Fo(Pro)s(of)29 b(of)h(Theorem)f(1.)41
b Fr(Consider)27 b(t)m(w)m(o)f(adjacen)m(t)g(triangles)f(of)g(opp)s
(osite)g(orien)m(tation,)h(as)g(in)f(Figure)g(14.)-165
3572 y(The)38 b(quan)m(tities)g Fl(b)537 3587 y Fk(1)615
3572 y Fr(and)g Fl(h)866 3587 y Fk(1)943 3572 y Fr(are)g(the)g(base)h
(and)e(heigh)m(t)h(of)f(the)i(p)s(ositiv)m(ely)d(orien)m(ted)i
(triangle,)g(while)e Fl(b)3810 3587 y Fk(2)-165 3737
y Fr(and)41 b Fl(h)89 3752 y Fk(2)170 3737 y Fr(corresp)s(ond)h(to)f
(the)h(negativ)m(ely)f(orien)m(ted)g(triangle.)68 b(Since)41
b(the)h(v)m(ertex)h(angle)d Fl(\022)45 b Fr(is)40 b(constan)m(t,)-165
3903 y Fl(b)-124 3918 y Fj(i)-68 3903 y Fr(=)28 b(2)p
Fl(h)141 3918 y Fj(i)169 3903 y Fr(tan)320 3863 y Fj(\022)p
319 3879 36 4 v 319 3937 a Fk(2)365 3903 y Fr(,)j(for)f
Fl(i)e Fr(=)f(1)p Fl(;)17 b Fr(2.)42 b(F)-8 b(or)30 b
Fl(h)1174 3918 y Fj(i)1233 3903 y Fr(dra)m(wn)i(from)d(a)h(p)s(df)h
Fl(f)2054 3918 y Fj(H)2121 3903 y Fr(\()p Fl(h)p Fr(\),)g(it)f(follo)m
(ws)f(from)h(this)g(relationship)f(that)-165 4068 y(the)k(p)s(df)f(of)g
(the)h(samples)f Fl(b)860 4083 y Fj(i)922 4068 y Fr(is)g
Fl(f)1068 4083 y Fj(B)1128 4068 y Fr(\()p Fl(b)p Fr(\))c(=)1401
4029 y Fk(1)p 1387 4045 65 4 v 1387 4102 a Fj(K)1461
4068 y Fl(f)1509 4083 y Fj(H)1593 3972 y Fe(\020)1670
4029 y Fj(b)p 1653 4045 V 1653 4102 a(K)1727 3972 y Fe(\021)1776
4068 y Fr(,)33 b(where)h Fl(K)h Fr(=)27 b(2tan)2539 4029
y Fj(\022)p 2539 4045 36 4 v 2539 4102 a Fk(2)2584 4068
y Fr(.)-19 4351 y(The)33 b(magnetization)e(pro\014les)h(\(normalized)f
(to)h Fl(M)1902 4366 y Fj(r)1940 4351 y Fr(\))h(in)e(the)i(strip)s(es)g
(de\014ned)h(b)m(y)g Fl(b)3118 4366 y Fk(1)3190 4351
y Fr(and)f Fl(b)3421 4366 y Fk(2)3493 4351 y Fr(are)519
4727 y Fl(m)604 4742 y Fj(p)644 4727 y Fr(\()p Fl(h)738
4742 y Fk(1)778 4727 y Fl(;)17 b(x)p Fr(\))27 b(=)h Fl(m)1131
4742 y Fj(p)1171 4727 y Fr(\()p Fl(b)1250 4742 y Fk(1)1290
4727 y Fl(;)17 b(x)p Fr(\))83 b(=)1669 4503 y Fe(8)1669
4578 y(>)1669 4602 y(>)1669 4627 y(<)1669 4777 y(>)1669
4802 y(>)1669 4827 y(:)1784 4591 y Fi(\000)p Fr(1)634
b Fl(x)28 b(<)g Fr(0)1814 4688 y Fk(2)p 1794 4704 76
4 v 1794 4761 a Fj(h)1835 4770 y Fa(1)1896 4631 y Fe(\020)1945
4727 y Fl(x)23 b Fi(\000)2133 4688 y Fj(h)2174 4697 y
Fa(1)p 2133 4704 V 2153 4761 a Fk(2)2218 4631 y Fe(\021)2544
4727 y Fr(0)28 b Fi(\024)g Fl(x)g Fi(\024)g Fl(h)2970
4742 y Fk(1)1784 4861 y Fr(1)711 b Fl(x)28 b(>)g(h)2787
4876 y Fk(1)3078 4727 y Fl(;)572 b Fr(\(27\))p eop
16 15 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1142 b Fr(xvi)504 413 y Fl(m)589 428 y Fj(n)637 413 y
Fr(\()p Fl(h)731 428 y Fk(2)770 413 y Fl(;)17 b(x)p Fr(\))28
b(=)g Fl(m)1124 428 y Fj(n)1171 413 y Fr(\()p Fl(b)1250
428 y Fk(2)1290 413 y Fl(;)17 b(x)p Fr(\))83 b(=)1669
189 y Fe(8)1669 264 y(>)1669 289 y(>)1669 314 y(<)1669
463 y(>)1669 488 y(>)1669 513 y(:)1784 277 y Fi(\000)p
Fr(1)632 b Fl(x)29 b(<)e Fi(\000)p Fl(h)2862 292 y Fk(2)1814
374 y(2)p 1794 390 76 4 v 1794 447 a Fj(h)1835 456 y
Fa(2)1896 317 y Fe(\020)1945 413 y Fl(x)c Fr(+)2131 374
y Fj(h)2172 383 y Fa(2)p 2131 390 V 2151 447 a Fk(2)2216
317 y Fe(\021)2542 413 y Fi(\000)p Fl(h)2675 428 y Fk(2)2743
413 y Fi(\024)28 b Fl(x)g Fi(\024)h Fr(0)1784 547 y(1)709
b Fl(x)29 b(>)e Fr(0)3153 413 y Fl(:)497 b Fr(\(28\))-165
783 y(The)33 b(o)m(v)m(erall)f(magnetization)e(pro\014le)i(for)g(an)g
(in\014nitely)g(wide)g(trac)m(k)i(is)e(giv)m(en)g(b)m(y)i(the)f(a)m(v)m
(erage)629 1100 y Fl(M)10 b Fr(\()p Fl(x)p Fr(\))28 b(=)1006
1032 y(1)p 1006 1076 49 4 v 1006 1168 a(2)1106 966 y
Fd(1)1081 982 y Fe(Z)1087 1224 y Fk(0)1181 1100 y Fl(f)1229
1115 y Fj(\014)1276 1100 y Fr(\()p Fl(b)1355 1115 y Fk(1)1395
1100 y Fr(\))p Fl(m)1518 1115 y Fj(p)1558 1100 y Fr(\()p
Fl(b)1637 1115 y Fk(1)1677 1100 y Fl(;)17 b(x)p Fr(\)d)p
Fl(b)1909 1115 y Fk(1)1971 1100 y Fr(+)2079 1032 y(1)p
2079 1076 V 2079 1168 a(2)2179 966 y Fd(1)2154 982 y
Fe(Z)2160 1224 y Fk(0)2254 1100 y Fl(f)2302 1115 y Fj(\014)2349
1100 y Fr(\()p Fl(b)2428 1115 y Fk(2)2468 1100 y Fr(\))p
Fl(m)2591 1115 y Fj(n)2638 1100 y Fr(\()p Fl(b)2717 1115
y Fk(2)2757 1100 y Fl(;)g(x)p Fr(\)d)p Fl(b)2989 1115
y Fk(2)3029 1100 y Fl(;)621 b Fr(\(29\))-165 1433 y(where)34
b Fl(f)165 1448 y Fj(\014)212 1433 y Fr(\()p Fl(b)291
1448 y Fk(1)331 1433 y Fr(\))e(is)g(the)h(p)s(df)g(of)f(encoun)m
(tering)h(a)f(base)i Fl(b)1869 1448 y Fk(1)1941 1433
y Fr(of)e(a)h(p)s(ositiv)m(ely)e(orien)m(ted)i(triangle,)e(and)i(lik)m
(ewise)-165 1598 y(for)26 b Fl(f)26 1613 y Fj(\014)73
1598 y Fr(\()p Fl(b)152 1613 y Fk(2)192 1598 y Fr(\).)41
b(The)28 b(upfron)m(t)e(factor)g(of)1221 1559 y Fk(1)p
1221 1575 36 4 v 1221 1633 a(2)1293 1598 y Fr(in)g(\(29\))g(follo)m(ws)
f(b)s(ecause)j(the)f(p)s(ositiv)m(ely)e(and)i(negativ)m(ely)f(orien)m
(ted)-165 1764 y(triangles)31 b(are)h(equiprobable.)-19
2047 y(Note)39 b(that)f Fl(f)488 2062 y Fj(\014)536 2047
y Fr(\()p Fl(b)p Fr(\))g Fi(6)p Fr(=)g Fl(f)853 2062
y Fj(B)914 2047 y Fr(\()p Fl(b)p Fr(\),)j(since)e Fl(f)1392
2062 y Fj(B)1453 2047 y Fr(\()p Fl(b)p Fr(\))g(is)f(the)h(p)s(df)g(of)f
(the)h(triangle)e(bases)j(and)f Fl(f)3228 2062 y Fj(\014)3275
2047 y Fr(\()p Fl(b)p Fr(\))g(is)f(the)h(p)s(df)-165
2212 y(of)34 b(encoun)m(tering)h(a)f(base)h(of)f(length)g
Fl(b)h Fr(b)m(y)h(randomly)d(c)m(ho)s(osing)h(a)g(p)s(oin)m(t)g(on)g
(the)h(cross-trac)m(k)h(basis)f(line.)-165 2378 y(If)h(w)m(e)h
(randomly)e(pic)m(k)i(a)f(p)s(oin)m(t)f(on)i(the)f(basis)h(line,)f(w)m
(e)h(are)f(more)g(lik)m(ely)f(to)h(fall)e(on)j(a)f(base)h(of)e(a)i
(larger)-165 2543 y(triangle)30 b(than)j(a)f(smaller,)f(hence)j(the)f
(t)m(w)m(o)g(p)s(dfs)g(are)g(di\013eren)m(t.)43 b(Their)33
b(exact)g(relationship)e(is)1477 2827 y Fl(f)1525 2842
y Fj(\014)1573 2827 y Fr(\()p Fl(b)p Fr(\))d(=)1831 2759
y Fl(b)23 b Fi(\001)f Fl(f)1993 2774 y Fj(B)2053 2759
y Fr(\()p Fl(b)p Fr(\))p 1831 2803 340 4 v 1893 2895
a(E)17 b([)p Fl(B)5 b Fr(])2181 2827 y Fl(;)1469 b Fr(\(30\))-165
3171 y(where)33 b(E)17 b([)p Fl(B)5 b Fr(])28 b(=)471
3083 y Fd(1)471 3100 y Fe(R)473 3249 y Fk(0)550 3171
y Fl(b)22 b Fi(\001)e Fl(f)709 3186 y Fj(B)770 3171 y
Fr(\()p Fl(b)p Fr(\)d)p Fl(b)33 b Fr(is)e(the)h(mean)g(triangle)e
(base.)44 b(Equation)31 b(\(30\))h(is)f(one)h(of)f(the)i(main)d
(results)-165 3336 y(describing)24 b(the)g(parado)m(x)h(of)f(residual)f
(life)g(in)g(renew)m(al)i(theory)-8 b(,)27 b(see,)g(e.g.,)d([21,)g
(22].)41 b(In)24 b(earlier)f(w)m(ork)i([9,)g(10)o(],)-165
3502 y(this)32 b(parado)m(x)h(w)m(as)g(not)g(recognized)g(as)f(it)g(w)m
(as)h(erroneously)h(assumed)f(that)f Fl(f)2810 3517 y
Fj(\014)2857 3502 y Fr(\()p Fl(b)p Fr(\))c(=)g Fl(f)3154
3517 y Fj(B)3215 3502 y Fr(\()p Fl(b)p Fr(\).)-19 3785
y(W)-8 b(e)36 b(manipulate)d(Equation)i(\(29\))g(to)g(deriv)m(e)g
(\(1\).)52 b(Because)37 b(the)e(triangle)f(heigh)m(ts)h(p)s(df)g
Fl(f)3379 3800 y Fj(H)3447 3785 y Fr(\()p Fl(h)p Fr(\))g(is)g(the)-165
3950 y(same)28 b(for)g(b)s(oth)g(p)s(ositiv)m(ely)f(and)h(negativ)m
(ely)h(orien)m(ted)f(triangles,)g Fl(M)10 b Fr(\()p Fl(x)p
Fr(\))29 b(is)f(an)g(o)s(dd)h(function.)41 b(Therefore,)-165
4116 y(it)f(su\016ces)j(to)e(consider)h(only)e(the)i(case)g
Fl(x)h Fi(\025)g Fr(0.)69 b(Since)42 b(the)f(triangle)f(bases)i(are)f
(prop)s(ortional)e(to)i(the)-165 4281 y(triangle)30 b(heigh)m(ts)i
(with)g(the)g(same)g(constan)m(t)h(of)f(prop)s(ortionalit)m(y)d(for)i
(all)f(triangles,)h(w)m(e)i(ha)m(v)m(e)3420 4235 y Fj(b)p
Fd(\001)p Fj(f)3504 4246 y Fb(B)3556 4235 y Fk(\()p Fj(b)p
Fk(\))p 3420 4258 222 4 v 3459 4315 a(E[)o Fj(B)s Fk(])3651
4281 y Fr(d)p Fl(b)c Fr(=)-155 4400 y Fj(h)p Fd(\001)p
Fj(f)-60 4411 y Fb(H)-4 4400 y Fk(\()p Fj(h)p Fk(\))p
-155 4423 248 4 v -107 4481 a(E[)p Fj(H)5 b Fk(])102
4446 y Fr(d)p Fl(h)p Fr(.)44 b(Using)32 b(this)g(relationship)f(and)i
(substituting)f(\(30\))f(in)m(to)h(\(29\),)g(w)m(e)i(obtain)335
4794 y Fl(M)10 b Fr(\()p Fl(x)p Fr(\))84 b(=)823 4727
y(1)p 823 4771 49 4 v 823 4863 a(2)923 4661 y Fd(1)899
4677 y Fe(Z)904 4918 y Fk(0)1008 4727 y Fl(h)1064 4742
y Fk(1)1126 4727 y Fi(\001)22 b Fl(f)1224 4742 y Fj(H)1291
4727 y Fr(\()p Fl(h)1385 4742 y Fk(1)1425 4727 y Fr(\))p
1008 4771 455 4 v 1122 4863 a(E)17 b([)q Fl(H)8 b Fr(])1472
4794 y Fl(m)1557 4809 y Fj(p)1597 4794 y Fr(\()p Fl(h)1691
4809 y Fk(1)1731 4794 y Fl(;)17 b(x)p Fr(\)d)p Fl(h)1978
4809 y Fk(1)2040 4794 y Fr(+)2148 4727 y(1)p 2148 4771
49 4 v 2148 4863 a(2)2248 4661 y Fd(1)2223 4677 y Fe(Z)2229
4918 y Fk(0)2333 4727 y Fl(h)2389 4742 y Fk(2)2451 4727
y Fi(\001)k Fl(f)2548 4742 y Fj(H)2616 4727 y Fr(\()p
Fl(h)2710 4742 y Fk(2)2749 4727 y Fr(\))p 2333 4771 455
4 v 2447 4863 a(E)c([)p Fl(H)8 b Fr(])2797 4794 y Fl(m)2882
4809 y Fj(n)2929 4794 y Fr(\()p Fl(h)3023 4809 y Fk(2)3063
4794 y Fl(;)17 b(x)p Fr(\)d)p Fl(h)3310 4809 y Fk(1)3677
4794 y Fr(\(31\))p eop
17 16 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1115 b Fr(xvii)654 360 y(=)823 292 y(1)p 823 336 49 4
v 823 428 a(2)923 226 y Fd(1)899 242 y Fe(Z)904 484 y
Fk(0)1008 292 y Fl(h)22 b Fi(\001)g Fl(f)1184 307 y Fj(H)1252
292 y Fr(\()p Fl(h)p Fr(\))p 1008 336 376 4 v 1083 428
a(E)17 b([)p Fl(H)8 b Fr(])1410 360 y([)p Fl(m)1522 375
y Fj(p)1562 360 y Fr(\()p Fl(h;)17 b(x)p Fr(\))23 b(+)f
Fl(m)1999 375 y Fj(n)2046 360 y Fr(\()p Fl(h;)17 b(x)p
Fr(\)])g(d)p Fl(h:)1219 b Fr(\(32\))-165 688 y(Notice)32
b(that)g(for)g Fl(x)c Fi(\025)g Fr(0)455 987 y Fl(m)540
1002 y Fj(n)587 987 y Fr(\()p Fl(h;)17 b(x)p Fr(\))28
b(=)f(1)139 b(and)f Fl(m)1517 1002 y Fj(p)1557 987 y
Fr(\()p Fl(h;)17 b(x)p Fr(\))28 b(=)1920 841 y Fe(\()2041
888 y Fk(2)p 2038 904 41 4 v 2038 961 a Fj(h)2105 831
y Fe(\020)2155 927 y Fl(x)22 b Fi(\000)2342 888 y Fj(h)p
2342 904 V 2345 961 a Fk(2)2392 831 y Fe(\021)2719 927
y Fr(for)55 b Fl(h)27 b Fi(\025)i Fl(x)2028 1061 y Fr(1)642
b(for)55 b Fl(h)27 b(<)h(x)3203 987 y(:)447 b Fr(\(33\))-165
1298 y(Using)32 b(\(33\))g(w)m(e)h(rewrite)g(\(32\))f(as)164
1620 y Fl(M)10 b Fr(\()p Fl(x)p Fr(\))85 b(=)652 1553
y(1)p 652 1597 49 4 v 652 1689 a(2)768 1487 y Fj(x)728
1503 y Fe(Z)733 1744 y Fk(0)837 1553 y Fl(h)23 b Fi(\001)e
Fl(f)1013 1568 y Fj(H)1081 1553 y Fr(\()p Fl(h)p Fr(\))p
837 1597 376 4 v 912 1689 a(E)c([)p Fl(H)8 b Fr(])1223
1620 y(d)p Fl(h)22 b Fr(+)1463 1553 y(1)p 1463 1597 49
4 v 1463 1689 a(2)1563 1487 y Fd(1)1539 1503 y Fe(Z)1542
1738 y Fj(x)1648 1553 y Fl(h)g Fi(\001)g Fl(f)1824 1568
y Fj(H)1892 1553 y Fr(\()p Fl(h)p Fr(\))p 1648 1597 376
4 v 1723 1689 a(E)17 b([)p Fl(H)8 b Fr(])2056 1620 y
Fi(\001)2119 1553 y Fr(2)p 2115 1597 57 4 v 2115 1689
a Fl(h)2198 1474 y Fe( )2264 1620 y Fl(x)22 b Fi(\000)2451
1553 y Fl(h)p 2451 1597 V 2455 1689 a Fr(2)2517 1474
y Fe(!)2599 1620 y Fr(d)p Fl(h)h Fr(+)2840 1553 y(1)p
2840 1597 49 4 v 2840 1689 a(2)2940 1487 y Fd(1)2915
1503 y Fe(Z)2921 1744 y Fk(0)3025 1553 y Fl(h)f Fi(\001)g
Fl(f)3201 1568 y Fj(H)3268 1553 y Fr(\()p Fl(h)p Fr(\))p
3025 1597 376 4 v 3100 1689 a(E)17 b([)p Fl(H)8 b Fr(])3410
1620 y(d)p Fl(h)157 b Fr(\(34\))484 1957 y(=)682 1823
y Fj(x)642 1839 y Fe(Z)648 2081 y Fk(0)752 1889 y Fl(h)22
b Fi(\001)g Fl(f)928 1904 y Fj(H)995 1889 y Fr(\()p Fl(h)p
Fr(\))p 752 1933 V 827 2025 a(E)17 b([)p Fl(H)8 b Fr(])1137
1957 y(d)p Fl(h)23 b Fr(+)f Fl(x)1465 1823 y Fd(1)1440
1839 y Fe(Z)1443 2074 y Fj(x)1550 1889 y Fl(f)1598 1904
y Fj(H)1665 1889 y Fr(\()p Fl(h)p Fr(\))p 1550 1933 248
4 v 1561 2025 a(E)17 b([)o Fl(H)8 b Fr(])1807 1957 y(d)p
Fl(h:)1733 b Fr(\(35\))-165 2290 y(The)33 b(\014rst)g(deriv)-5
b(ativ)m(e)32 b(of)g(\(35\))g(and)h(its)f(v)-5 b(alue)32
b(at)g(zero)h(\(the)g(magnetization)d(pro\014le)i(slop)s(e\))g(are)863
2612 y Fl(M)967 2571 y Fd(0)991 2612 y Fr(\()p Fl(x)p
Fr(\))c(=)1279 2478 y Fd(1)1254 2495 y Fe(Z)1257 2729
y Fj(x)1364 2545 y Fl(f)1412 2560 y Fj(H)1479 2545 y
Fr(\()p Fl(h)p Fr(\))p 1364 2589 V 1375 2680 a(E)17 b([)o
Fl(H)8 b Fr(])1621 2612 y(d)p Fl(h)139 b Fr(and)f Fl(M)2269
2571 y Fd(0)2293 2612 y Fr(\(0\))27 b(=)2647 2545 y(1)p
2559 2589 226 4 v 2559 2680 a(E)17 b([)p Fl(H)8 b Fr(])2795
2612 y Fl(;)855 b Fr(\(36\))-165 2988 y(since)82 2901
y Fd(1)81 2917 y Fe(R)83 3066 y Fk(0)161 2988 y Fl(f)209
3003 y Fj(H)276 2988 y Fr(\()p Fl(h)p Fr(\)d)p Fl(h)28
b Fr(=)g(1.)43 b(Similarly)29 b(w)m(e)k(obtain)f(the)h(second)h(deriv)
-5 b(ativ)m(e)1452 3343 y Fl(M)1556 3302 y Fd(00)1599
3343 y Fr(\()p Fl(x)p Fr(\))28 b(=)g Fi(\000)1949 3276
y Fl(f)1997 3291 y Fj(H)2065 3276 y Fr(\()p Fl(x)p Fr(\))p
1949 3320 247 4 v 1959 3411 a(E)17 b([)q Fl(H)8 b Fr(])2206
3343 y Fl(:)1444 b Fr(\(37\))-165 3660 y(Substituting)42
b(\(36\))g(in)m(to)g(\(37\))h(and)g(rearranging)e(the)j(equation,)h(w)m
(e)f(get)f Fl(f)2767 3675 y Fj(H)2835 3660 y Fr(\()p
Fl(x)p Fr(\))i(=)h Fi(\000)3220 3614 y Fj(M)3295 3590
y Fc(00)3335 3614 y Fk(\()p Fj(x)p Fk(\))p 3220 3637
211 4 v 3231 3695 a Fj(M)3306 3676 y Fc(0)3329 3695 y
Fk(\(0\))3440 3660 y Fr(,)g(for)c Fl(x)k Fi(\025)-165
3826 y Fr(0.)65 b(Since)40 b(triangle)e(heigh)m(ts)i(are)g(nonnegativ)m
(e)h(lengths,)h(the)e(p)s(df)g Fl(f)2441 3841 y Fj(H)2508
3826 y Fr(\()p Fl(h)p Fr(\))g(has)h(to)e(b)s(e)h(zero)h(for)e(negativ)m
(e)-165 3991 y(argumen)m(ts)32 b Fl(h)p Fr(.)44 b(Therefore,)34
b(the)f(last)f(relationship)e(leads)j(directly)f(to)g(\(1\).)43
b(QED)-165 4274 y Fo(Pro)s(of)34 b(of)h(Theorem)g(2.)42
b Fr(Assume,)32 b(without)e(loss)g(of)g(generalit)m(y)-8
b(,)30 b(that)g Fl(M)2678 4289 y Fj(r)2744 4274 y Fr(=)d(1.)43
b(Let)30 b Fl(m)3223 4289 y Fk(0)3263 4274 y Fr(\()p
Fl(z)t Fr(\))e(=)g Fl(m)p Fr(\(0)p Fl(;)17 b(z)t Fr(\).)-165
4440 y(The)30 b(function)g Fl(m)497 4455 y Fk(0)536 4440
y Fr(\()p Fl(z)t Fr(\))h(is)e(a)h(random)f(renew)m(al)h(pro)s(cess)h
([21)o(])f(that)g(tak)m(es)h(v)-5 b(alues)30 b(of)f(either)h
Fi(\000)p Fr(1)g(or)f(1,)h(whose)-165 4605 y(realization)40
b(is)j(depicted)h(in)e(Figure)h(15.)75 b(The)44 b(lengths)f(b)s(et)m(w)
m(een)i(p)s(oin)m(ts)e(where)i Fl(m)3102 4620 y Fk(0)3141
4605 y Fr(\()p Fl(z)t Fr(\))f(c)m(hanges)h(sign)-165
4771 y(are)35 b(the)g(\\in)m(terarriv)-5 b(al)32 b(times")i(\(in)m
(terswitc)m(hing)g(in)m(terv)-5 b(als\).)50 b(They)36
b(are)f(equal)g(to)g(triangle)e(bases)j(in)e(the)-165
4936 y(TZ-ZT)25 b(mo)s(del)g(b)s(ecause)j(the)e(basis)h(line)d
Fl(x)29 b Fr(=)e(0)f(is)g(where)h(the)g(zig-zag)e(triangles)g(are)h
(placed.)41 b(If)26 b(a)g(random)-165 5101 y(triangle)37
b(heigh)m(t)i(is)g Fl(H)8 b Fr(,)40 b(then)g(the)f(corresp)s(onding)h
(random)e(triangle)f(base)j(is)f Fl(B)44 b Fr(=)39 b(2)p
Fl(H)8 b Fr(tan)3384 5005 y Fe(\020)3443 5062 y Fj(\022)p
3443 5078 36 4 v 3443 5136 a Fk(2)3488 5005 y Fe(\021)3538
5101 y Fr(.)63 b(Since)p eop
18 17 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1088 b Fr(xviii)-165 289 y(in)31 b(the)h(TZ-ZT)f(mo)s(del)f(the)i
(triangle)e(heigh)m(ts)i(are)g(indep)s(enden)m(t)h(random)e(v)-5
b(ariables,)31 b(the)h(in)m(terswitc)m(hing)-165 454
y(in)m(terv)-5 b(als)27 b(\(the)i(triangle)e(bases\))j
Fl(B)j Fr(are)c(also)f(indep)s(enden)m(t.)43 b(F)-8 b(urthermore,)29
b(the)g(in)m(terswitc)m(hing)f(in)m(terv)-5 b(als)-165
619 y Fl(B)38 b Fr(are)c(iden)m(tically)d(distributed)i(with)h(a)f(p)s
(df)g Fl(f)1611 634 y Fj(B)1672 619 y Fr(\()p Fl(b)p
Fr(\))d(=)1948 580 y Fk(1)p 1934 596 65 4 v 1934 654
a Fj(K)2008 619 y Fl(f)2056 634 y Fj(H)2140 523 y Fe(\020)2217
580 y Fj(b)p 2200 596 V 2200 654 a(K)2274 523 y Fe(\021)2323
619 y Fr(,)k(where)h Fl(K)i Fr(=)29 b(2tan)3098 523 y
Fe(\020)3158 580 y Fj(\022)p 3158 596 36 4 v 3158 654
a Fk(2)3203 523 y Fe(\021)3252 619 y Fr(,)34 b(and)g
Fl(f)3552 634 y Fj(H)3619 619 y Fr(\()p Fl(h)p Fr(\))g(is)-165
785 y(the)f(p)s(df)f(of)g(the)h(triangle)e(heigh)m(ts.)-19
1068 y(According)i(to)h(\(5\),)g(the)g(cross-trac)m(k)h(correlation)d
(width)h Fl(s)2223 1083 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)2488
1068 y Fr(is)33 b(the)i(in)m(tegral)d(of)h(the)h(cross-trac)m(k)-165
1233 y(auto)s(correlation)d(function)i Fl(r)943 1248
y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)1174 1233 y Fr(\()p
Fl(Z)f Fr(\),)34 b(whic)m(h)g(is)f(the)h(auto)s(correlation)d(of)i(the)
h(cross-trac)m(k)g(magnetiza-)-165 1399 y(tion)20 b Fl(m)109
1414 y Fk(0)149 1399 y Fr(\()p Fl(z)t Fr(\),)25 b(i.e.,)e
Fl(r)545 1414 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)777 1399
y Fr(\()p Fl(Z)f Fr(\))27 b(=)h(E)17 b([)p Fl(m)1253
1414 y Fk(0)1293 1399 y Fr(\()p Fl(z)t Fr(\))p Fl(m)1503
1414 y Fk(0)1543 1399 y Fr(\()p Fl(z)27 b Fr(+)22 b Fl(Z)7
b Fr(\)].)40 b(De\014ne)22 b Fi(R)2332 1414 y Fb(T)8
b(Z)s Fc(\000)p Fb(Z)s(T)2564 1399 y Fr(\()p Fl(f)j Fr(\))27
b(=)2919 1311 y Fd(1)2918 1328 y Fe(R)2821 1479 y Fj(Z)5
b Fk(=)p Fd(\0001)3079 1399 y Fl(r)3123 1414 y Fb(T)j(Z)s
Fc(\000)p Fb(Z)s(T)3354 1399 y Fr(\()p Fl(Z)f Fr(\)e)3547
1363 y Fd(\000)p Fj(j)t Fk(2)p Fj(\031)r(f)g(Z)3811 1399
y Fr(d)p Fl(Z)-165 1578 y Fr(as)34 b(the)h(F)-8 b(ourier)33
b(transform)g(of)h Fl(r)1071 1593 y Fb(T)8 b(Z)s Fc(\000)p
Fb(Z)s(T)1302 1578 y Fr(\()p Fl(Z)f Fr(\).)48 b(F)-8
b(rom)33 b(the)i(prop)s(erties)f(of)f(the)i(F)-8 b(ourier)33
b(transform,)h(w)m(e)h(ha)m(v)m(e)-165 1743 y Fl(s)-119
1758 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)140 1743 y Fr(=)27
b Fi(R)327 1758 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)559
1743 y Fr(\(0\).)43 b(W)-8 b(e)33 b(will)d(use)k(this)e(to)g(pro)m(v)m
(e)i(Theorem)f(2.)-19 2026 y(The)g(cross)h(trac)m(k)f(correlation)e
(function)h(is)g(equal)h(to)f(\(w)m(e)h(are)g(assuming)f
Fl(M)2877 2041 y Fj(r)2943 2026 y Fr(=)27 b(1\))766 2310
y Fl(r)810 2325 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)1041
2310 y Fr(\()p Fl(Z)f Fr(\))27 b(=)h(E)17 b([)p Fl(m)1517
2325 y Fk(0)1557 2310 y Fr(\()p Fl(z)t Fr(\))p Fl(m)1767
2325 y Fk(0)1807 2310 y Fr(\()p Fl(z)27 b Fr(+)22 b Fl(Z)7
b Fr(\)])28 b(=)f Fl(\031)2340 2325 y Fj(e)2377 2310
y Fr(\()p Fl(Z)7 b Fr(\))22 b Fi(\000)h Fl(\031)2704
2325 y Fj(o)2743 2310 y Fr(\()p Fl(Z)7 b Fr(\))p Fl(:)757
b Fr(\(38\))-165 2593 y(Here,)29 b Fl(\031)143 2608 y
Fj(e)180 2593 y Fr(\()p Fl(Z)7 b Fr(\))28 b(is)f(the)h(probabilit)m(y)e
(that)h(an)h Fp(even)f Fr(n)m(um)m(b)s(er)h(of)f(switc)m(hes)i(o)s
(ccurs)g(b)s(et)m(w)m(een)g(the)g(p)s(oin)m(ts)e Fl(z)32
b Fr(and)-165 2759 y Fl(z)9 b Fr(+)c Fl(Z)i Fr(,)26 b(for)e(an)m(y)h
Fl(z)t Fr(.)41 b(Similarly)-8 b(,)22 b Fl(\031)1013 2774
y Fj(o)1051 2759 y Fr(\()p Fl(Z)7 b Fr(\))24 b(is)g(the)h(probabilit)m
(y)d(of)h(an)h Fp(o)-5 b(dd)24 b Fr(n)m(um)m(b)s(er)h(of)e(switc)m(hes)
j(o)s(ccurring)e(in)f(the)-165 2924 y(same)32 b(in)m(terv)-5
b(al.)42 b(While)31 b(a)h(series)g(expansion)h(of)f Fl(r)1702
2939 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)1933 2924 y Fr(\()p
Fl(Z)f Fr(\))28 b(=)f Fl(\031)2269 2939 y Fj(e)2307 2924
y Fr(\()p Fl(Z)7 b Fr(\))21 b Fi(\000)g Fl(\031)2631
2939 y Fj(o)2670 2924 y Fr(\()p Fl(Z)7 b Fr(\))32 b(is)g(giv)m(en)g(in)
f([11],)h(w)m(e)i(tak)m(e)-165 3089 y(a)d(di\013eren)m(t)g(approac)m(h)
h(here.)44 b(De\014ne)31 b(the)h(causal)f(Laplace)g(transform)f(of)h
Fl(g)t Fr(\()p Fl(t)p Fr(\))f(as)i Fl(G)p Fr(\()p Fl(s)p
Fr(\))27 b(=)3310 3002 y Fd(1)3310 3018 y Fe(R)3272 3167
y Fj(t)p Fk(=0)3412 3089 y Fl(g)t Fr(\()p Fl(t)p Fr(\)e)3617
3053 y Fd(\000)p Fj(st)3734 3089 y Fr(d)p Fl(t)p Fr(.)-165
3255 y(The)40 b(alternating)e(renew)m(al)h(pro)s(cesses)j(theory)e
([21])f(giv)m(es)h(the)g(causal)f(Laplace)g(transforms)g(\005)3495
3270 y Fj(e)3532 3255 y Fr(\()p Fl(s)p Fr(\))g(and)-165
3420 y(\005)-92 3435 y Fj(o)-54 3420 y Fr(\()p Fl(s)p
Fr(\))32 b(of)g Fl(\031)266 3435 y Fj(e)304 3420 y Fr(\()p
Fl(Z)7 b Fr(\))32 b(and)h Fl(\031)731 3435 y Fj(o)769
3420 y Fr(\()p Fl(Z)7 b Fr(\))661 3742 y(\005)734 3757
y Fj(e)771 3742 y Fr(\()p Fl(s)p Fr(\))83 b(=)1190 3608
y Fd(1)1165 3625 y Fe(Z)1117 3869 y Fj(Z)5 b Fk(=0)1294
3742 y Fl(\031)1349 3757 y Fj(e)1387 3742 y Fr(\()p Fl(Z)i
Fr(\)e)1580 3701 y Fd(\000)p Fj(sZ)1724 3742 y Fr(d)p
Fl(Z)35 b Fr(=)1993 3675 y(1)p 1993 3719 49 4 v 1994
3810 a Fl(s)2074 3742 y Fi(\000)2321 3675 y Fr(1)p 2184
3719 324 4 v 2184 3810 a Fl(s)2230 3782 y Fk(2)2269 3810
y Fr(E)17 b(\()p Fl(B)5 b Fr(\))2539 3742 y Fi(\001)2599
3675 y Fr(1)22 b Fi(\000)g Fl(F)2832 3690 y Fj(B)2893
3675 y Fr(\()p Fl(s)p Fr(\))p 2599 3719 417 4 v 2600
3810 a(1)g(+)g Fl(F)2832 3825 y Fj(B)2892 3810 y Fr(\()p
Fl(s)p Fr(\))3677 3742 y(\(39\))660 4081 y(\005)733 4096
y Fj(o)771 4081 y Fr(\()p Fl(s)p Fr(\))83 b(=)1190 3947
y Fd(1)1165 3964 y Fe(Z)1117 4207 y Fj(Z)5 b Fk(=0)1294
4081 y Fl(\031)1349 4096 y Fj(o)1388 4081 y Fr(\()p Fl(Z)i
Fr(\)e)1581 4040 y Fd(\000)p Fj(sZ)1725 4081 y Fr(d)p
Fl(Z)35 b Fr(=)2132 4013 y(1)p 1995 4057 324 4 v 1995
4149 a Fl(s)2041 4120 y Fk(2)2080 4149 y Fr(E)17 b(\()p
Fl(B)5 b Fr(\))2350 4081 y Fi(\001)2410 4013 y Fr(1)22
b Fi(\000)g Fl(F)2643 4028 y Fj(B)2704 4013 y Fr(\()p
Fl(s)p Fr(\))p 2410 4057 417 4 v 2411 4149 a(1)g(+)g
Fl(F)2643 4164 y Fj(B)2703 4149 y Fr(\()p Fl(s)p Fr(\))2836
4081 y Fl(:)814 b Fr(\(40\))-165 4417 y(Here,)32 b Fl(F)154
4432 y Fj(B)215 4417 y Fr(\()p Fl(s)p Fr(\))f(is)h(the)g(causal)f
(Laplace)g(transform)g(of)g(the)h(p)s(df)f Fl(f)2227
4432 y Fj(B)2288 4417 y Fr(\()p Fl(b)p Fr(\).)43 b(The)33
b(causal)e(Laplace)g(transform)g(of)-165 4582 y Fl(r)-121
4597 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)110 4582 y Fr(\()p
Fl(Z)f Fr(\))32 b(is)g(then,)i(according)e(to)g(equation)g(\(38\),)670
4876 y Fl(R)744 4891 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)975
4876 y Fr(\()p Fl(s)p Fr(\))28 b(=)f(\005)1301 4891 y
Fj(e)1338 4876 y Fr(\()p Fl(s)p Fr(\))22 b Fi(\000)h
Fr(\005)1655 4891 y Fj(o)1693 4876 y Fr(\()p Fl(s)p Fr(\))28
b(=)1956 4808 y(1)p 1956 4852 49 4 v 1957 4944 a Fl(s)2037
4876 y Fi(\000)2284 4808 y Fr(2)p 2147 4852 324 4 v 2147
4944 a Fl(s)2193 4915 y Fk(2)2232 4944 y Fr(E)17 b(\()p
Fl(B)5 b Fr(\))2502 4876 y Fi(\001)2562 4808 y Fr(1)22
b Fi(\000)h Fl(F)2796 4823 y Fj(B)2856 4808 y Fr(\()p
Fl(s)p Fr(\))p 2562 4852 417 4 v 2563 4944 a(1)f(+)g
Fl(F)2795 4959 y Fj(B)2856 4944 y Fr(\()p Fl(s)p Fr(\))2988
4876 y Fl(:)662 b Fr(\(41\))p eop
19 18 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1142 b Fr(xix)-165 289 y(Since)34 b Fl(r)135 304 y Fb(T)8
b(Z)s Fc(\000)p Fb(Z)s(T)366 289 y Fr(\()p Fl(Z)f Fr(\))34
b(is)f(an)h(ev)m(en)i(function)d(\(it)g(is)h(an)g(auto)s(correlation)d
(function\),)j(w)m(e)h(ha)m(v)m(e)h(a)d(relationship)-165
454 y(linking)d(the)j(F)-8 b(ourier)31 b(transform)h
Fi(R)1194 469 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)1426
454 y Fr(\()p Fl(f)j Fr(\))32 b(to)g(the)h(causal)g(Laplace)f
(transform)f Fl(R)3054 469 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)3286
454 y Fr(\()p Fl(s)p Fr(\))447 737 y Fi(R)531 752 y Fb(T)g(Z)s
Fc(\000)p Fb(Z)s(T)762 737 y Fr(\()p Fl(f)j Fr(\))83
b(=)143 b(lim)1139 797 y Fj(s)p Fd(!)p Fj(j)t Fk(2)p
Fj(\031)r(f)1411 737 y Fr([)p Fl(R)1512 752 y Fb(T)8
b(Z)s Fc(\000)p Fb(Z)s(T)1743 737 y Fr(\()p Fl(s)p Fr(\))22
b(+)g Fl(R)2059 752 y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)2291
737 y Fr(\()p Fi(\000)p Fl(s)p Fr(\)])1160 b(\(42\))980
1001 y(=)1384 934 y(2)p 1149 978 520 4 v 1149 1070 a(\(2)p
Fl(\031)t(f)11 b Fr(\))1392 1041 y Fk(2)1431 1070 y Fr(E)17
b(\()p Fl(B)5 b Fr(\))1695 855 y Fe(")1754 934 y Fr(1)22
b Fi(\000)g Fl(F)1987 949 y Fj(B)2048 934 y Fr(\()p Fl(j)6
b Fr(2)p Fl(\031)t(f)11 b Fr(\))p 1754 978 583 4 v 1755
1070 a(1)21 b(+)h Fl(F)1986 1085 y Fj(B)2047 1070 y Fr(\()p
Fl(j)6 b Fr(2)p Fl(\031)t(f)11 b Fr(\))2368 1001 y(+)2476
934 y(1)22 b Fi(\000)h Fl(F)2710 949 y Fj(B)2771 934
y Fr(\()p Fi(\000)p Fl(j)6 b Fr(2)p Fl(\031)t(f)11 b
Fr(\))p 2476 978 661 4 v 2477 1070 a(1)22 b(+)g Fl(F)2709
1085 y Fj(B)2770 1070 y Fr(\()p Fi(\000)p Fl(j)6 b Fr(2)p
Fl(\031)t(f)11 b Fr(\))3146 855 y Fe(#)3211 1001 y Fl(:)439
b Fr(\(43\))-165 1302 y(Here,)27 b Fl(F)149 1317 y Fj(B)209
1302 y Fr(\()p Fl(j)6 b Fr(2)p Fl(\031)t(f)11 b Fr(\))24
b(is)g(the)h(causal)f(Laplace)g(transform)g(of)g Fl(f)1999
1317 y Fj(B)2059 1302 y Fr(\()p Fl(b)p Fr(\))h(ev)-5
b(aluated)24 b(at)g Fl(s)k Fr(=)g Fl(j)6 b Fr(2)p Fl(\031)t(f)11
b Fr(.)40 b(Since)24 b Fl(f)3492 1317 y Fj(B)3553 1302
y Fr(\()p Fl(b)p Fr(\))k(=)g(0)-165 1467 y(for)h Fl(b)g(<)e
Fr(0)j(w)m(e)h(ha)m(v)m(e)h(that)e(the)h(F)-8 b(ourier)29
b(transform)g(of)h Fl(f)1909 1482 y Fj(B)1970 1467 y
Fr(\()p Fl(b)p Fr(\))g(equals)h Fi(F)2483 1482 y Fj(B)2543
1467 y Fr(\()p Fl(f)11 b Fr(\))28 b(=)f Fl(F)2872 1482
y Fj(B)2933 1467 y Fr(\()p Fl(j)6 b Fr(2)p Fl(\031)t(f)11
b Fr(\).)42 b(F)-8 b(urthermore,)-165 1633 y(b)s(ecause)38
b Fl(f)248 1648 y Fj(B)308 1633 y Fr(\()p Fl(b)p Fr(\))f(is)f(a)g(p)s
(df)h(and)g(th)m(us)g(a)f(real)g(function,)h(w)m(e)h(ha)m(v)m(e)g
Fi(F)2381 1648 y Fj(B)2441 1633 y Fr(\()p Fi(\000)p Fl(f)11
b Fr(\))34 b(=)h Fi(F)2880 1597 y Fd(\003)2870 1657 y
Fj(B)2930 1633 y Fr(\()p Fl(f)11 b Fr(\),)37 b(where)h(the)f(sup)s(er-)
-165 1798 y(script)106 1762 y Fd(\003)178 1798 y Fr(denotes)d(complex)e
(conjugation.)42 b(Th)m(us,)35 b(equation)d(\(43\))g(tak)m(es)i(its)e
(\014nal)f(form)948 2108 y Fi(R)1032 2123 y Fb(T)8 b(Z)s
Fc(\000)p Fb(Z)s(T)1264 2108 y Fr(\()p Fl(f)j Fr(\))27
b(=)1783 2041 y(4)p 1540 2085 537 4 v 1540 2186 a(\(2)p
Fl(\031)t(f)11 b Fr(\))1782 2138 y Fk(2)1838 2186 y Fr(E)17
b(\()p Fl(B)5 b Fr(\))2108 2108 y Fi(\001)2168 2041 y
Fr(1)22 b Fi(\000)g(jF)2438 2056 y Fj(B)2498 2041 y Fr(\()p
Fl(f)11 b Fr(\))p Fi(j)2661 1992 y Fk(2)p 2168 2085 533
4 v 2169 2186 a Fi(j)o Fr(1)22 b(+)g Fi(F)2437 2201 y
Fj(B)2497 2186 y Fr(\()p Fl(f)11 b Fr(\))p Fi(j)2660
2138 y Fk(2)2710 2108 y Fl(:)940 b Fr(\(44\))-19 2530
y(W)-8 b(e)33 b(no)m(w)g(pro)m(v)m(e)h(equation)e(\(6\))h(b)m(y)g
(taking)f(the)h(limit)c(of)j(\(44\))g(as)h Fl(f)38 b
Fi(!)27 b Fr(0)239 2840 y Fl(s)285 2855 y Fb(T)8 b(Z)s
Fc(\000)p Fb(Z)s(T)599 2840 y Fr(=)83 b Fi(R)842 2855
y Fb(T)8 b(Z)s Fc(\000)p Fb(Z)s(T)1074 2840 y Fr(\(0\))27
b(=)34 b(lim)1330 2900 y Fj(f)7 b Fd(!)p Fk(0)1494 2840
y Fi(R)1578 2855 y Fb(T)h(Z)s Fc(\000)p Fb(Z)s(T)1809
2840 y Fr(\()p Fl(f)j Fr(\))28 b(=)33 b(lim)2075 2900
y Fj(f)7 b Fd(!)p Fk(0)2493 2773 y Fr(4)p 2249 2817 537
4 v 2249 2918 a(\(2)p Fl(\031)t(f)k Fr(\))2491 2870 y
Fk(2)2547 2918 y Fr(E)17 b(\()p Fl(B)5 b Fr(\))2817 2840
y Fi(\001)2877 2773 y Fr(1)22 b Fi(\000)h(j)o(F)3147
2788 y Fj(B)3208 2773 y Fr(\()p Fl(f)11 b Fr(\))p Fi(j)3370
2724 y Fk(2)p 2877 2817 533 4 v 2878 2918 a Fi(j)p Fr(1)21
b(+)h Fi(F)3146 2933 y Fj(B)3207 2918 y Fr(\()p Fl(f)11
b Fr(\))p Fi(j)3369 2870 y Fk(2)3419 2840 y Fl(:)231
b Fr(\(45\))599 3135 y(=)863 3067 y(4)p 768 3112 238
4 v 768 3203 a(E)17 b(\()p Fl(B)5 b Fr(\))1038 3135 y
Fi(\001)28 b Fr(lim)1088 3195 y Fj(f)7 b Fd(!)p Fk(0)1502
3067 y Fr(1)p 1262 3112 531 4 v 1262 3213 a Fi(j)o Fr(1)22
b(+)g Fi(F)1530 3228 y Fj(B)1590 3213 y Fr(\()p Fl(f)11
b Fr(\))p Fi(j)1753 3164 y Fk(2)1824 3135 y Fi(\001)28
b Fr(lim)1874 3195 y Fj(f)7 b Fd(!)p Fk(0)2048 3067 y
Fr(1)22 b Fi(\000)g(jF)2318 3082 y Fj(B)2378 3067 y Fr(\()p
Fl(f)11 b Fr(\))p Fi(j)2540 3019 y Fk(2)p 2048 3112 533
4 v 2173 3213 a Fr(\(2)p Fl(\031)t(f)g Fr(\))2415 3164
y Fk(2)2590 3135 y Fl(:)1060 b Fr(\(46\))-165 3439 y(Expand)33
b Fi(F)268 3454 y Fj(B)329 3439 y Fr(\()p Fl(f)11 b Fr(\))32
b(in)g(a)g(T)-8 b(a)m(ylor)32 b(series)-108 3761 y Fi(F)-36
3776 y Fj(B)25 3761 y Fr(\()p Fl(f)11 b Fr(\))27 b(=)379
3627 y Fd(1)354 3644 y Fe(Z)272 3888 y Fj(b)p Fk(=)p
Fd(\0001)517 3761 y Fl(f)565 3776 y Fj(B)626 3761 y Fr(\()p
Fl(b)p Fr(\)e)786 3720 y Fd(\000)p Fj(j)t Fk(2)p Fj(\031)r(f)7
b(b)1028 3761 y Fr(d)p Fl(b)28 b Fr(=)1343 3627 y Fd(1)1319
3644 y Fe(Z)1236 3888 y Fj(b)p Fk(=)p Fd(\0001)1482 3615
y Fe( )1577 3653 y Fd(1)1552 3678 y Fe(X)1548 3862 y
Fj(k)r Fk(=0)1703 3693 y Fr(\()p Fi(\000)p Fl(j)6 b Fr(2)p
Fl(\031)t(f)11 b(b)p Fr(\))2110 3645 y Fj(k)p 1703 3737
450 4 v 1887 3829 a Fl(k)s Fr(!)2163 3615 y Fe(!)2245
3761 y Fl(f)2293 3776 y Fj(B)2354 3761 y Fr(\()p Fl(b)p
Fr(\)d)p Fl(b)29 b Fr(=)2727 3653 y Fd(1)2702 3678 y
Fe(X)2698 3862 y Fj(k)r Fk(=0)2853 3693 y Fr(\()p Fi(\000)p
Fl(j)6 b Fr(2)p Fl(\031)t(f)11 b Fr(\))3219 3645 y Fj(k)p
2853 3737 409 4 v 3017 3829 a Fl(k)s Fr(!)3272 3761 y(E)3355
3664 y Fe(\020)3404 3761 y Fl(B)3483 3720 y Fj(k)3526
3664 y Fe(\021)3592 3761 y Fl(:)58 b Fr(\(47\))-165 4099
y(Then)33 b(w)m(e)h(ha)m(v)m(e)41 4399 y(1)22 b Fi(\000)h(j)o(F)311
4414 y Fj(B)371 4399 y Fr(\()p Fl(f)11 b Fr(\))p Fi(j)534
4351 y Fk(2)p 41 4443 533 4 v 166 4535 a Fr(\(2)p Fl(\031)t(f)g
Fr(\))409 4506 y Fk(2)611 4467 y Fr(=)724 4345 y(1)22
b Fi(\000)916 4262 y Fd(1)907 4279 y Fe(P)895 4422 y
Fj(l)q Fk(=0)1053 4262 y Fd(1)1044 4279 y Fe(P)1024 4422
y Fj(k)r Fk(=0)1179 4299 y(\()p Fd(\000)p Fj(j)t Fk(2)p
Fj(\031)r(f)7 b Fk(\))1440 4269 y Fb(l)p 1179 4322 286
4 v 1301 4380 a Fj(l)q Fk(!)1484 4299 y(\()q Fj(j)t Fk(2)p
Fj(\031)r(f)g Fk(\))1691 4269 y Fb(k)p 1484 4322 245
4 v 1578 4380 a Fj(k)r Fk(!)1739 4345 y Fr(E)1822 4249
y Fe(\020)1872 4345 y Fl(B)1951 4309 y Fj(l)1977 4249
y Fe(\021)2043 4345 y Fr(E)2126 4249 y Fe(\020)2176 4345
y Fl(B)2255 4309 y Fj(k)2297 4249 y Fe(\021)p 724 4443
1623 4 v 1372 4535 a Fr(\()p Fl(j)f Fr(2)p Fl(\031)t(f)11
b Fr(\))1661 4506 y Fk(2)2385 4467 y Fr(=)27 b Fl(C)2558
4482 y Fk(1)2620 4467 y Fr(+)2749 4359 y Fd(1)2724 4384
y Fe(X)2718 4565 y Fj(n)p Fk(=2)2867 4467 y Fl(C)2937
4482 y Fj(n)2984 4467 y Fr(\(2)p Fl(\031)t(f)11 b Fr(\))3227
4425 y Fk(2\()p Fj(n)p Fd(\000)p Fk(1\))3453 4467 y Fl(:)197
b Fr(\(48\))-165 4791 y(It)44 b(is)g(easy)i(to)e(v)m(erify)g(that)h
(the)f(\014rst)h(co)s(e\016cien)m(t)g(is)f Fl(C)1965
4806 y Fk(1)2052 4791 y Fr(=)k(E)17 b(\()p Fl(B)2376
4755 y Fk(2)2416 4791 y Fr(\))30 b Fi(\000)g Fr(E)17
b(\()p Fl(B)5 b Fr(\))2829 4742 y Fk(2)2917 4791 y Fr(=)47
b(V)-8 b(ar)17 b(\()p Fl(B)5 b Fr(\).)79 b(Pro)m(vided)-165
4956 y(that)34 b(the)h(momen)m(ts)g(E)17 b(\()p Fl(B)836
4920 y Fj(n)883 4956 y Fr(\))35 b(exist)g(for)f(all)f
Fl(n)e Fi(\025)h Fr(1)j(\(satis\014ed)g(b)m(y)h(most)e(p)s(dfs,)i
(e.g.,)f(Gaussian,)g(Ra)m(yleigh,)-165 5121 y(exp)s(onen)m(tial,)i
(etc.,)i(with)e(rare)g(exceptions,)j(e.g.,)e(the)g(Cauc)m(h)m(y)h(p)s
(df)7 b(\),)38 b(w)m(e)g(then)g(ha)m(v)m(e)g(one)f(of)g(the)g(limits)p
eop
20 19 bop -133 -102 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1169 b Fr(xx)-165 289 y(in)31 b(\(46\))1121 599 y(lim)1115
659 y Fj(f)7 b Fd(!)p Fk(0)1289 531 y Fr(1)22 b Fi(\000)g(jF)1559
546 y Fj(B)1619 531 y Fr(\()p Fl(f)11 b Fr(\))p Fi(j)1782
483 y Fk(2)p 1289 575 533 4 v 1414 667 a Fr(\(2)p Fl(\031)t(f)g
Fr(\))1657 638 y Fk(2)1859 599 y Fr(=)27 b Fl(C)2032
614 y Fk(1)2099 599 y Fr(=)h(V)-8 b(ar)16 b(\()p Fl(B)5
b Fr(\))17 b Fl(:)1107 b Fr(\(49\))-165 893 y(By)33 b(straigh)m(t)f
(forw)m(ard)g(substitution)g(of)g Fl(f)39 b Fr(=)27 b(0)33
b(w)m(e)g(get)g(the)g(other)g(limit)c(in)i(\(46\))810
1176 y(lim)804 1236 y Fj(f)7 b Fd(!)p Fk(0)1219 1109
y Fr(1)p 978 1153 531 4 v 978 1254 a Fi(j)p Fr(1)21 b(+)h
Fi(F)1246 1269 y Fj(B)1307 1254 y Fr(\()p Fl(f)11 b Fr(\))p
Fi(j)1469 1206 y Fk(2)1546 1176 y Fr(=)1896 1109 y(1)p
1660 1153 521 4 v 1660 1254 a Fi(j)o Fr(1)22 b(+)g Fi(F)1928
1269 y Fj(B)1988 1254 y Fr(\(0\))p Fi(j)2141 1206 y Fk(2)2218
1176 y Fr(=)2463 1109 y(1)p 2331 1153 313 4 v 2331 1254
a Fi(j)p Fr(1)g(+)g(1)p Fi(j)2604 1206 y Fk(2)2681 1176
y Fr(=)2795 1109 y(1)p 2795 1153 49 4 v 2795 1245 a(4)2854
1176 y Fl(:)796 b Fr(\(50\))-165 1530 y(Notice)23 b(that)g
Fi(F)406 1545 y Fj(B)466 1530 y Fr(\(0\))k(=)800 1443
y Fd(1)799 1459 y Fe(R)714 1611 y Fj(b)p Fk(=)p Fd(\0001)949
1530 y Fl(f)997 1545 y Fj(B)1058 1530 y Fr(\()p Fl(b)p
Fr(\)d)p Fl(b)h Fr(=)g(1)23 b(since)h Fl(f)1752 1545
y Fj(B)1813 1530 y Fr(\()p Fl(b)p Fr(\))f(is)g(a)g(p)s(df.)41
b(Substituting)22 b(equations)i(\(49\))e(and)i(\(50\))-165
1710 y(in)m(to)31 b(\(46\),)h(w)m(e)i(get)f(equation)f(\(6\).)43
b(QED)-165 2161 y Fm(References)-117 2466 y Fr([1])49
b(R.)39 b(A.)f(Baugh,)j(E.)e(S.)g(Murdo)s(c)m(k,)i(and)e(B.)g(R.)f
(Natara)5 b(jan,)40 b(\\Measuremen)m(t)g(of)e(noise)h(in)f(magnetic)35
2631 y(media,")31 b Fp(IEEE)k(T)-7 b(r)i(ans.)34 b(Magn.)p
Fr(,)e(v)m(ol.)g(MA)m(G-19,)g(pp.)h(1722{1724,)e(Sept.)i(1983.)-117
2880 y([2])49 b(R.)30 b(N.)h(Belk,)g(K.)f(P)-8 b(.)31
b(George,)g(and)f(S.)h(G.)f(Mo)m(wry)-8 b(,)32 b(\\Noise)e(in)g(high)g
(p)s(erformance)g(thin-\014lm)e(longitu-)35 3045 y(dinal)g(magnetic)f
(recording)i(media,")f Fp(IEEE)k(T)-7 b(r)i(ans.)30 b(Magn.)p
Fr(,)f(v)m(ol.)g(MA)m(G-21,)g(pp.)h(1350{1355,)e(Sept.)35
3210 y(1985.)-117 3459 y([3])49 b(M.)36 b(J.)g(F)-8 b(reiser,)37
b(\\On)e(the)i(zigzag)d(form)h(of)g(c)m(harged)i(domain)d(w)m(alls,")i
Fp(IBM)h(J.)h(R)-5 b(es.)37 b(Dev.)p Fr(,)f(v)m(ol.)g(23,)35
3624 y(pp.)d(330{338,)e(Ma)m(y)j(1979.)-117 3873 y([4])49
b(M.)37 b(Muller)f(and)h(E.)g(Murdo)s(c)m(k,)j(\\Williams-Comsto)s(c)m
(k)32 b(t)m(yp)s(e)38 b(mo)s(del)d(for)h(sa)m(wto)s(oth)h(transitions)f
(in)35 4038 y(thin)c(\014lm)f(media,")g Fp(IEEE)k(T)-7
b(r)i(ans.)34 b(Magn.)p Fr(,)e(v)m(ol.)g(23,)g(pp.)h(2368{2370,)e
(Sept.)i(1987.)-117 4286 y([5])49 b(X.)33 b(Y.)g(Zhang,)g(H.)g(Suhl,)f
(and)h(P)-8 b(.)33 b(K.)g(George,)g(\\Relationship)d(b)s(et)m(w)m(een)
35 b(the)e(transition)f(width)g(and)35 4452 y(the)h(zigzag)f(w)m(a)m(v)
m(elength,")i Fp(J.)h(Appl.)f(Phys.)p Fr(,)f(v)m(ol.)f(63,)g(pp.)h
(3257{3259,)e(April)g(1988.)-117 4700 y([6])49 b(B.)36
b(K.)f(Middleton,)g(J.)g(J.)h(Miles,)f(and)h(R.)f(H.)g(No)m(y)m(au,)i
(\\The)f(digital)c(recording)j(prop)s(erties)g(of)g(thin)35
4865 y(\014lm)24 b(media)g(ha)m(ving)h(sa)m(wto)s(oth)g(magnetisation)e
(transitions,")i Fp(IEEE)j(T)-7 b(r)i(ans.)27 b(Magn.)p
Fr(,)f(v)m(ol.)f(MA)m(G-24,)35 5031 y(pp.)33 b(3099{3101,)e(No)m(v.)i
(1988.)p eop
21 20 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1142 b Fr(xxi)-117 289 y([7])49 b(T.)f(C.)g(Arnoldussen)g(and)g(H.)g
(C.)g(T)-8 b(ong,)51 b(\\Zigzag)45 b(transition)h(pro\014les,)51
b(noise,)h(and)47 b(correlation)35 454 y(statistics)41
b(in)f(highly)g(orien)m(ted)h(longitudinal)d(media,")j
Fp(IEEE)i(T)-7 b(r)i(ans.)41 b(Magn.)p Fr(,)i(v)m(ol.)e(22,)i(pp.)e
(889{)35 619 y(891,)32 b(Sept.)h(1986.)-117 857 y([8])49
b(Y.-S.)27 b(T)-8 b(ang)28 b(and)f(L.)g(Osse,)j(\\Zig-zag)25
b(domains)h(and)h(metal)f(\014lm)g(disk)h(noise,")h Fp(IEEE)i(T)-7
b(r)i(ans.)29 b(Magn.)p Fr(,)35 1023 y(v)m(ol.)j(MA)m(G-23,)g(pp.)h
(2371{2373,)e(Sept.)i(1987.)-117 1261 y([9])49 b(B.)d(K.)f(Middleton)g
(and)h(J.)g(J.)f(Miles,)k(\\Sa)m(wto)s(oth)c(magnetization)e
(transitions)i(and)g(the)h(digital)35 1426 y(recording)37
b(prop)s(erties)g(of)g(thin)g(\014lm)f(recording)h(media,")g(in)g
Fp(IEE)i(Conf.)f(Pr)-5 b(o)g(c.)p Fr(,)39 b(pp.)e(20{25,)h(April)35
1592 y(1991.)-165 1830 y([10])48 b(B.)35 b(K.)g(Middleton)g(and)g(J.)g
(J.)g(Miles,)h(\\Recorded)f(magnetization)e(distributions)h(in)g(thin)h
(\014lm)e(me-)35 1995 y(dia,")f Fp(IEEE)i(T)-7 b(r)i(ans.)34
b(Magn.)p Fr(,)e(v)m(ol.)g(27,)h(pp.)g(4954{4959,)d(No)m(v.)k(1991.)
-165 2233 y([11])48 b(A.)39 b(Ka)m(v)m(\024)-46 b(ci)m(\023)g(c)39
b(and)g(J.)h(M.)f(F.)g(Moura,)h(\\T)-8 b(riangle)37 b(zig-zag)h
(transition)f(mo)s(deling,")h(tec)m(h.)i(rep.,)h(Data)35
2398 y(Storage)34 b(Systems)h(Cen)m(ter,)h(Dept.)e(of)f(Electrical)f
(and)i(Computer)g(Engineering,)g(Carnegie)f(Mellon)35
2564 y(Univ)m(ersit)m(y)-8 b(,)33 b(Pittsburgh,)g(P)-8
b(A,)33 b(1995.)43 b(54)32 b(pages.)-165 2802 y([12])48
b(J.-G.)76 b(Zh)m(u)i(and)f(N.)g(H.)g(Bertram,)87 b(\\Micromagnetic)75
b(studies)j(of)e(thin)h(metallic)c(\014lms,")35 2967
y Fp(J.)35 b(Appl.)g(Phys.)p Fr(,)d(v)m(ol.)h(63,)f(pp.)h(3248{3253,)d
(April)h(1988.)-165 3205 y([13])48 b(J.-G.)41 b(Zh)m(u)g(and)h(N.)f(H.)
g(Bertram,)i(\\Recording)e(and)g(transition)f(noise)h(sim)m(ulations)e
(in)h(thin)h(\014lm)35 3371 y(media,")31 b Fp(IEEE)k(T)-7
b(r)i(ans.)34 b(Magn.)p Fr(,)e(v)m(ol.)g(24,)g(pp.)h(2706{2708,)e(No)m
(v.)i(1988.)-165 3609 y([14])48 b(P)-8 b(.-L.)28 b(Lu)f(and)h(S.)g
(Charap,)h(\\Angular)d(v)-5 b(ariations)26 b(of)h(co)s(ercivit)m(y)g
(in)g(thin-\014lm)e(media)h(b)m(y)j(micromag-)35 3774
y(netic)k(mo)s(del,")d Fp(IEEE)35 b(T)-7 b(r)i(ans.)34
b(Magn.)p Fr(,)e(v)m(ol.)g(28,)g(pp.)h(986{989,)e(Marc)m(h)j(1992.)-165
4012 y([15])48 b(H.)35 b(N.)g(Bertram,)g Fp(The)-5 b(ory)37
b(of)g(Magnetic)g(R)-5 b(e)g(c)g(or)g(ding)p Fr(.)49
b(Cam)m(bridge:)f(Cam)m(bridge)34 b(Univ)m(ersit)m(y)i(Press,)35
4177 y(1994.)-165 4415 y([16])48 b(J.)30 b(Caroselli)e(and)i(J.)g(K.)g
(W)-8 b(olf,)29 b(\\A)h(new)h(mo)s(del)d(for)i(media)e(noise)i(in)f
(thin)h(\014lm)e(magnetic)h(recording)35 4581 y(media,")i(in)g
Fp(Pr)-5 b(o)g(c.)68 b(SPIE:)33 b(Co)-5 b(ding)33 b(and)h(Signal)f(Pr)
-5 b(o)g(c)g(essing)33 b(for)h(Information)f(Stor)-5
b(age)p Fr(,)32 b(v)m(ol.)f(2605,)35 4746 y(\(Philadelphia\),)f(pp.)j
(29{38,)f(Oct.)g(1995.)-165 4984 y([17])48 b(A.)28 b(Ka)m(v)m(\024)-46
b(ci)m(\023)g(c)27 b(and)h(J.)f(M.)h(F.)f(Moura,)h(\\Exp)s(edien)m(t)g
(media)e(noise)i(mo)s(deling:)38 b(Isolated)27 b(and)g(in)m(teracting)
35 5150 y(transitions,")k Fp(IEEE)k(T)-7 b(r)i(ans.)34
b(Magn.)p Fr(,)e(v)m(ol.)g(32,)g(pp.)h(3875{3877,)e(Sept.)i(1996.)p
eop
22 21 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1115 b Fr(xxii)-165 289 y([18])48 b(R.)25 b(D.)h(Brandt,)h(A.)e(J.)h
(Armstrong,)g(H.)g(N.)g(Bertram,)g(and)g(J.)f(K.)h(W)-8
b(olf,)25 b(\\A)h(simple)e(statistical)f(mo)s(del)35
454 y(of)31 b(partial)e(erasure)k(in)e(thin)f(\014lm)g(disk)i
(recording)f(systems,")i Fp(IEEE)h(T)-7 b(r)i(ans.)32
b(Magn.)p Fr(,)g(v)m(ol.)f(MA)m(G-27,)35 619 y(pp.)i(4978{4980,)e(No)m
(v.)i(1991.)-165 868 y([19])48 b(A.)31 b(Ka)m(v)m(\024)-46
b(ci)m(\023)g(c)30 b(and)h(J.)f(M.)h(F.)f(Moura,)h(\\Exp)s(erimen)m
(tal)e(v)-5 b(alidation)27 b(of)j(the)h(triangle)d(zig-zag)h
(transition)35 1033 y(mo)s(del,")i(in)h Fp(IEEE)i(INTERMA)n(G)i(Confer)
-5 b(enc)g(e)p Fr(,)31 b(\(New)i(Orleans\),)g(Apr.)g(1997.)-165
1281 y([20])48 b(A.)25 b(P)m(ap)s(oulis,)h Fp(Pr)-5 b(ob)g(ability,)29
b(R)-5 b(andom)27 b(V)-7 b(ariables)27 b(and)g(Sto)-5
b(chastic)27 b(Pr)-5 b(o)g(c)g(esses)p Fr(.)30 b(New)c(Y)-8
b(ork:)40 b(McGra)m(w-)35 1447 y(Hill)30 b(Bo)s(ok)i(Compan)m(y)-8
b(,)33 b(1965.)-165 1695 y([21])48 b(D.)32 b(R.)h(Co)m(x,)g
Fp(R)-5 b(enewal)34 b(The)-5 b(ory)p Fr(.)43 b(London:)h(Meth)m(uen)34
b(&)f(Co.)f(Ltd.,)h(1962.)-165 1944 y([22])48 b(L.)33
b(Kleinro)s(c)m(k,)e Fp(Queueing)k(Systems)p Fr(.)43
b(New)33 b(Y)-8 b(ork:)44 b(John)33 b(Wiley)f(&)g(Sons,)h(1975.)-165
2192 y([23])48 b(H.)33 b(N.)g(Bertram)f(and)g(X.)h(Che,)h(\\General)d
(analysis)h(of)h(noise)f(in)g(recorded)i(transitions)d(in)h(thin)g
(\014lm)35 2357 y(recording)g(media,")f Fp(IEEE)k(T)-7
b(r)i(ans.)34 b(Magn.)p Fr(,)e(v)m(ol.)g(MA)m(G-29,)g(pp.)h(201{208,)e
(1993.)-165 2606 y([24])48 b(A.)28 b(Ka)m(v)m(\024)-46
b(ci)m(\023)g(c)27 b(and)g(J.)h(M.)f(F.)g(Moura,)i(\\Signal)c
(generation)h(mo)s(del)g(for)h(high)f(densit)m(y)i(magnetic)e(record-)
35 2771 y(ing,")32 b(in)f Fp(Pr)-5 b(o)g(c.)35 b(IEEE)g(GLOBECOM)f(97)p
Fr(,)f(\(London\),)f(No)m(v.)h(1996.)1050 3507 y Fo(Biograph)m(y)k(of)h
(Aleksandar)g(Ka)m(v)m(\024)-53 b(ci)m(\023)g(c)p 1050
3539 1585 4 v -165 3898 a Fr(Aleksandar)39 b(Ka)m(v)m(\024)-46
b(ci)m(\023)g(c)40 b(\(S'93\))f(w)m(as)i(b)s(orn)e(in)g(Belgrade,)h(Y)
-8 b(ugosla)m(via,)40 b(in)f(1968.)63 b(He)40 b(receiv)m(ed)h(the)f
(Dipl.-)-165 4063 y(Ing.)45 b(degree)i(in)d(Elecrical)g(Engineering)h
(from)f(the)i(Ruhr)g(Univ)m(ersit)m(y)g(Bo)s(c)m(h)m(um,)j(German)m(y)
-8 b(,)48 b(in)d(1993.)-165 4229 y(Since)g(1993,)h(he)g(has)f(b)s(een)g
(with)g(the)g(Carnegie)f(Mellon)g(Univ)m(ersit)m(y)-8
b(,)49 b(Pittsburgh,)e(P)-8 b(A,)46 b(where)g(he)f(is)-165
4394 y(a)39 b(Ph.D.)g(candidate)h(in)e(the)i(Departmen)m(t)f(of)g
(Electrical)f(and)h(Computer)h(Engineering.)63 b(His)39
b(researc)m(h)-165 4559 y(in)m(terests)46 b(are)g(in)f(signal)f(pro)s
(cessing,)49 b(comm)m(unications)43 b(and)j(magnetic)e(recording,)49
b(while)c(his)g(thesis)-165 4725 y(researc)m(h)34 b(is)e(on)g(mo)s
(deling)e(and)j(detection)g(in)f(high)f(densit)m(y)j(recording.)p
eop
23 22 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1088 b Fr(xxiii)959 289 y Fo(Biograph)m(y)37 b(of)h(Dr.)50
b(Jos)n(\023)-54 b(e)37 b(M.)h(F.)g(Moura)p 959 321 1767
4 v -165 680 a Fr(Jos)m(\023)-46 b(e)42 b(M.)f(F.)g(Moura)h
(\(S'71{M'75{SM'90{F'94\))e(receiv)m(ed)i(the)g(engenheiro)g(electrot)m
(\023)-46 b(ecnico)41 b(degree)h(in)-165 845 y(1969)c(from)h(Instituto)
g(Sup)s(erior)g(T)m(\023)-46 b(ecnico)40 b(\(IST\),)h(Lisb)s(on,)g(P)m
(ortugal,)f(and)g(the)g(M.Sc.,)j(E.E.,)f(and)e(the)-165
1011 y(D.Sc.)79 b(in)43 b(Electrical)g(Engineering)g(and)i(Computer)f
(Science)i(from)d(the)h(Massac)m(h)m(usetts)k(Institute)d(of)-165
1176 y(T)-8 b(ec)m(hnology)33 b(\(M.I.T.\),)h(Cam)m(bridge,)e(in)f
(1973)h(and)h(1975,)e(resp)s(ectiv)m(ely)-8 b(.)-19 1460
y(He)46 b(is)e(presen)m(tly)j(a)e(Professor)h(of)e(Electrical)g(and)h
(Computer)g(Engineering)g(at)f(Carnegie)h(Mellon)-165
1625 y(Univ)m(ersit)m(y)38 b(\(CMU\),)g(Pittsburgh,)h(whic)m(h)f(he)g
(joined)e(in)h(1986.)57 b(Prior)37 b(to)g(this,)h(he)g(w)m(as)g(on)g
(the)f(facult)m(y)-165 1790 y(of)d(IST)i(where)g(he)f(w)m(as)h(an)f
(Assistan)m(t)g(Professor)h(\(1975\),)f(Professor)g(Agregado)g
(\(1978\),)f(and)h(Professor)-165 1956 y(Catedr\023)-49
b(atico)30 b(\(1979\).)42 b(He)32 b(has)g(had)f(visiting)e(app)s(oin)m
(tmen)m(ts)i(at)g(sev)m(eral)h(Institutions,)f(including)e(M.I.T.)-165
2121 y(\(Genrad)j(Asso)s(ciate)h(Professor)h(of)f(Electrical)e
(Engineering)h(and)h(Computer)g(Science,)h(1984{1986\))d(and)-165
2286 y(the)f(Univ)m(ersit)m(y)h(of)f(Southern)h(California)c(\(researc)
m(h)k(sc)m(holar,)g(Departmen)m(t)f(of)g(Aerospace)h(Engineering,)-165
2452 y(Summers)j(1978{1981\).)46 b(His)34 b(researc)m(h)i(in)m(terests)
f(include)f(statistical)e(signal)g(pro)s(cessing)j(\(one)f(and)h(t)m(w)
m(o)-165 2617 y(dimensional\),)e(digital)e(comm)m(unications,)j(image)f
(and)i(video)g(pro)s(cessing,)h(detection)f(and)g(mo)s(deling)d(in)-165
2782 y(high)k(densit)m(y)h(recording,)h(and)e(m)m(ultiresolution)e(tec)
m(hniques.)58 b(He)37 b(has)g(organized)f(and)h(co)s(directed)g(t)m(w)m
(o)-165 2948 y(in)m(ternational)29 b(scien)m(ti\014c)k(meetings)f(on)g
(signal)e(pro)s(cessing)j(theory)g(and)f(applications.)41
b(He)33 b(has)g(o)m(v)m(er)g(170)-165 3113 y(published)f(tec)m(hnical)g
(con)m(tributions)g(and)h(is)f(co-editor)g(of)g(t)m(w)m(o)h(b)s(o)s
(oks.)-19 3397 y(Dr.)e(Moura)g(is)f(curren)m(tly)i(the)g
Fp(Editor)h(in)g(Chief)52 b Fr(for)30 b(the)i Fp(IEEE)h(T)-7
b(r)i(ansactions)32 b(in)h(Signal)f(Pr)-5 b(o)g(c)g(essing)-165
3562 y Fr(and)25 b(a)g(mem)m(b)s(er)g(of)g(the)h Fp(Underwater)i(A)-5
b(c)g(c)g(oustics)28 b(T)-7 b(e)i(chnic)g(al)26 b(Committe)-5
b(e)28 b(of)g(the)g(Signal)f(Pr)-5 b(o)g(c)g(essing)27
b(So)-5 b(ci-)-165 3727 y(ety)p Fr(.)43 b(He)29 b(w)m(as)h(a)f(mem)m(b)
s(er)g(of)g(the)h Fp(IEEE)h(Pr)-5 b(ess)32 b(Bo)-5 b(ar)g(d)38
b Fr(\(1991-95\),)29 b(a)f(tec)m(hnical)h(Asso)s(ciate)h(Editor)e(for)h
(the)-165 3893 y Fp(IEEE)k(Signal)g(Pr)-5 b(o)g(c)g(essing)33
b(L)-5 b(etters)40 b Fr(\(1993-95\),)29 b(and)j(an)f(Asso)s(ciate)g
(Editor)g(for)g(the)h Fp(IEEE)h(T)-7 b(r)i(ansactions)-165
4058 y(on)37 b(Signal)g(Pr)-5 b(o)g(c)g(essing)43 b Fr(\(1988-92\).)50
b(He)36 b(w)m(as)h(a)e(program)f(committee)g(mem)m(b)s(er)h(for)g(the)h
(IEEE)h(In)m(terna-)-165 4223 y(tional)c(Conference)38
b(on)e(Image)f(Pro)s(cessing)i(\(ICIP'95\))g(and)f(for)f(the)i(IEEE)g
(In)m(ternational)e(Symp)s(osium)-165 4389 y(on)j(Information)e(Theory)
k(\(ISIT'93\).)62 b(He)38 b(is)g(a)h(F)-8 b(ello)m(w)37
b(of)h(the)g(IEEE)i(and)f(corresp)s(onding)f(mem)m(b)s(er)g(of)-165
4554 y(the)e Fp(A)-5 b(c)g(ademy)38 b(of)f(Scienc)-5
b(es)37 b(of)g(Portugal)f Fr(\(Section)g(of)f(Sciences\).)55
b(He)36 b(is)g(a\016liated)e(with)i(sev)m(eral)g(IEEE)-165
4719 y(so)s(cieties,)c(Sigma)f(Xi,)g(AMS,)j(IMS,)f(and)g(SIAM.)p
eop
24 23 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1091 b Fr(xxiv)-9 1222 y @beginspecial 26 @llx 640 @lly
253 @urx 767 @ury 1984 @rwi @setspecial
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000000000000000010
% c44444444444444444444444444764c444444444444444444444444450
% 8000000000000000000000000002250000000000000000000000000010
% 91111111111111111111111111133d1111111111111111111111111110
% 8000000000000000000000000002360000000000000000000000000010
% c47444444444444444444444444676444444444444444444444445c450
% 83e000000000000000000000000624000000000000000000000000f810
% bfe101010101010101010101010101010101010101010101010101ff90
% bfffffffffffffffffffffffffffffffffffffffffffffffffffffff90
% cfe444444444444444444444444444444444444444444444444444fe50
% 81e000000000000000000000000000000000000000000000000000f010
% 9131111111111111111111111111111111111111111111111111119110
% 8000000000000000000000000000000000000000000000000000000010
% c444444444444444444444444444444444444444444444444444444450
% 8000000000000000000000000000000000000000000000000000000010
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000c00000000000010
% c444444444444444444444444444444444444444444c44444444444450
% 8000000000000000000000000000000000000000000c00000000000010
% 9111111111111111111111111111111111111111111d11111111111110
% 800000000000000007e000060001f00000000000001e00000000000010
% c44444444444444444c444464444644444444444445e44444444444450
% 800000000000000000bf000903f0200000000000001e00000000000010
% 8101010101010101019de10901d3210101010101013f01010101010110
% 8000000000000000009620108161200000000000003f00000000000010
% c44444444444444444d46450c547644444444444447744444444444450
% 800000000000000000804020c001200000000000000400000000000010
% 91111111111111111191f16051173111111111119d1511111111111110
% 80000000000000000080004e6000200000000001980400000000000010
% c44444444444444444c444d22444644444444445fc4444444444444450
% 80000000000000000080009230002000000000f1b004000000001f9810
% 81010101010101010181019e7101210101010141d10501010101031910
% 800000000000000000800112b000200000000042b1840000003f021410
% c44444444444444444c447122c4464444444444447444444445d465450
% 80000000000000000080020e6800200000000000020400000016121210
% 9111111111111111119116002511311111111111111111111115331310
% 800000000000000000800400e400200000000000000000000000722110
% c44444444444444444c44c000644644444444444444444444444566150
% 8000000000000000008008000200200000000000000000000000722090
% 8101010161011f81018118000101210101010101010101010101032090
% 80000000901f8200008010000100200000000000000000000000022050
% c44444451c4ec64444c4600001c4644444444444444444444444466050
% 800000020c0b3200008020000080200000000000000000000000024030
% 91111114e71b33111191400000d1311111111111111111111111134030
% 8000000923002200008040000040200000000000000000000000024010
% c444445121c4664444c4c0000064644444444444444444444444464010
% 80000021e0c02200008080000020200000000000000000000000024010
% 810101412061030101810000002121010101010101010101010103c010
% 8000008124200200008100000010200000000000000000000000028010
% c4444500e414464444c600000014644444444444444444444444468010
% 800002000408020000820000000820000007e03007e000000000028010
% 9111140004051311119400000009311111119149119111111111138010
% 800008000602020000840000000420001f8080c600bf00000000028010
% c44450000003464444c80000000464444ec4c5f344dd44444444470010
% 800020000001820000980000000220000b088391809630000000030010
% 810140000000c30101900000000321010b198690c19561010101030010
% 800080000000620000b000000001200000288cf3608030000000030010
% c44500000000364444e0000000016444447cd89434c454444444470010
% 8002000000001a0e00e000000001a0000010b097188070000000030010
% 9114000000000f1311c000000000b1111111a0710d9111111111120010
% 800800000000061200c000000000e0000000c001068000000000020010
% c45000000000025e44800000000064444444800703c444444444460010
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8140000000000293a1800000000021010102800000c101010101020010
% 808000000000024e23800000000020000006800000e000000000020010
% c5000000000002646680000000003444444c8000009444444444460010
% 8200000000000230468000000000307000188000008800000000060010
% 9400000000000219f48000000000299111308000008511111111160010
% 880000000000020c088000000000289000608000008200000000060010
% d00000000000020648800000000024f444c080000081c4444444460010
% a0000000000002031080000000002491008080000080c0000000060010
% c0000000000002019080000000002393010080000080610101010a0010
% 8000000000000200a080000000002273020080000080300000000a0010
% 800000000000020060800000000023454400800000801c4444444a0010
% 8000000000001f8007e00000000021078800800000800c0000000a0010
% 80000000000000000000000000002191180080000080071111111a0010
% 80000000000000000000000000002080300080000080030000000a0010
% 800000000000000000000000000020c460008000008001c44444520010
% 80000000000000000000000000002040c0008000008000c00000120010
% 8000000000000000000000000000204180008000008000610101120010
% 8000000000000000000000000000202300008000008000300000120010
% 80000000000000000000000000002026000080000080000c4444520010
% 80000000000000000000000000002014000080000080000401c0320010
% 8000000000000000000000000001f0180007e000008000031351220010
% 8000000000000000000000000000000000000000008000010240220010
% 800000000000000000000000000000000000000000800000c7c4620010
% 8000000000000000000000000000000000000000008000006248220010
% 8000000000000000000000000000000000000000008000003351220010
% 80000000000000000000000000000000000000000080000019d6420010
% 8000000000000000000000000000000000000000008000000c56420010
% 800000000000000000000000000000000000000000800000061c420010
% 8000000000000000000000000000000000000000008000000311420010
% 8000000000000000000000000000000000000000008000000180420010
% 800000000000000000000c0000000000000000000080000000c4420010
% 800000000002000000000c000000000000000000008000000060820010
% 800000008c02000000001e3c0000000000000000008000000031820010
% 800000019802000000001e180000000000000000008000000018820010
% 80000001b802000000001e18000000000000000000800000000c820010
% 80000001b002000000003f6c0000000000000000008000000002820010
% 80000030d002000000000400000000000000000007e0000000019f8010
% 80000002b0020000000004000000000000000000000000000000000010
% 8000000001820000000004000000000000000000000000000000000010
% 8000000003020000000004000000000000000000000000000000000010
% 80000000021b8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 8000000000060000000004000000000000000000000000000000000010
% 80000000000600000000040003c0000000000000000000000000000010
% 8000000000060000000004000100000000000000000000000000000010
% 8000000000060000000004000300000000000000000000000000000010
% 8000000000000000000004000780000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000078000000000000000000000000000010
% 800000000000000000007ffffff8000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
26 692.5 59.5 726 91.5 691 119.5 744.5 149.5 682 180.5 715 233 666
 245.5 735.5 253 720 253 767.5 26 767.5 11 Y
0 X
0 0 1 0 1 1 0 K
V
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
26.11 639.72 252.88 767.28 R
0 0 0 1 0 0 0 K
N
26.11 703.5 252.89 703.5 2 L
N
83.12 691.26 80.13 691 77.15 691.26 3 L
0 Z
N
77.15 725.76 80.13 726.02 83.12 725.76 3 L
N
80.13 691.25 80.13 725.77 2 L
N
94.84 745.24 97.83 745.5 100.82 745.24 3 L
N
100.82 691.26 97.83 691 94.84 691.26 3 L
N
97.83 745.25 97.83 691.25 2 L
N
142.49 681.76 139.5 681.5 136.51 681.76 3 L
N
136.51 745.24 139.5 745.5 142.49 745.24 3 L
N
139.5 681.75 139.5 745.25 2 L
N
166.53 715.24 169.52 715.5 172.51 715.24 3 L
N
172.51 681.76 169.52 681.5 166.53 681.76 3 L
N
169.52 715.25 169.52 681.75 2 L
N
243.03 665.76 240.04 665.5 237.05 665.76 3 L
N
237.05 735.24 240.04 735.5 243.03 735.24 3 L
N
240.04 665.75 240.04 735.25 2 L
N
0 10 Q
(w) 99.5 739.18 T
0 8 Q
(2) 106.17 736.68 T
0 10 Q
(w) 127.83 739.03 T
0 8 Q
(3) 134.5 736.53 T
0 10 Q
(w) 156.87 708.55 T
0 8 Q
(4) 163.54 706.05 T
0 10 Q
(w) 195.89 708.77 T
0 8 Q
(5) 202.56 706.27 T
0 10 Q
(w) 227.91 728.92 T
0 8 Q
(6) 234.58 726.42 T
1 10 Q
(q) 84.56 699.74 T
1 8 Q
(2) 89.77 697.24 T
1 10 Q
(q) 116.56 730.24 T
1 8 Q
(3) 121.77 727.74 T
1 10 Q
(q) 146.06 691.74 T
1 8 Q
(4) 151.27 689.24 T
1 10 Q
(q) 177.56 705.24 T
1 8 Q
(5) 182.77 702.74 T
1 10 Q
(q) 56.56 714.87 T
1 8 Q
(1) 61.77 712.37 T
37.65 753.34 26.11 756.65 37.65 759.96 36.44 756.65 4 Y
V
241.35 759.96 252.89 756.65 241.35 753.34 242.55 756.65 4 Y
V
36.44 756.65 242.55 756.65 2 L
N
0 10 Q
(TW) 133.56 757.94 T
75.37 662.1 72.06 650.56 68.75 662.1 72.06 660.89 4 Y
V
72.06 670.06 72.06 660.89 2 L
1 Z
N
195.83 738.82 199.13 750.35 202.44 738.82 199.13 740.02 4 Y
V
199.13 730.85 199.13 740.02 2 L
N
108.14 666.46 111.14 671.65 114.14 666.46 111.14 666.46 4 Y
V
111.14 643.31 111.14 666.46 2 L
N
130.76 649.81 135.96 646.81 130.76 643.81 130.76 646.81 4 Y
V
130.76 646.81 107.61 646.81 2 L
N
(x) 115.6 665.76 T
(z) 127.86 651.23 T
(-M) 52.23 663.61 T
0 8 Q
(r) 63.89 661.11 T
0 10 Q
(+M) 176.8 732.16 T
0 8 Q
(r) 191.88 729.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
26 692.5 59.5 726 91.5 691 120 745.5 149.5 681.5 180.5 715.5 233.5 665.5
 245.5 735.5 253 721 9 L
2 Z
N
196.53 665.76 193.54 665.5 190.55 665.76 3 L
0 Z
N
190.55 715.24 193.54 715.5 196.53 715.24 3 L
N
193.54 665.75 193.54 715.25 2 L
N
0 10 Q
(w) 68.5 720.68 T
0 8 Q
(1) 75.17 718.18 T
1 10 Q
(q) 224.06 676.24 T
1 8 Q
(6) 229.27 673.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 1533 a(Figure)72 b(1:)125 b(A)74 b(sto)s(c)m(hastic)g
(zig-zag)e(transition)-165 1654 y(mo)s(del.)52 b(Lab)s(eled)36
b(are)h(the)f(sa)m(wto)s(oth)h(lengths)f(and)-165 1774
y(v)m(ertex)e(angles.)-9 2941 y @beginspecial 26 @llx
640 @lly 253 @urx 767 @ury 1984 @rwi @setspecial
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000000000000000010
% c44444444444444444444444444764c444444444444444444444444450
% 8000000000000000000000000002250000000000000000000000000010
% 91111111111111111111111111133d1111111111111111111111111110
% 8000000000000000000000000002360000000000000000000000000010
% c47444444444444444444444444676444444444444444444444445c450
% 83e000000000000000000000000624000000000000000000000000f810
% bfe101010101010101010101010101010101010101010101010101ff90
% bfffffffffffffffffffffffffffffffffffffffffffffffffffffff90
% cfe444444444444444444444444444444444444444444444444444fe50
% 81e000000000000000000000000000000000000000000000000000f010
% 9131111111111111111111111111111111111111111111111111119110
% 8000000000000000000000000000000000000000000000000000000010
% c444444444444444444444444444444444444444444444444444444450
% 8000000000000000000000000000000000000000000000000000000010
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000c00000000000010
% c444444444444444444444444444444444444444444c44444444444450
% 8000000000000000000000000000000000000000000c00000000000010
% 9111111111111111111111111191111111111111111d11111111111110
% 8000000000000000000000060081f00000000000001e00000000000010
% c4444444444444444444444644e4644444444444445e44444444444450
% 80000000000000000000000900a0200000000000001e00000000000010
% 8101010101010101010101090127210101010101013f01010101010110
% 8000000000000000000000108162200000000000003f00000000000010
% c44444444444444444444450c446644444444444447744444444444450
% 800000000000000000000020c002200000000000000400000000000010
% 911111111111111111111160511d3111111111119d1511111111111110
% 80000000000000000000004e6000200000000001980400000000000010
% c444444444444444444444d22444644444444445fc4444444444444450
% 80000000000000000000009230002000000000f1b00400000000001810
% 81010101010101010101019e7101210101010141d10501010101011910
% 800000000000000000000112b000200000000042b18400000000001410
% c444444444444444444447122c44644444444444474444444444445450
% 80000000000000000000020e6800200000000000020400000000001210
% 9111111111111111111116002511311111111111111111111111111310
% 800000000000000000000400e400200000000000000000000000002110
% c44444444444444444444c000644644444444444444444444444446150
% 8000000000040000000008000200200000000000000000000000002090
% 8101010161051f81010118000101210101010101010101010101012090
% 8000000090070200000010000100200000000000000000000000002050
% c44444451c4546444444600001c4644444444444444444444444446050
% 800000020c093200000020000080200000000000000000000000004030
% 91111114e71b33111111400000d1311111111111111111111111114030
% 8000000923002200000040000040200000000000000000000000004010
% c444445121c466444444c0000064644444444444444444444444444010
% 80000021e0c02200000080000020200000000000000800000000004010
% 810101412061030101010000002121010101010101090101010101c010
% 8000008124200200000100000010200000000000000e00000000008010
% c4444500e4144644444600000014644444444444444e64444444448010
% 800002000408020000020000000820000000003007f2c0000000008010
% 9111140004051311111400000009311111111149119771111111118010
% 80000800060202000004000000042000000000c6008020000000008010
% c4445000000346444448000000046444444445f344c4e4444444450010
% 8000200000018200001800000002200000000391808000000000010010
% 810140000000c301011000000003210101010690c18101010101010010
% 8000800000006200003000000001200000000cf3608000000000010010
% c44500000000364444600000000164444444589434c444444444450010
% 8002000000001a0e006000000001a00000003097188000000000010010
% 9114000000000f13114000000000b111111120710d9111111111120010
% 800800000000061200c000000000e00000004001068000000000020010
% c450000000001fde448000000001f4444444800707e444444444460010
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8140000000000093a1800000000021010102800000c101010101020010
% 808000000000004e238000000000200000068000006000000000020010
% c5000000000000646680000000001444444c8000001444444444460010
% 8200000000000030468000000000107000188000000800000000060010
% 9400000000000019f48000000000099111308000000511111111160010
% 880000000000000c088000000000089000608000000200000000060010
% d00000000000000648820000000004f444c080000001c4444444460010
% a0000000000000031082000000000491008080000000c0000000060010
% c0000000000000019083800000000393010080000000610101010a0010
% 8000000000000000a082b80000000273020080000000300000000a0010
% 800000000000000060848800000003454400800000001c4444444a0010
% 800000000000000007e58800000001078800800000000c0000000a0010
% 80000000000000000000100000000191180080000000071111111a0010
% 80000000000000000000380000000080300080000000030000000a0010
% 800000000000000000000000000000c460008000000001c44444520010
% 80000000000000000000000000000040c0008400000000c00000120010
% 8000000000000000000000000000004180008400000000610101120010
% 8000000000000000000000000000002300008700000000300000120010
% 80000000000000000000000000000026000085000000000c4444520010
% 80000000000000000000000000000014000089100000000401c0320010
% 800000000000000000000000000000180007eb30000000031351220010
% 8000000000000000000000000000000000000050000000010240220010
% 800000000000000000000000000000000000007000000000c7c4620010
% 8000000000000000000000000000000000000020000000006248220010
% 8000000000000000000000000000000000000000000000003351220010
% 80000000000000000000000000000000000000000000000019d6420010
% 8000000000000000000000000000000000000000000000000c56420010
% 800000000000000000000000000000000000000000000000061c420010
% 8000000000000000000000000000000000000000000000000311424010
% 8000000000000000000000000000000000000000000000000180424010
% 800000000000000000000c0000000000000000000000000000c4427010
% 800000000002000000000c000000000000000000000000000060825110
% 800000008c02000000001e3c0000000000000000000000000031829210
% 800000019802000000001e18000000000000000000000000001882b710
% 80000001b802000000001e18000000000000000000000000000c820510
% 80000001b002000000003f6c0000000000000000000000000002820710
% 80000030d00200000000040000000000000000000000000000019f8010
% 80000002b0020000000004000000000000000000000000000000000010
% 8000000001820000000004000000000000000000000000000000000010
% 8000000003020000000004000000000000000000000000000000000010
% 80000000021b8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 8000000000060000000004000000000000000000000000000000000010
% 80000000000600000000040003c0000000000000000000000000000010
% 8000000000060000000004000100000000000000000000000000000010
% 8000000000060000000004000300000000000000000000000000000010
% 8000000000000000000004000780000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000078000000000000000000000000000010
% 800000000000000000007ffffff8000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
26 692.5 59.5 726 91.5 691 119.5 744.5 149.5 682 180.5 715 233 666
 245.5 735.5 253 720 253 767.5 26 767.5 11 Y
0 X
0 0 1 0 1 1 0 K
V
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
26.11 639.72 252.88 767.28 R
0 0 0 1 0 0 0 K
N
26.11 703.5 252.89 703.5 2 L
N
83.12 703.76 80.13 703.5 77.15 703.76 3 L
0 Z
N
77.15 725.76 80.13 726.02 83.12 725.76 3 L
N
80.13 703.75 80.13 725.77 2 L
N
94.84 703.24 97.83 703.5 100.82 703.24 3 L
N
100.82 691.26 97.83 691 94.84 691.26 3 L
N
97.83 703.25 97.83 691.25 2 L
N
142.49 703.76 139.5 703.5 136.51 703.76 3 L
N
136.51 745.24 139.5 745.5 142.49 745.24 3 L
N
139.5 703.75 139.5 745.25 2 L
N
166.53 703.24 169.52 703.5 172.51 703.24 3 L
N
172.51 681.76 169.52 681.5 166.53 681.76 3 L
N
169.52 703.25 169.52 681.75 2 L
N
243.03 665.76 240.04 665.5 237.05 665.76 3 L
N
237.05 703.24 240.04 703.5 243.03 703.24 3 L
N
240.04 665.75 240.04 703.25 2 L
N
0 10 Q
(h) 103 690.18 T
0 8 Q
(2) 108 687.68 T
0 10 Q
(h) 128.83 739.53 T
0 8 Q
(3) 133.83 737.03 T
0 10 Q
(h) 174.37 680.55 T
0 8 Q
(4) 179.37 678.05 T
0 10 Q
(h) 196.89 713.27 T
0 8 Q
(5) 201.89 710.77 T
0 10 Q
(h) 241.91 668.42 T
0 8 Q
(6) 246.91 665.92 T
1 10 Q
(q) 84.56 699.74 T
1 8 Q
(2) 89.77 697.24 T
1 10 Q
(q) 116.56 730.24 T
1 8 Q
(3) 121.77 727.74 T
1 10 Q
(q) 146.06 691.74 T
1 8 Q
(4) 151.27 689.24 T
1 10 Q
(q) 177.56 705.24 T
1 8 Q
(5) 182.77 702.74 T
1 10 Q
(q) 56.56 714.87 T
1 8 Q
(1) 61.77 712.37 T
37.65 753.34 26.11 756.65 37.65 759.96 36.44 756.65 4 Y
V
241.35 759.96 252.89 756.65 241.35 753.34 242.55 756.65 4 Y
V
36.44 756.65 242.55 756.65 2 L
N
0 10 Q
(TW) 133.56 757.94 T
75.37 662.1 72.06 650.56 68.75 662.1 72.06 660.89 4 Y
V
72.06 670.06 72.06 660.89 2 L
1 Z
N
195.83 738.82 199.13 750.35 202.44 738.82 199.13 740.02 4 Y
V
199.13 730.85 199.13 740.02 2 L
N
108.14 666.46 111.14 671.65 114.14 666.46 111.14 666.46 4 Y
V
111.14 643.31 111.14 666.46 2 L
N
130.76 649.81 135.96 646.81 130.76 643.81 130.76 646.81 4 Y
V
130.76 646.81 107.61 646.81 2 L
N
(x) 115.6 665.76 T
(z) 127.86 651.23 T
(-M) 52.23 663.61 T
0 8 Q
(r) 63.89 661.11 T
0 10 Q
(+M) 176.8 732.16 T
0 8 Q
(r) 191.88 729.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
26 692.5 59.5 726 91.5 691 120 745.5 149.5 681.5 180.5 715.5 233.5 665.5
 245.5 735.5 253 721 9 L
2 Z
N
196.53 703.76 193.54 703.5 190.55 703.76 3 L
0 Z
N
190.55 715.24 193.54 715.5 196.53 715.24 3 L
N
193.54 703.75 193.54 715.25 2 L
N
0 10 Q
(h) 70 720.68 T
0 8 Q
(1) 75 718.18 T
1 10 Q
(q) 224.06 676.24 T
1 8 Q
(6) 229.27 673.74 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 3252 a(Figure)72 b(2:)125 b(A)74 b(sto)s(c)m(hastic)g
(zig-zag)e(transition)-165 3373 y(mo)s(del.)40 b(Lab)s(eled)26
b(are)h(zero-to-p)s(eak)f(distances)i(and)-165 3493 y(v)m(ertex)34
b(angles.)2040 1240 y @beginspecial 25 @llx 639 @lly
253 @urx 769 @ury 1984 @rwi @setspecial
% 0000000000000000000000000400000000000000000000000000000000
% 0000000400000000200000000400000000400000000400000000400000
% 7ffffffffffffffffffffffffffffffffffffffffffffffffffffffff8
% 4080808080808080808080808080808080808080808080808080808088
% 4000000000000000000000000000000000000000000000000000000008
% 6222222222222222222222222223b26222222222222222222222222228
% 4000000400000000200000000401128000400000000400000000400008
% 4888888c88888888a88888888c899e8888c88888888c88888888c88888
% 40000004000000002000000000011b0000400000000400000000400008
% 623a2222222222222222222222233b222222222222222222222222e228
% 41f0000000000000000000000003120000000000000000000000007c08
% 5ff080808080808080808080808080808080808080808080808080ffc8
% 5fffffffffffffffffffffffffffffffffffffffffffffffffffffffc8
% 67f2222622222222222222222622222222622222222622222222627f28
% 40f0000400000000200000000000000000400000000400000000407808
% 489888888888888888888888888888888888888888888888888888c888
% 4000000000000000000000000000000000000000000000000000000008
% 6222222222222222222222222222222222222222222222222222222228
% 4000000400000000200000000400000000400000000400000180400008
% 4080808480808080a08080808480808080c08080808480808180c08088
% 4000000000000000000000000000000000000000000000000180000008
% 62222222222222222222222222222222222222222222222223a2222228
% 40000000000000000000000000000000000000000000000003c0000008
% 4888888888888888888888888c88888888888888888888888bc8888888
% 40000004000000002000000004000000004000000004000007c0400008
% 62222226222222222222222226222222226222222226222227e2622228
% 40000000000000000000000000000000000000000000000007e0000008
% 4080808080808080808080808080808080808080808080808ee0808088
% 40000000000100000000000000000000000000000000000008a0000008
% 62222227ffffffffe222222226222222222222222222222322a2222228
% 4000000400010000200000000400000000400000000400660080400008
% 4888888c00010000288888888c88888888c88888888c98ee8888c88888
% 400000040001000020000000000000000000000000003c6c0080000008
% 62222224000100002222222222222222222222b22222323622a2222228
% 4000000400010000200000000000000000000090000010ac0080000008
% 4080808400010000208080808480808080c0809080848080e080c08088
% 40000004000100002000000004000000004000d000040000c080400008
% 62222224000100002222222226222222226222fa22262222a2a2622228
% 4000000400010000200010000000000000000080000000000000000008
% 4888888c000100003ffffffffc888888888c8888888888888888888888
% 40000004000100000000100004000000001c000000e000000000000008
% 62222224000100002000100006222222227e222222f622222222622228
% 40000004000100002000100004000000007ffffffff400000000400008
% 4080808400010000200010000480808080dc808080e480808080c08088
% 4000000400010000000010000400000000040000008000000000000008
% 6222222400012000000010000622222222222222222222222222222228
% 4000000400012000000010000400000000000000000000000000000008
% 4888888c00013800200010000488888888c88888888c88888888c88888
% 4000000400012980200010000400000000400000000400010000400008
% 62222224000149802000140006222222226222222227ffffffffe22228
% 4000000400015900000014000400000000000000000400010000400008
% 4080808400010100000017000480808080808080808400010000408088
% 4000000400010100000015000400000000000000000400010000400008
% 6222222400010000200019700622222222622222222400010000622228
% 400000040001000020001b100400000000400000000400012000400008
% 4888888c00010000000010100488888888888888888c00012000488888
% 4000000400010000000010200400000000000000000400013800400008
% 6222222400010000000010700622222222222222222400012800622228
% 4000000400010000000010000400000000000000000400014980400008
% 4080808400010000200010000480808080c08080808400015b00408088
% 4000000400010000200010000400000000400000000400010180400008
% 6222222400010000000010000622222222222222222400010080622228
% 4000000400010000000010000400000000000000000400010380400008
% 4888888c00010000000010000488888888888888888c00010000488888
% 4000000400010000000010000400000000000000000400010000400008
% 6222222400010000200010000622222222622232222400010000622228
% 7ffffffffffffffffffffffffffffffffffffffffffffffffffffffff8
% 408080840000000000000000048080b880808090808400000000408088
% 4000000400000000000000000400002980000010000400000000400008
% 6222222400000000000000000622226aa2222232222400000000622228
% 4000000400000000200000000400005980400010000400000000400008
% 4888888c00000000200000000488888888c88898888c00000000488888
% 4000000400000000200000000400000300400010000400000000400008
% 6222222400000000000000000622222222222232222400000000622228
% 4000000400000000000000000400000000000010000400000000400008
% 40808084000000000000000007ffffffffc08090808400000000408088
% 4000000400000000200000000400000000400010000400000000400008
% 6222222400000000200000000400000000622232222400000000622228
% 4000000400000000200000000000000000400010000400000000400008
% fffffffc00000000000000000000000000488898888c000000007ffff8
% 4000000000000000000000000000000000400010000400000000000008
% 4000000000000000000000000000000000622236222400000000000008
% 4000000400000000200000000400000000400014000400000000400008
% 4000000400000000200000000400000000408097808400000000400008
% 4000000000000000000000000000000000400015100400000000000008
% 400000000000000000000000000000000062223b322400000000000008
% 400000000000000000000000000000000040001b500400000000000008
% 4000000000000000000000000000000000488898f88c00000000000008
% 4000000400000000200000000400000000400010200400000000400008
% 4000000400000000200000000400000000622232222400000000400008
% 4000000000000000000000000000000000400010000400000000000008
% 4000000000000000000000000000000000408090808400000000000008
% 4000000000000000000000000000000000400010000400000000000008
% 4000000000000000000000000400000000622232222400000000000008
% 4000000400000000200000000400000000400010000400000000400008
% 4000000400000000200000000400000000488898888c00000000400008
% 4000000000000200018000000000000000400010000400000000000008
% 4000000000000200018000000000000000622232222400000000000008
% 40000000008c020003c780000000000000400010000400000000000008
% 400000040198020023c300000400000000408090808400000000400008
% 4000000401b8020023c300000400000000400010000400000000400008
% 4000000401b0020027ed80000400000000622232222400000000400008
% 4000000030d00200008000000000000000400010000400000000000008
% 4000000002b182000080000000000000007ffffffffc00000000000008
% 4000000000030200008000000000000000000000000000000000000008
% 4000000400021280208000000400000000400000000400000000400008
% 4000000400001b80208000000400000000400000000400000000400008
% 4000000400001f80208000000400000000400000000400000000400008
% 4000000000000f00008000000000000000000000000000000000000008
% 4000000000000f00008000000000000000000000000000000000000008
% 4000000000000f00008000000000000000000000000000000000000008
% 4000000400000f00208000000400000000400000000400000000400008
% 4000000400000600208000000400000000400000000400000000400008
% 4000000400000600208000780000000000400000000400000000400008
% 4000000000000600008000200000000000000000000000000000000008
% 4000000000000600008000600000000000000000000000000000000008
% 4000000000000000008000f00000000000000000000000000000000008
% 4000000400000000208000000400000000400000000400000000400008
% 4000000400000000208000080400000000400000000400000000400008
% 40000000000000000080000e0000000000000000000000000000000008
% 40000000000000000080000f0000000000000000000000000000000008
% 40000000000000000fffffff0000000000000000000000000000000008
% 40000000000000000080000e0000000000000000000000000000000008
% 4000000400000000208000080400000000400000000400000000400008
% 4000000400000000208000000400000000400000000400000000400008
% 4000000000000000008000000000000000000000000000000000000008
% 4000000000000000000000000000000000000000000000000000000008
% 4000000000000000000000000000000000000000000000000000000008
% 4000000400000000200000000400000000400000000400000000400008
% 7ffffffffffffffffffffffffffffffffffffffffffffffffffffffff8
% 0000000400000000200000000400000000400000000400000000400000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
26 690 54 690 54 740 90.5 740 90.5 730 125.5 730 125.5 694.5
 162 694.5 162 666 198 666 198 720 234 720 234 690 253 690 253 767.5
 26 767.5 16 Y
0 X
0 0 1 0 1 1 0 K
V
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
26.11 639.72 252.88 767.28 R
0 0 0 1 0 0 0 K
N
26.11 703.5 252.89 703.5 2 L
N
0 10 Q
(h) 109 713.68 T
0 8 Q
(2) 114 711.18 T
0 10 Q
(h) 146.33 698.03 T
0 8 Q
(3) 151.33 695.53 T
0 10 Q
(h) 181.37 682.05 T
0 8 Q
(4) 186.37 679.55 T
0 10 Q
(h) 217.89 708.77 T
0 8 Q
(5) 222.89 706.27 T
37.65 753.34 26.11 756.65 37.65 759.96 36.44 756.65 4 Y
V
241.35 759.96 252.89 756.65 241.35 753.34 242.55 756.65 4 Y
V
36.44 756.65 242.55 756.65 2 L
0 Z
N
0 10 Q
(TW) 133.56 757.94 T
82.37 663.6 79.06 652.06 75.75 663.6 79.06 662.39 4 Y
V
79.06 671.56 79.06 662.39 2 L
1 Z
N
221.33 740.32 224.63 751.85 227.94 740.32 224.63 741.52 4 Y
V
224.63 732.35 224.63 741.52 2 L
N
94.14 667.46 97.14 672.65 100.14 667.46 97.14 667.46 4 Y
V
97.14 644.31 97.14 667.46 2 L
N
116.76 650.81 121.96 647.81 116.76 644.81 116.76 647.81 4 Y
V
116.76 647.81 93.61 647.81 2 L
N
(x) 101.6 666.76 T
(z) 113.86 652.23 T
(-M) 59.23 665.11 T
0 8 Q
(r) 70.89 662.61 T
0 10 Q
(+M) 202.3 733.66 T
0 8 Q
(r) 217.38 731.16 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(h) 74 718.18 T
0 8 Q
(1) 79 715.68 T
26 690 54 690 54 740 90.5 740 90.5 730 125.5 730 125.5 694.5
 162 694.5 162 666 198 666 198 720 234 720 234 690 253 690 14 L
2 Z
N
J
54 767.5 54 639.5 2 L
J
54 767.5 54 766.75 2 L
N
[1.454 4.362] 1.454 I
54 766.75 54 640.25 2 L
N
J
54 640.25 54 639.5 2 L
N
J
90.5 767.5 90.5 639.5 2 L
J
90.5 767.5 90.5 766.75 2 L
N
[1.454 4.362] 1.454 I
90.5 766.75 90.5 640.25 2 L
N
J
90.5 640.25 90.5 639.5 2 L
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
J
125.5 768 125.5 639.5 2 L
J
125.5 768 125.5 767.25 2 L
N
[1.46 4.379] 1.46 I
125.5 767.25 125.5 640.25 2 L
N
J
125.5 640.25 125.5 639.5 2 L
N
J
162 767.5 162 639.5 2 L
J
162 767.5 162 766.75 2 L
N
[1.454 4.362] 1.454 I
162 766.75 162 640.25 2 L
N
J
162 640.25 162 639.5 2 L
N
J
198 767.5 198 639.5 2 L
J
198 767.5 198 766.75 2 L
N
[1.454 4.362] 1.454 I
198 766.75 198 640.25 2 L
N
J
198 640.25 198 639.5 2 L
N
J
234 767.5 234 639.5 2 L
J
234 767.5 234 766.75 2 L
N
[1.454 4.362] 1.454 I
234 766.75 234 640.25 2 L
N
J
234 640.25 234 639.5 2 L
N
J
72 740 72 703.5 2 L
N
108 730 108 703.5 2 L
N
180 666 180 703.5 2 L
N
216 703.5 216 720 2 L
N
192.8 730.5 198 727.5 192.8 724.5 192.8 727.5 4 Y
V
167.2 724.5 162 727.5 167.2 730.5 167.2 727.5 4 Y
V
192.8 727.5 167.2 727.5 2 L
0 Z
N
1 10 Q
(m) 177 731 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 1884 1551 a(Figure)j(3:)55 b(The)39 b(microtrac)m(k)f(mo)s
(del.)59 b(The)39 b(micro-)1884 1671 y(trac)m(k)33 b(width)g(is)f
(denoted)h(with)g Fl(\026)p Fr(.)2040 2838 y @beginspecial
26 @llx 640 @lly 253 @urx 767 @ury 1984 @rwi @setspecial
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000000000000000010
% c44444444444444444444444444764c444444444444444444444444450
% 8000000000000000000000000002250000000000000000000000000010
% 91111111111111111111111111133d1111111111111111111111111110
% 8000000000000000000000000002360000000000000000000000000010
% c47444444444444444444444444676444444444444444444444445c450
% 83e000000000000000000000000624000000000000000000000000f810
% bfe101010101010101010101010101010101010101010101010101ff90
% bfffffffffffffffffffffffffffffffffffffffffffffffffffffff90
% cfe444444444444444444444444444444444444444444444444444fe50
% 81e000000000000000000000000000000000000000000000000000f010
% 9131111111111111111111111111111111111111111111111111119110
% 8000000000000000000000000000000000000000000000000000000010
% c444444444444444444444444444444444444444444444444444444450
% 8000000000000000000000000000000000000000000000000000000010
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000c00000000000010
% c444444444444444444444444444444444444444444c44444444444450
% 8000000000000000000000000000000000000000000c00000000000010
% 9111111111fd1111131111111111111111111111111d11111111111110
% 8000000040100000078000000000000000000000001e00000000000010
% c44444444454444444c444444444444444444444445e44444444444450
% 8000000070100000084000000000000000000000001e00000000000010
% 8101010157110101186101010101010101010101013f01010101010110
% 800000009110000013a000000000000000000000003f00000000000010
% c4444444f5544444649444444444444444444444447744444444444450
% 8000000002100000649800000000000000000000000400000000000010
% 91111111171111114789111111111111111111119d1511111111111110
% 8000000000100000848400000000000000000001980400000000000010
% c444444444544445848644444444444444444445fc4444444444444450
% 8000000000100001038200000081f000030000f1b00400000000000010
% 8101010101110102000101010181210107810141d10501010101010110
% 80000000001000060001800000e0200004800042b18400000000000010
% c4444444445444440000c44444e4644448444444474444444444444450
% 800000000010000800004000012220001be00000020400000000000010
% 9111111111111118000071111177311114b11111111111111111111110
% 800000000010001000002000000a200024900000000000000000000010
% c44444444454446000001444444e6444679c4444444444444444444450
% 80000000001000600000180000042000c4880000000000000000000010
% 8101010101110140000009010101210184850101010101010101010110
% 8000000000100080000004000000200103860000000000000fc00c0010
% c4444444445445800000064444446447000244444444444445445e4450
% c000000000100100000002000000200200010000000000040100120010
% b111111111111200000003111111311400019111111111171111211110
% b000000000100600000001800000200c000080000000000501006f8010
% 9444444444544400000000c444446448000044444444444d554452c450
% 8800000000100800000000c000002010000060000000000b210092c010
% 8d010101011118000000006101012130000021010101010171019e4110
% 8400000000103000000000200000202000001000000000005101122010
% 8244444444546000000000344444644000001c44444444447546123450
% 830000000010600000000010000020c0000008000000000001060e1010
% 811111111111c00000000009111131800000051111111111111c000910
% 81800008001080000000000c0200210000000600000080000108000c10
% 80c4444c445580000000000446446600000002444444c4444558000450
% 8040000e001300000000000203802600000001000000e0000130000210
% 8061010b611200000000000303992400000001810101a7010120000310
% 802000126014000000000001048828000000008000012c000140000110
% 8014445c445c000000000000c75c7800000000444445c64445c00001d0
% 801800004018000000000000c008300000000060000002000180000090
% 800911115110000000000000513120000000003111111f111100000050
% 8004000000300000000000002000600000000010000000000300000070
% 8006444444fc0000000000003445f0000000001c444444444fc0000030
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8003010101c0000002000000190180000200000d010101010c00080010
% 8003800000800000038000001c0300000380000e0000000008000e0010
% 8002c4444500000002800000144600000280000a4444444450000a2010
% 800240000300000004b800001204000004880009000000003000124010
% 800271111200000007080000131c0000071800099111111120001ce010
% 800220000400000000080000110800000028000880000000400000a010
% 800214444c0000000010000010d000000038000844444444c00000e010
% 8002181c080000000038000010f0000000100008600000008000000010
% 8002092510000000000000001060000000000008210101010000000010
% 80020c243000000000000000fc00000000000008100000030000000010
% 8002047c600000000000001000000000000000081c4444460000000010
% 8002022440000000000000100000000000000008080000040000000010
% 80020335c00000000000001c00000000000000080511111c0000000010
% 8002011c8000000000000014c000000000000008060000080000000010
% 800200c500000000000000244000000000000008024444500000000010
% 800200c3000000000000002cc000000000000008010000300000000010
% 8002004200000000000000004000000000000008018101600000000010
% 8002002400000000000000018000000000000008008000400000000010
% 8002003c000000000000000000000000000000080044e4c00000000010
% 8002001800000000000000000000000000000008006121800000000010
% 821f800000000000000000000000000000000008003131000000000010
% 82000000000000000000000000000000000000080011e2000000000010
% 8380000000000000000000000000000000000008001d66000000000010
% 8280000000000000000000000000000000000008000924000000000010
% 84980000000000000000000000000000000000080005e8000000000010
% 8598000000000000000000000000000000000008000618000000000010
% 8010000000000000000000000000000000000008000250000000000010
% 8010000000000000000000000000000000000008000120000000000010
% 80100000000000000000000000000000000000080001e0000000000010
% 80000000000000000000000000000000000000080000c0000000000010
% 800000000000000000000c00000000000000007e000000000000000010
% 800000000002000000000c000000000000002000000000000000000010
% 800000008c02000000001e3c0000000000002000000000000000000010
% 800000019802000000001e180000000000003800000000000000000010
% 80000001b802000000001e180000000000002800000000000000000010
% 80000001b002000000003f6c0000000000004980000000000000000010
% 80000030d0020000000004000000000000005b00000000000000000010
% 80000002b0020000000004000000000000000180000000000000000010
% 8000000001820000000004000000000000000080000000000000000010
% 8000000003020000000004000000000000000380000000000000000010
% 80000000021b8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 8000000000060000000004000000000000000000000000000000000010
% 80000000000600000000040003c0000000000000000000000000000010
% 8000000000060000000004000100000000000000000000000000000010
% 8000000000060000000004000300000000000000000000000000000010
% 8000000000000000000004000780000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000078000000000000000000000000000010
% 800000000000000000007ffffff8000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
26.11 724.76 54.46 682.24 96.98 746.02 132.41 692.87 160.76 735.39 203.28 671.61 238.71 724.76
 252.89 703.5 252.89 767.28 26.11 767.28 10 Y
0 X
0 0 1 0 1 1 0 K
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
26.11 639.72 252.88 767.28 R
2 Z
0 0 0 1 0 0 0 K
N
26.11 703.5 252.89 703.5 2 L
N
26.11 724.76 54.46 682.24 96.98 746.02 132.41 692.87 160.76 735.39 203.28 671.61 238.71 724.76
 252.89 703.5 8 L
N
37.3 703.24 40.29 703.5 43.28 703.24 3 L
0 Z
N
43.28 682.5 40.29 682.24 37.3 682.5 3 L
N
40.29 703.25 40.29 682.49 2 L
N
71.62 703.76 68.63 703.5 65.65 703.76 3 L
N
65.65 745.76 68.63 746.02 71.62 745.76 3 L
N
68.63 703.75 68.63 745.77 2 L
N
122.34 703.24 125.33 703.5 128.32 703.24 3 L
N
128.32 693.13 125.33 692.87 122.34 693.13 3 L
N
125.33 703.25 125.33 693.12 2 L
N
142.49 703.76 139.5 703.5 136.51 703.76 3 L
N
136.51 735.13 139.5 735.39 142.49 735.13 3 L
N
139.5 703.75 139.5 735.14 2 L
N
179.03 703.24 182.02 703.5 185.01 703.24 3 L
N
185.01 671.87 182.02 671.61 179.03 671.87 3 L
N
182.02 703.25 182.02 671.86 2 L
N
227.53 703.76 224.54 703.5 221.55 703.76 3 L
N
221.55 724.5 224.54 724.76 227.53 724.5 3 L
N
224.54 703.75 224.54 724.51 2 L
N
0 10 Q
(h) 31.29 675.76 T
0 8 Q
(1) 36.29 673.26 T
0 10 Q
(h) 58 739.18 T
0 8 Q
(2) 63 736.68 T
0 10 Q
(h) 116.33 686.03 T
0 8 Q
(3) 121.33 683.53 T
0 10 Q
(h) 128.87 728.55 T
0 8 Q
(4) 133.87 726.05 T
0 10 Q
(h) 171.39 664.77 T
0 8 Q
(5) 176.39 662.27 T
0 10 Q
(h) 213.91 717.92 T
0 8 Q
(6) 218.91 715.42 T
0 10 Q
(b) 52.55 707.29 T
0 8 Q
(1) 57.55 704.79 T
0 10 Q
(b) 95.07 696.66 T
0 8 Q
(2) 100.07 694.16 T
0 10 Q
(b) 126.96 707.29 T
0 8 Q
(3) 131.96 704.79 T
0 10 Q
(b) 158.85 696.66 T
0 8 Q
(4) 163.85 694.16 T
0 10 Q
(b) 201.37 707.29 T
0 8 Q
(5) 206.37 704.79 T
0 10 Q
(b) 236.8 697.02 T
0 8 Q
(6) 241.8 694.52 T
1 10 Q
(q) 94.56 734.24 T
(q) 158.56 723.74 T
(q) 201.06 676.74 T
(q) 236.56 713.74 T
(q) 52.06 687.87 T
37.65 753.34 26.11 756.65 37.65 759.96 36.44 756.65 4 Y
V
241.35 759.96 252.89 756.65 241.35 753.34 242.55 756.65 4 Y
V
36.44 756.65 242.55 756.65 2 L
N
0 F
(TW) 133.56 757.94 T
75.37 662.1 72.06 650.56 68.75 662.1 72.06 660.89 4 Y
V
72.06 670.06 72.06 660.89 2 L
1 Z
N
195.83 738.82 199.13 750.35 202.44 738.82 199.13 740.02 4 Y
V
199.13 730.85 199.13 740.02 2 L
N
108.14 666.46 111.14 671.65 114.14 666.46 111.14 666.46 4 Y
V
111.14 643.31 111.14 666.46 2 L
N
130.76 649.81 135.96 646.81 130.76 643.81 130.76 646.81 4 Y
V
130.76 646.81 107.61 646.81 2 L
N
(x) 115.6 665.76 T
(z) 127.86 651.23 T
(-M) 52.23 663.61 T
0 8 Q
(r) 63.89 661.11 T
0 10 Q
(+M) 176.8 732.16 T
0 8 Q
(r) 191.88 729.66 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 1884 3150 a(Figure)72 b(4:)125 b(The)74
b(triangle)d(zig-zag)h(transition)1884 3270 y(mo)s(del.)p
eop
25 24 bop -133 -102 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1118 b Fr(xxv)-9 1709 y @beginspecial 125 @llx 442 @lly
372 @urx 653 @ury 1984 @rwi @setspecial
% 00000007ffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00000007ffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00000007ffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00000007000000000000000000000000000180000000008000000000000007
% 00000007000000000000000000000000000300000000008000000000000007
% 00000007000000000000000000000000000200000000008000000000000007
% 00000007000000000000000000000000000400000000008000000000000007
% 00000007000000000000000000000000000800000000008000000000000007
% 00000007000000000000000000000000001800000000008000000000000007
% 00000007000000000000000000000000003000000000008000000000000007
% 00000007000000000000000000000000006000000000008000000000000007
% 0000000700000000000000000000000000c000000000008000000000000007
% 00000007000000000000000000000000018000000000008000000000000007
% 00000007000000000000000000000000030000000000008000000000000007
% 00000007000000000000000000000000020000000000008000000000000007
% 00000007000000180000000000000000040000000000008000000000000007
% 00000007000000180000000000000000080000000000008000000000000007
% 00000007000000180000000000000000100000000000004000000000000007
% 00000007000000180000000000000000300000000000004000000000000007
% 000000070000003c0000000000000000600000000000004000000000000007
% 000000070000003c0000000000000000c00000000000004000000000000007
% 000000070000003c0000000000000001800000000000004000000000000007
% 000000070000003c0000000000000003000000000000004000000000000007
% 000000070000007e0000000000000006000000000000004000000000000007
% 000000070000007e000000000000000c000000000000004000000000000007
% 000000070000007e0000000000000018000000000000004000000000000007
% 00000007000000080000000000000030000020000000002000000000000007
% 00000007000000080000000000000060000020000000002000000000000007
% 000000070000000800000000000000c0000020000000002000000000000007
% 00000007000000080000000000000180000020000000002000000000000007
% 00000007000000080000000000000300000020000000002000000000000007
% 00000007000000080000000000000600000020000000002000000000000007
% 00000007000000080000000000000c00000020000000002000000000000007
% 00000007000000080000000000001000000020000000002000000000000007
% 00000007000000080000000000002000000020000000003000000000000007
% 0000000700000008000000000000c000000020000000001000000000000007
% 00000007000000080000000000018000000020000000001000000000000007
% 000000070000000000000000000300000001fc000000001000000000000007
% 000000070000000000000000000c00000001fc000000001000000000000007
% 000000070000000000000000001800000001f8000000000800000000000007
% 000000070000000000000000003000000000f8000000000800000000000007
% 00000007000000000000000000c000000000f8000000000800000000000007
% 000000070000000000000000018000000000f0000000000800000000000007
% 000000070000000000000000030000000000f0000000000400000000000007
% 00000007c00000000000000004000000000070000000000400000000000007
% 00000007700000000000000018000000000060000000000400000000000007
% 000000071c0000000000000060000000000060000000000400000000000007
% 000000070600000000000001c0000000000060000000000600000000080007
% 00000007018000000000000300000000000000000000000200000000180007
% 0000000700c000000000000c00000000000000000000000200000000180007
% 000000070060000000000030000000000000000000000002000000001c0007
% 0000000700300000000000e0000000000000000000000001000000001c0007
% 00000007000c000000000180000000000000000000000001000000003c0007
% 000000070006000000000600000000000000000000000001000000003e0007
% 000000070003800000007800000000000000000000000000800000003e0007
% 000000070000e0000003c000000000000000000000000000800000007e0007
% 0000000700003800001e0000000000000000000000000000c00000007f0007
% 0000000700000e0000e00000000000000000000000000000400000007f0007
% 00000007000003e01f00000000000000000000000000000040000000080007
% 000000070000003fe000000000000000000000000000000020000000080007
% 00000007000000000000000000000000000000000000000020000000080007
% 000000070000000000000000000003ffffff00000000000020000000080007
% 00000007000000000080000000003c000001fc000000000010000000080007
% 0000000700000000008000000001c000000007000000000010000000080007
% 00000007000000000080000000030000000000e00000000018000000080007
% 000000070000000000800000000c0000000000180000000008000000080007
% 000000070000000000800000001800000000000c0000000004000000080007
% 00000007000000000080000000100000000000030000000004000000080007
% 00000007000000000080000000200000000000018000000002000000080007
% 0000000700000000008000000060000000000000c000000002000000080007
% 00000007000000000080000000400000000000003000000001000000000007
% 00000007000000000080000000400000000000001800000001800000000007
% 00000007000000000080000000400000000000000c00000000800000000007
% 000000070000000007e0000000400000000000000300000000c00000000007
% 000000070000000007e0000000400000000000000180000000400000000007
% 000000070000000007e00000004000000000000000c0000000600000000007
% 000000070000000003c0000000400000000000000060000000300000000007
% 000000070000000003c0000000400000000000000030000000180000000007
% 000000070000000003c00000002000000000000000180000000c0000000007
% 000000070000000003c000000020000000000000000c000000060000000007
% 00000007000008000180000000200000000000000006000000020000000007
% 000000070007fe000180000000100000000000000003000000010000000007
% 00000007000c01800180000000100000000000000001800000008000000007
% 00000007001800600180000000080000000000000000c0000000c000000007
% 00000007001000100000000000040000000000000000600000006000000007
% 000000070010000c0000000000020000000000000000300000001800000007
% 000000070020000400000007f00180000000000fe000180000000e00000007
% 00000007002000020000000c3000e0000000001860000c0000000300000007
% 00000007002000020000000810001c000000001020000600000000c0000007
% 00000007002000010000001810000380000000302000030000000070000007
% 000000070020000180000018000000e000000030000001800000000f800007
% 0000000700400000800000180000001c00000030000000c0000000007c0007
% 0000000700400000c000001801c00003c00000300380006000000000070007
% 0000000700400000400000080260000078000010048000300000000000e007
% 00000007004000002000000c122000000e0000182080001800000000003007
% 000000070040000020000007e06000000300000fc180000c00000000001007
% 000000070040000010000000004000000180000000c0000200000000000807
% 0000000700400000180000000080000000c000000040000100000000000c07
% 000000070040000008000000012000000040000000c0000080000000000607
% 00000007004000000c00000003e00000004000000780000040000000000207
% 00000007004400003608000000000000044600000000000060200000001107
% 00000007009c00003b38000000000000074e00000000000070e00000001d07
% 0000000700bc00003ff800000000000007fe00000000000079e00000001e87
% 0000000700bffffffefffffffffffffffffffffffffffffffdfffffffffe87
% 00000007009c00003878000000000000074e00000000000076e00000001c47
% 00000007008400003038000000000000044600000000000043200000001047
% 00000007008000000018000000000000008000000000000001800000000027
% 00000007008007f0000c000000000000008000000000000000c003f8000037
% 0000000700800c300006000000000000008000000000000000400618000017
% 0000000700400810000300000000000000800000000000000020040800001f
% 00000007004018100001800000000000010000000000000000200c0800000f
% 00000007004018000000600000000000010000000000000000100c0000000f
% 00000007004018000000300000000000010000000000000000100c00000007
% 00000007004018008000180000000000030000000000000000180c00400007
% 00000007004008018000060000000000020000000000000000080400c00007
% 0000000700400c108000030000000000020000000000c00000080608c00007
% 00018007002007e08000018000000000020000000000c000000403f1400007
% 73018007002000008000006000000000040000000000c00000040002400007
% 36018007002000008000003000000000040000000000c00000040003e00007
% 1c018007002000008000000c00000000040000000001e00000040000400007
% 1803c00700200000c000000600000000040000000001e00000040000400007
% 1c03c007002000000000000300000000080000000001e00000040000000007
% 2f03c0070010000000000000c0000000080000000003f00000040000000007
% c603c007001000000000000060000000080000000003f00000040000000007
% 0007e007001800000000000010000000080000000003f00000040000000007
% 0007e00700080000000000000c000000100000000000400000040000000007
% 0007e0070008000000000000060000001000000000004000000c0000000007
% 0003c007000400000000000001800000100000000000400000080000000007
% 00008007000400000000000000c00000100000000000400000180000000007
% 00008007000200000000000000600000100000000000400000100000000007
% 00008007000300000000000000300000100000000000400000300000000007
% 00008007000100000000030000080000100000000000400000200000000007
% 00008007000080000000030000060000100000000000400000600000000007
% 000080070000c0000000030000030000100000000000400000400000000007
% 00008007000040000000030000018000080000000000400000c00000000007
% 0000800700002000000007800000c000080000000000400001800000000007
% 000080070000100000000780000020000c0000000000400003000000000007
% 0000800700000c000000078000001000040000000000000006000000000007
% 0000800700000600000007800000080003000000000000000c000000000007
% 000080070000030000000fc000000c00018000000000000008000000000007
% 000080070000018000000fc00000060000c000000000000010000000000007
% 000080070000006000000fc000000200006000000000000020000000000007
% 00008007000000180000010000000100001800000000000040000000000007
% 000080070000000e0000010000000080000600000000000180000000000007
% 000080070000000300000100000000c00001c0000000000300000000000007
% 0000800700000000c000010000000060000060000000000600000000000007
% 00008007000000006000010000000020000020000000001800000000000007
% 00008007000000001800010000000010000010000000003000000000000007
% 00008007000000000c00010000000018000008000000006000000000000007
% 0000800700000000020001000000000800000c000000018000000000000007
% 00008007000000000100010000000008000004000000030000000000000007
% 000080070000000000800100000000040000020000000c0000040000000007
% 00008007000000000040010000000004000002000000300000040000000007
% 00008007000000000020000000000004000001000000600000040000000007
% 00008007000000000010000000000002000001000001800000040000000007
% 00008007000000000008000000000002000000800006000000040000000007
% 00008007000000000004000000000002000000c0000c000000040000000007
% 00008007000000000002000000000001000000400030000000040000000007
% 000080070000000000010000000000010000002000e0000000040000000007
% 00008007000000000000800000000001800000100380000000040000000007
% 000080070000000000004000000000008000000c0c00000000040000000007
% 0000800700000000000020000000000080000003f000000000040000000007
% 000080070000000000001800000000008000000000000000003f0000000007
% 000080070000000000000c00000000008000000000000000003f0000000007
% 000080070000000000000300000000004000000000000000003f0000000007
% 000080070000000000000180000000004000000000000000001e0000000007
% 000080070000000000000060000000004000000000000000001e0000000007
% 000080070000000000000030000000004000000000000000001e0000000007
% 000080070000000000000008000000004000000000000000001e0000000007
% 000080070000000000000004000000004000000000000000000c0000000007
% 000080070000000000000002000000004000000000000000000c0000000007
% 000080070000000000000003000000004000000000000000000c0000000007
% 000080070000000000000001800000004000000000000000000c0000000007
% 00008007000000000000000080000000400000000000000000000000000007
% 000080070000000000000000c0000000400000000000000000000000000007
% 00008007000000000000000040000000400000000000000000000000000007
% 00008007000000000000000020000000800000000000000000000000000007
% 00008007000000000000000020000000800000000000000000000000000007
% 00008007000000000000000020000000800000000000000000000000000007
% 00008007000000000000000010000000800000000000000000000000000007
% 00008007ffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00008007ffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00008007ffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000380000000000000000000000000000000000000
% 000080000000000000000007f0000000000000000000000000000000000000
% 000080000000000000000007ff000000000000000000000000000000000000
% 0fffffffffffffffffffffffff000000000000000000000000000000000000
% 000080000000000000000007f0000000000000000000000000000000000000
% 00008000000000000000000380000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 00008000000000000000000000000000000000000000000000000000000000
% 000080000000000000000003e0000000000000000000000000000000000000
% 000080000000000000000006e0000000000000000000000000000000000000
% 00008000000000000000000080000000000000000000000000000000000000
% 00008000000000000000000180000000000000000000000000000000000000
% 00008000000000000000000300000000000000000000000000000000000000
% 000080000000000000000006c0000000000000000000000000000000000000
% 00008000000000000000000fc0000000000000000000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
155 472 371 652 R
7 X
0 0 0 1 0 0 0 K
V
3 H
2 Z
0 X
N
154.83 610 M
 168.97 606.24 171.25 589.97 194.84 594.24 D
 237.42 601.94 277.1 660.87 271.25 652.25 D
0.5 H
N
309.67 651.67 M
 308.39 606.84 325.1 560.93 353.99 561.26 D
 363.11 561.36 365.82 545.94 371 539.67 D
N
181.69 627.46 185 639 188.31 627.46 185 627.46 4 Y
V
185 627.46 185 617 2 L
N
350.03 594.8 353.33 606.33 356.64 594.8 353.33 594.8 4 Y
V
353.33 594.8 353.33 584.33 2 L
N
274.64 615.87 271.33 604.33 268.03 615.87 271.33 615.87 4 Y
V
271.33 626.33 271.33 615.87 2 L
N
200.31 579.87 197 568.33 193.69 579.87 197 579.87 4 Y
V
197 590.33 197 579.87 2 L
N
333.31 490.87 330 479.33 326.69 490.87 330 490.87 4 Y
V
330 501.33 330 490.87 2 L
N
298.69 527.8 302 539.33 305.31 527.8 302 527.8 4 Y
V
302 527.8 302 517.33 2 L
N
208.69 511.46 212 523 215.31 511.46 212 511.46 4 Y
V
212 511.46 212 501 2 L
N
170.86 547 165.67 550 170.86 553 170.86 550 4 Y
V
191.47 553 196.67 550 191.47 547 191.47 550 4 Y
V
170.86 550 191.47 550 2 L
0 Z
N
202.2 547 197 550 202.2 553 202.2 550 4 Y
V
257.8 553 263 550 257.8 547 257.8 550 4 Y
V
202.2 550 257.8 550 2 L
N
267.53 547 262.33 550 267.53 553 267.53 550 4 Y
V
317.8 553 323 550 317.8 547 317.8 550 4 Y
V
267.53 550 317.8 550 2 L
N
327.86 547 322.67 550 327.86 553 327.86 550 4 Y
V
360.14 553 365.33 550 360.14 547 360.14 550 4 Y
V
327.86 550 360.14 550 2 L
N
0 16 Q
(C) 176 536 T
0 12.8 Q
(1) 186.67 532 T
0 16 Q
(C) 279 556.67 T
0 12.8 Q
(3) 289.67 552.67 T
0 16 Q
(C) 336.67 536 T
0 12.8 Q
(4) 347.34 532 T
0 16 Q
(C) 216 556.67 T
0 12.8 Q
(2) 226.67 552.67 T
137.69 526.46 141 538 144.31 526.46 141 524.55 4 Y
V
141 524.55 141 442 2 L
2 Z
N
219.46 460.31 231 457 219.46 453.69 217.55 457 4 Y
V
130 457 217.55 457 2 L
N
1 18 Q
(x) 126 529 T
(z) 218 441 T
253.67 473.33 M
 262.22 527.06 201.27 527.14 186.33 567 D
 185.65 568.82 170.06 579.11 167.33 565.33 D
 162.59 541.39 166.71 518.36 186.33 509.58 D
 200.18 503.38 202.38 492.4 216.67 485.33 D
 216.04 485.64 223.32 480.22 224.67 472 D
N
293.67 494 M
 313.7 505.15 352.05 527.5 316.33 555.58 D
 302.15 566.72 287.6 591.91 265.67 591.32 D
 254.52 591.02 228.55 595.53 230.32 577.33 D
 232.44 555.53 265.58 567.17 262.75 550 D
 259.55 530.52 246.21 516.74 270.33 508 D
 276.67 505.71 276.33 484 293.67 494 D
N
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 2021 a(Figure)65 b(5:)112 b(P)m(ortion)66
b(of)g(a)h(DC)f(demagnetized)-165 2141 y(medium)35 b(sho)m(wing)i
(magnetization)e(clusters.)58 b(The)-165 2262 y(magnetization)27
b(of)i(eac)m(h)h(cluster)g(is)f(assumed)h(to)f(b)s(e)-165
2382 y(parallel)39 b(to)i(the)i(recording)e(direction)g(with)h(v)-5
b(alue)-165 2502 y(either)41 b(+)p Fl(M)290 2517 y Fj(r)369
2502 y Fr(or)f Fi(\000)p Fl(M)667 2517 y Fj(r)706 2502
y Fr(.)69 b(The)42 b(cross-trac)m(k)g(dimen-)-165 2623
y(sions)48 b(of)g(a)g(few)h(clusters)g(are)g(denoted)g(with)f
Fl(C)1746 2638 y Fj(i)1774 2623 y Fr(,)-165 2743 y Fl(i)28
b Fr(=)f(1)p Fl(;)17 b(:)g(:)g(:)f(;)h Fr(4.)p eop
26 25 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1091 b Fr(xxvi)-9 1746 y @beginspecial 18 @llx 519 @lly
333 @urx 766 @ury 1984 @rwi @setspecial
% 0000381c21c000000000000000000000000000000000000000000000000000000000000000000000
% 00006834636000000000000000000000000000000000000000000000000000000000000000000000
% 00004c26206000000000000000000000000000000000000000000000000000000000000000000000
% 00004c2620c1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 00004c26218100000020000008000001000000200000040000008000002000000400000080000010
% 00006834230100000020000008000001000000200000040000008000002000000400000080000010
% 0000389c23e100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000001e00000000000000000000000000010
% 000000000001000000000000000000000000000000000018f8000000000000000000000000000010
% 000000000001000000000000000000000000000000003c6000000000000000000000000000000010
% 00000000000100000000000000000000000000000e1e000000000000000000000000000000000010
% 000000000001000000000000000000000000000f8000000000020000000000000000000000000010
% 00000000000100000000000000000000000000800000000000010000000000000000000000000010
% 00000000000100000000000000000000000001000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000001000000000000000000000000010
% 00000000000100000000000000000000000010000000000000000800000000000000000000000010
% 00000000000100000000000000000000000020000000000000000400000000000000000000000010
% 00000000000100000000000000000000000020000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000200000000000000000000000000010
% 0000000000010000000000000000000000000000000000001fd80100000000000000000000000010
% 00000000000100000000000000000000000100000000000fe0060080000000000000000000000010
% 0000000000010000000000000000000000020000000003f000018040000000000000000000000010
% 00000000000100000000000000000000000400000001fc0000007000000000000000000000000010
% 000000000001000000000000000000000000000000fe000000000c00000000000000000000000010
% 00000000000100000000000000000000000000007f00000000000308000000000000000000000010
% 000000000001000000000000000000000000003f80000000000000e4000000000000000000000010
% 00000000000100000000000000000000002001c0000000000000001a000000000000000000000010
% 000000e0708100000000000000000000004002000000000000000006000000000000000000000010
% 000001a0d1810000000000000000000000800c000000000000000001800000000000000000000010
% 00000130988100000000000000000000000010000000000000000000700000000000000000000010
% 000001309881000000000000000000000000600000000000000000002c0000000000000000000010
% 000001309881c00000000000000000000200800000000000000000001300000000000000000000f0
% 000001a0d0810000000000000000000004030000000000000000000000c000000000000000000010
% 000000e2708100000000000000000000080400000000000000000000003800000000000000000010
% 00000000000100000000000000000000001800000000000000000000000600000000000000000010
% 00000000000100000000000000000000002000000000000000000000010180000000000000000010
% 0000000000010000000000000000000000c000000000000000000000008070000000000000000010
% 0000000000010000000000000000000081000000000000000000000000000c000000000000000010
% 00000000000100000000000000000000860000000000000000000000000003000000000000000010
% 00000000000100000000000000000001080000000000000000000000000000800000000000000010
% 00000000000100000000000000000000300000000000000000000000000800400000000000000010
% 1f000000000100000000000000000000400000000000000000000000000400400000000000000010
% 35000000000100000000000000000009800000000000000000000000000000200000000000000010
% 25000000000100000000000000000012000000000000000000000000000000100000000000000010
% 1f00000000010000000000000000002c000000000000000000000000000000100000000000000010
% 0e000000000100000000000000000010000000000000000000000000000040080000000000000010
% 00000000000100000000000000000060000000000000000000000000000020080000000000000010
% 12000000000100000000000000000080000000000000000000000000000000040000000000000010
% 33000000000100000000000000000300000000000000000000000000000000040000000000000010
% 21000000000100000000000000000600000000000000000000000000000000020000000000000010
% 33000000000100000000000000001c00000000000000000000000000000002020000000000000010
% 1e000000000100000000000000002000000000000000000000000000000001010000000000000010
% 0000000000010000000000000000c000000000000000000000000000000000810000000000000010
% 1f000000000100000000000000011000000000000000000000000000000000008000000000000010
% 30000000000100000000000000062000000000000000000000000000000000008000000000000010
% 20000000000100000000000000084000000000000000000000000000000000004000000000000010
% 3f000000000100000000000000080000000000000000000000000000000000202000000000000010
% 3f000000000100000000000000100000000000000000000000000000000000102000000000000010
% 00000000000100000000000000100000000000000000000000000000000000101000000000000010
% 00000000000100000000000000220000000000000000000000000000000000001000000000000010
% 1f0000000001000000000000002c0000000000000000000000000000000000000800000000000010
% 3f000000000100000000000000480000000000000000000000000000000000000800000000000010
% 2d000000000100000000000000400000000000000000000000000000000000040400000000000010
% 3500381c71c100000000000000800000000000000000000000000000000000020400000000000010
% 17006834d34100000000000001000000000000000000000000000000000000020200000000000010
% 00004c269b4100000000000001200000000000000000000000000000000000000200000000000010
% bf004c2699c1c00000000000022000000000000000000000000000000000000001000000000000f0
% bf004c269a6100000000000002400000000000000000000000000000000000000080000000000010
% 00006834d26100000000000004000000000000000000000000000000000000000080000000000010
% 3000389c71c100000000000004000000000000000000000000000000000000004040000000000010
% 3f000000000100000000000008000000000000000000000000000000000000004040000000000010
% 3f000000000100000000000009000000000000000000000000000000000000002020000000000010
% 00000000000100000000000011000000000000000000000000000000000000000020000000000010
% 1f000000000100000000000012000000000000000000000000000000000000000010000000000010
% 3f000000000100000000000020000000000000000000000000000000000000000010000000000010
% 2d000000000100000000000020000000000000000000000000000000000000000808000000000010
% 35000000000100000000000040000000000000000000000000000000000000000808000000000010
% 17000000000100000000000080000000000000000000000000000000000000000404000000000010
% 00000000000100000000000088000000000000000000000000000000000000000002000000000010
% 20000000000100000000000110000000000000000000000000000000000000000002000000000010
% 1c000000000100000000000110000000000000000000000000000000000000000001000000000010
% 07000000000100000000000200000000000000000000000000000000000000000101000000000010
% 0f000000000100000000000200000000000000000000000000000000000000000100800000000010
% 38000000000100000000000400000000000000000000000000000000000000000080800000000010
% 00000000000100000000000440000000000000000000000000000000000000000080400000000010
% 00000000000100000000000880000000000000000000000000000000000000000000400000000010
% 00000000000100000000000880000000000000000000000000000000000000000000200000000010
% 00000000000100000000001000000000000000000000000000000000000000000000200000000010
% 00000000000100000000001000000000000000000000000000000000000000000020100000000010
% 1f000000000100000000002000000000000000000000000000000000000000000010080000000010
% 30000000000100000000004000000000000000000000000000000000000000000010080000000010
% 20000000000100000000004400000000000000000000000000000000000000000000040000000010
% 3f000000000100000000008400000000000000000000000000000000000000000000040000000010
% 3f000000000100000000008800000000000000000000000000000000000000000000020000000010
% 00000000000100000000010000000000000000000000000000000000000000000002020000000010
% 00000000000100000000010000000000000000000000000000000000000000000002010000000010
% 1e000000000100000000020000000000000000000000000000000000000000000001010000000010
% 33000000000100000000022000000000000000000000000000000000000000000000008000000010
% 2100381c71c100000000042000000000000000000000000000000000000000000000008000000010
% 33006834d34100000000044000000000000000000000000000000000000000000000004000000010
% 1e004c269a0100000000080000000000000000000000000000000000000000000000002000000010
% 00004c269bc1c00000000800000000000000000000000000000000000000000000004020000000f0
% bf004c269a6100000000100000000000000000000000000000000000000000000000202000000010
% bf006834d36100000000210000000000000000000000000000000000000000000000201000000010
% 2100389c71c100000000210000000000000000000000000000000000000000000000001000000010
% 7f000000000100000000420000000000000000000000000000000000000000000000001000000010
% 30000000000100000000420000000000000000000000000000000000000000000000000800000010
% 00000000000100000000800000000000000000000000000000000000000000000000080800000010
% 00000000000100000000800000000000000000000000000000000000000000000000040800000010
% 1f000000000100000001000000000000000000000000000000000000000000000000040400000010
% 3f000000000100000001080000000000000000000000000000000000000000000000000400000010
% 2d000000000100000002100000000000000000000000000000000000000000000000000400000010
% 35000000000100000002100000000000000000000000000000000000000000000000000400000010
% 17000000000100000004000000000000000000000000000000000000000000000000010200000010
% 00000000000100000004000000000000000000000000000000000000000000000000008200000010
% 01000000000100000004000000000000000000000000000000000000000000000000008200000010
% 31000000000100000008400000000000000000000000000000000000000000000000004100000010
% 2d000000000100000008800000000000000000000000000000000000000000000000000100000010
% 27000000000100000010800000000000000000000000000000000000000000000000000100000010
% 23000000000100000011000000000000000000000000000000000000000000000000000100000010
% bf000000000100000010000000000000000000000000000000000000000000000000001080000010
% bf000000000100000020000000000000000000000000000000000000000000000000001080000010
% 00000000000100000020000000000000000000000000000000000000000000000000000880000010
% 21000000000100000024000000000000000000000000000000000000000000000000000040000010
% 7f000000000100000044000000000000000000000000000000000000000000000000000040000010
% 30000000000100000044000000000000000000000000000000000000000000000000000040000010
% 00000000000100000040000000000000000000000000000000000000000000000000000020000010
% 1f000000000100000080000000000000000000000000000000000000000000000000000420000010
% 35000000000100000080000000000000000000000000000000000000000000000000000220000010
% 25000000000100000100000000000000000000000000000000000000000000000000000220000010
% 1f000000000100000110000000000000000000000000000000000000000000000000000010000010
% 0e000000000100000120000000000000000000000000000000000000000000000000000010000010
% 00000000000100000220000000000000000000000000000000000000000000000000000010000010
% 0000381c70c100000200000000000000000000000000000000000000000000000000000088000010
% 1f006834d0c100000200000000000000000000000000000000000000000000000000000088000010
% 30004c26994100000400000000000000000000000000000000000000000000000000000048000010
% 20004c269b41c00004800000000000000000000000000000000000000000000000000000440000f0
% 3f004c269ac100000480000000000000000000000000000000000000000000000000000004000010
% 3f006834d3e100000880000000000000000000000000000000000000000000000000000004000010
% 0000389c704100000900000000000000000000000000000000000000000000000000000004000010
% 00000000000100001000000000000000000000000000000000000000000000000000000012000010
% 3fc00000000100001000000000000000000000000000000000000000000000000000000012000010
% 33400000000100001000000000000000000000000000000000000000000000000000000012000010
% 2140000000010000220000000000000000000000000030c000c00001800000000000000001000010
% 33400000000100002400000000000000000000000000000000c00000000000000000000001000010
% 1ec00000000100002400000000000000000000067b1f37ce38c2271db8f0e1800000000001000010
% 000000000001000040000000000000000000000b6d9937db6cc24d9decc9b2c00000000001000010
% 00000000000100004000000000000000000000196c9936d01cc343999cc906400000000004800010
% 1f0000000001000040000000000000000000001f6c9936d07cc1cf99fcc907c00000000002800010
% 3f0000000001000080000000000ffffffffff8196c9936db4cc18999ccc9b6400000000002800010
% 2d0000000001000090000000000000000000000f6c9f36ce7cc18f99fcc8e3c00000000000400010
% 35000000000100011000000000000000000000000018000000000000000000000000000000400010
% 17000000000100012000000000000000000000000018000000000000000000000000000000400010
% 00000000000100010000000000000000000000000000000000000000000000000000000000a00010
% 00000000000100020000000000000000000000000000000000000000000000000000000000a00010
% 1f000000000100020000000000000000000000000000000000000000000000000000000000a00010
% 30000000000100024000000000000000000000000000000000000000000000000000000000600010
% 30000000000100048000000000000000000000000000000000000000000000000000000000100010
% 1f000000000100048000000000000000000000000000000000000000000000000000000000100010
% 3f000000000100090000000000000000000000000000000000000000000000000000000000100010
% 20000000000100080000000000000000000000000000000000000000000000000000000000280010
% 3f000000000100080000000000000000000000000000000000000000000000000000000000180010
% 3f000000000100080000000000000000000000180000000000000000014000000000000000180010
% 00000000000100120000000000000000000000180000200000000000030400000000000000080010
% 0000000000010012000000000000000000000018c70e7071e64738c3834e00000000000000040010
% 00000000000100140000000000000000000000196d9a60d3664db966834c00000000000000040010
% 000000000001002000000000000000000000001b239c20e22643b327034400000000000000040010
% 000000000001002000000000000f3e3e3c3c781bef872e3a264fb3e1c34400000000000000060010
% 0000381c71c1002000000000000000000000001b299b20db66c9b326c34400000000000000060010
% 00006834d3610040000000000000000000000019ef8e3071e3cfb1e3834600000000000000020010
% 00004c26986100500000000000000000000000000000000020000000000000000000000000010010
% 00004c2698c100500000000000000000000000000000000020000000000000000000000000010010
% 00004c269981c05000000000000000000000000000000000000000000000000000000000000100f0
% 00006834d30100800000000000000000000000000000000000000000000000000000000000008010
% 0000389c73e100800000000000000000000000000000000000000000000000000000000000008010
% 00000000000100800000000000000000000000000000000000000000000000000000000000008010
% 0000000000010100000000000000000000000000000000000000000000000000000000000000c010
% 00000000000101400000000000000000000000000000000000000000000000000000000000004010
% 00000000000101400000000000000000000000000000000000000000000000000000000000004010
% 00000000000101800000000000000000000000000000000000000000000000000000000000002010
% 00000000000102000000000000000000000000000000000000000000000000000000000000002010
% 00000000000102000000000000000000000000000000000000000000000000000000000000002010
% 00000000000102000000000000000000000000000000000000000000000000000000000000002010
% 00000000000105000000000000000000000000000000000000000000000000000000000000001010
% 00000000000106000000000000000000000000000000000000000000000000000000000000001010
% 00000000000106000000000000000000000000000000000000000000000000000000000000001010
% 0000000000010a000000000000000000000000000000000000000000000000000000000000000810
% 00000000000108000000000000000000000000000000000000000000000000000000000000000810
% 00000000000108000000000000000000000000000000000000000000000000000000000000000810
% 00000000000110000000000000000000000000000000000000000000000000000000000000000410
% 00000000000118000000000000000000000000000000000000000000000000000000000000000410
% 00000000000118000000000000000000000000000000000000000000000000000000000000000410
% 00000000000128000000000000000000000000000000000000000000000000000000000000000210
% 00000000000130000000000000000000000000000000000000000000000000000000000000000210
% 00000000000120000000000000000000000000000000000000000000000000000000000000000210
% 00000000000140000000000000000000000000000000000000000000000000000000000000000110
% 00000000000100000000000000000000000000000000000000000000000000000000000000000110
% 000000000001a0000000000000000000000000000000000000000000000000000000000000000110
% 000000000001a0000000000000000000000000000000000000000000000000000000000000000090
% 00000000000140000000000000000000000000000000000000000000000000000000000000000090
% 00000000000140000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000010
% 00000000000100000000000000000000000000000000000000000000000000000000000000000050
% 00000000000180000020000008000001000000200000040000008000002000000400000080000010
% 00000000000100000020000008000001000000200000040000008000002000000400000080000010
% 00000000000100000020000008000001000000200000040000008000002000000400000080000010
% 000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000400000000000000000000000000000001c0000000000000000000000000000000020
% 000000000000c0000000000000000000000000000000340000000000000000000000000000000060
% 00000000000040000000000000000000000000000000260000000000000000000000000000000020
% 00000000000040000000000000000000000000000000260000000000000000000000000000000020
% 00000000001c40000000000000000000000000000000260000000000000000000000000000000020
% 00000000000040000000000000000000000000000000340000000000000000000000000000000020
% 000000000000400000000000000000000000000000001c0000000000000000000000000000000020
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000060000c00006188040c3000000000000000000000
% 000000000000000000000000000000000000000100004000006300042c6000000000000000000000
% 0000000000000000000000000000007b0e1ef063ef1cedc780e711243ce000000000000000000000
% 0000000000000000000000000000006d9b36c8b36136cf6640a5216454a000000000000000000000
% 0000000000000000000000000000006c8722c991630e4e2640af21c495e000000000000000000000
% 0000000000000000000000000000006c9f22c9f1663e4e2640aa2184954000000000000000000000
% 0000000000000000000000000000006c9336c9916c264f6640ba23c5974700000000000000000000
% 0000000000000000000000000000006c9f1ec8f1efbe6dc641b22649364600000000000000000000
% 00000000000000000000000000000000002200000000000000002008000400000000000000000000
% 00000000000000000000000000000000003e00000000000000002010000c00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000c00000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 60 214 539 583 287.4 221.4 45.6 543.6 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  501   260  5844  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 774 4784 mt 
(-1) s
1434 4615 mt 1434 4561 L
1434  389 mt 1434  443 L
1250 4784 mt 
(-0.8) s
1970 4615 mt 1970 4561 L
1970  389 mt 1970  443 L
1786 4784 mt 
(-0.6) s
2505 4615 mt 2505 4561 L
2505  389 mt 2505  443 L
2321 4784 mt 
(-0.4) s
3041 4615 mt 3041 4561 L
3041  389 mt 3041  443 L
2857 4784 mt 
(-0.2) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4113 4615 mt 4113 4561 L
4113  389 mt 4113  443 L
4013 4784 mt 
(0.2) s
4649 4615 mt 4649 4561 L
4649  389 mt 4649  443 L
4549 4784 mt 
(0.4) s
5184 4615 mt 5184 4561 L
5184  389 mt 5184  443 L
5084 4784 mt 
(0.6) s
5720 4615 mt 5720 4561 L
5720  389 mt 5720  443 L
5620 4784 mt 
(0.8) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6216 4784 mt 
(1) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 3911 mt  952 3911 L
6256 3911 mt 6202 3911 L
 503 3964 mt 
(0.002) s
 898 3206 mt  952 3206 L
6256 3206 mt 6202 3206 L
 503 3259 mt 
(0.004) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 503 2555 mt 
(0.006) s
 898 1798 mt  952 1798 L
6256 1798 mt 6202 1798 L
 503 1851 mt 
(0.008) s
 898 1093 mt  952 1093 L
6256 1093 mt 6202 1093 L
 583 1146 mt 
(0.01) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 503  442 mt 
(0.012) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
6 12 6 -7 25 57 50 140 158 499 380 1284 681 1252 924 406 
1000 -146 873 -582 612 -1140 344 -939 164 -548 65 -190 25 -51 11 -20 
5 -23 5 3 0 -30 898 4513 20 MP stroke
DA
6 18 6 20 25 76 50 147 158 455 380 973 681 1325 924 945 
1000 -86 873 -1019 612 -1236 344 -887 164 -470 65 -193 25 -78 11 -32 
5 -16 5 -15 0 -1 898 4615 20 MP stroke

gr 
DA
SO

end

eplot

epage
end

showpage


FMENDEPSF
0 12 Q
0 X
0 0 0 1 0 0 0 K
(magnetization) 139 521.21 T
1 F
(M\050x\051/M) 217.04 521.21 T
1 9.6 Q
(r) 254.36 518.21 T
0 12 Q
(magnetization variance) 0 -270 26 596.5 TF
J
127 592 166 592 2 L
J
127 592 128.75 592 2 L
0.5 H
2 Z
N
[3.404 4.377] 3.404 I
128.75 592 164.25 592 2 L
N
J
164.25 592 166 592 2 L
N
J
127 610.5 166 610.5 2 L
N
(empirical variance) 172.5 608 T
(least-squares \336t) 173 589 T
0 0 0 1 0 0 0 K
0 0 0 0 1 1 1 K
59 536.5 336.5 550.5 R
7 X
0 0 0 0 1 1 1 K
V
40.5 522 63 771.5 R
V
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(0.002) 35 584.5 T
(0.004) 35 619 T
(0.006) 35 654 T
(0.008) 35 689 T
(0.01) 41.12 725 T
(0.012) 35 759.5 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(-1) 61 541 T
(0) 196 541 T
(1) 329.5 541 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 2057 a(Figure)39 b(6:)58 b(Magnetization)38
b(v)-5 b(ariance)40 b(for)f(the)i(ori-)-165 2178 y(en)m(ted)k(medium.)
77 b(Solid)43 b(line:)66 b(empirical)41 b(magne-)-165
2298 y(tization)49 b(v)-5 b(ariance)56 b(^)-55 b Fl(\033)666
2313 y Fj(M)746 2298 y Fr(\()p Fl(x)p Fr(\))51 b(v)m(ersus)j(the)d
(magneti-)-165 2418 y(zation)41 b Fl(M)10 b Fr(\()p Fl(x)p
Fr(\))p Fl(=)-5 b(M)510 2433 y Fj(r)548 2418 y Fr(.)72
b(Dotted)41 b(line:)61 b(Least-squares)-165 2539 y(parab)s(ola)30
b(\014t.)-9 4445 y @beginspecial 57 @llx 482 @lly 353
@urx 731 @ury 1984 @rwi @setspecial
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 00000c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 0000040fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80
% 00000408000001000000200000040000008000002000000400000081c61ffffff80400000080
% 000004080000010000002000000400000080000020000004000000a2ffe01000000400000080
% 000000080000010000002000000400000080000020000004000001ff00001000000400000080
% 000000080000000000000000000000000000000000000000000003c000000000000000000080
% 00000008000000000000000000000000000000000000000000003c0000000000000000000080
% 0000000800000100000020000004000000800000200000040000708000001000000400000080
% 0000000800000000000000000000000000000000000000000000c00000000000000000000080
% 0000000800000100000020000004000000800000200000040003008000001000000400000080
% 000000080000010000002000000400000080000020000004000c008000001000000400000080
% 0000000800000000000000000000000000000000000000000018000000000000000000000080
% 0000000800000100000020000004000000800000200000040020008000001000000400000080
% 0000000800000000000000000000000000000000000000000040000000000000000000000080
% 0000000800000000000000000000000000000000000000000080000000000000000000000080
% 0000000800000100000020000004000000800000200000040100008000001000000400000080
% 0000000800000000000000000000000000000000000000000300000000000000000000000080
% 0000000800000100000020000004000000800000200000040200008000001000000400000080
% 0000000800000100000020000004000000800000200000040400008000001000000400000080
% 0000000800000000000000000000000000000000000000000800000000000000000000000080
% 0000000800000100000020000004000000800000200000041000008000001000000400000080
% 0000000800000000000000000000000000000000000000001000000000000000000000000080
% 0000000f2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b6b496969692d2d2d25a5a5a4b780
% 0200000800000100000020000004000000800000200000044000008000001000000400000080
% 0300000800000000000000000000000000000000000000008000000000000000000000000080
% 03e0000800000000000000000000000000000000000000008000000000000000000000000080
% 0060000800000100000020000004000000800000200000050000008000001000000400000080
% 8000000800000000000000000000000000000000000000030000000000000000000000000080
% f800000800000100000020000004000000800000200000060000008000001000000400000080
% 7f00000800000100000020000004000000800000200000060000008000001000000400000080
% 3800000800000000000000000000000000000000000000040000000000000000000000000080
% 0e00000800000100000020000004000000800000200000040000008000001000000400000080
% 0300000800000000000000000000000000000000000000080000000000000000000000000080
% ff00000800000000000000000000000000000000000000080000000000000000000000000080
% e000000800000100000020000004000000800000200000140000008000001000000400000080
% 3f00000800000000000000000000000000000000000000100000000000000000000000000080
% 6100000800000100000020000004000000800000200000240000008000001000000400000080
% 1000000800000100000020000004000000800000200000240000008000001000000400000080
% 0e00000800000000000000000000000000000000000000200000000000000000000000000080
% 0300000800000100000020000004000000800000200000440000008000001000000400000080
% 0000000800000000000000000000000000000000000000c00000000000000000000000000080
% fe00000800000000000000000000000000000000000000800000000000000000000000000080
% 0180000800000100000020000004000000800000200000840000008000001000000400000080
% 0040000f2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b780
% 3000000800000100000020000004000000800000200001040000008000001000000400000080
% 1b00000800000100000020000004000000800000200002040000008000001000000400000080
% 0e00000800000000000000000000000000000000000002000000000000000000000000000080
% 3e00000800000100000020000004000000800000200002040000008000001000000400000080
% 0300000800000000000000000000000000000000000004000000000000000000000000000080
% 0100000800000000000000000000000000000000000004000000000000000000000000000080
% 8000000800000100000020000004000000800000200008040000008000001000000400000080
% 2000000800000000000000000000000000000000000008000000000000000000000000000080
% 1fc0000800000000000000000000000000000000000010000000000000000000000000000080
% 0000000800000100000020000004000000800000200010040000008000001000000400000080
% 8000000800000000000000000000000000000000000010000000000000000000000000000080
% f800000800000100000020000004000000800000200030040000008000001000000400000080
% 7f00000800000100000020000004000000800000200020040000008000001000000400000080
% 3800000800000000000000000000000000000000000020000000000000000000000000000080
% 0e00000800000100000020000004000000800000200040040000008000001000000400000080
% 0300000800000000000000000000000000000000000040000000000000000000000000000080
% ff00000800000000000000000000000000000000000040000000000000000000000000000080
% e000000800000100000020000004000000800000200080040000008000001000000400000080
% 3f00000800000000000000000000000000000000000080000000000000000000000000000080
% 0100000800000100000020000004000000800000200080040000008000001000000400000080
% 0000000f2d25a5a5a4b4b4b496969692d2d2d25a7a5b4b4f4b4969e9692d3d2d25a5a5a4b780
% 0000000800000000000000000000000000000000000100000000000000000000000000000080
% 0000000800000100000020000004000000800000200100040000008000001000000400000080
% 0000000800000000000000000000000000000000000300000000000000000000000000000080
% 0000000800000000000000000000000000000000000200000000000000000000000000000080
% 1f00000800000100000020000004000000800000200200040000008000001000000400000080
% 3000000800000000000000000000000000000000000200000000000000000000000000000080
% 2000000800000100000020600004000000800c00200400040000008000001000000400000080
% 3f00000800000100000020000004000000802000200400040000008000001000000400000080
% 3f000008000000000001ec6e738f61c3de0c7ce0000c00000000000000000000000000000080
% 00000008000001000001b67b76cdb366d9966db0200800040000008000001000000400000080
% 00000008000000000001b270644d90e459322d00000800000000000000000000000000000080
% 1e000008000000000001b270644d93e4593e2d00000800000000000000000000000000000080
% 33000008ffffffffff81b27b66cd9266d9b22db0201000040000008000001000000400000080
% 21000008000000000001b26e638d93e3d91e3ce0001000000000000000000000000000000080
% 3300000800000000000000000000000440000000001000000000000000000000000000000080
% 1e000008000001000000200000040007c0800000202000040000008000001000000400000080
% 0000000800000000000000000000000000000000002000000000000000000000000000000080
% bf00000800000100000020000004000000800000202000040000008000001000000400000080
% bf00000800000100000020000004000000800000204000040000008000001000000400000080
% 2100000800000000000000000000000000000000004000000000000000000000000000000080
% 7f00000f2d25a5a5a4b4b4b496969692d2d2d25a7a5a4b4f4b4969e9692d3d2d25a5a5a4b780
% 3000000800000000000000000000000000000000008000000000000000000000000000000080
% 0000000800000000000000000000000000000000008000000000000000000000000000000080
% 0000000800000100000020000004000000800000208000040000008000001000000400000080
% 1f00000800000000000000000000000000000000008000000000000000000000000000000080
% 3f00000800000100000020000004000000800000210000040000008000001000000400000080
% 2d00000800000100000020000004000000800000210000040000008000001000000400000080
% 3500000800000000000000000000000000000000010000000000000000000000000000000080
% 1700000800000100000020000004000000800000220000040000008000001000000400000080
% 0000000800000000000000000000000000000000020000000000000000000000000000000080
% 01000008000000000001f9f83f7e000000000000020000000000000000000000000000000080
% 3100000800000100000060180314000000800000240000040000008000001000000400000080
% 2d00000800000000000040300610000000000000040000000000000000000000000000000080
% 2700000800000100000060600c14000000800000240000040000008000001000000400000080
% 2300000800000100000060600c14000000800000240000040000008000001000000400000080
% bf000008f1f1f1e1e38040c39810000000000000080000000000000000000000000000000080
% bf00000800000100000061803014000000800000280000040000008000001000000400000080
% 00000e0800000000000041f83f10000000000000080000000000000000000000000000000080
% 21001b0800000000000000000000000000000000100000000000000000000000000000000080
% 7f001b0800000100000020000004000000800000300000040000008000001000000400000080
% 3000110800000000000000000000000000000000100000000000000000000000000000000080
% 0000110f2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b780
% 1f00110800000100000020000004000000800000200000040000008000001000000400000080
% 35001b0800000000000000000000000000000000200000000000000000000000000000000080
% 25000e0800000100000020000004000000800000200000040000008000001000000400000080
% 1f00000800000100000020000004000000800000600000040000008000001000000400000080
% 0e00000800000000000000000000000000000000400000000000000000000000000000000080
% 0000000800000100000020000004000000800000600000040000008000001000000400000080
% 0000000800000000000000000000000000000000800000000000000000000000000000000080
% 1f00000800000000000000000000000000000000800000000000000000000000000000000080
% 3000000800000100000020000004000000800000a00000040000008000001000000400000080
% 2000000800000000000000000000000000000000800000000000000000000000000000000080
% 3f00000800000100000020000004000000800001200000040000008000001000000400000080
% 3f00000800000100000020000004000000800001200000040000008000001000000400000080
% 0000000800000000000000000000000000000001000000000000000000000000000000000080
% 0000000800000100000020000004000000800002200000040000008000001000000400000080
% 3fc0000800000000000000000000000000000002000000000000000000000000000000000080
% 3340000800000000000000000000000000000002000000000000000000000000000000000080
% 2140000800000100000020000004000000800006200000040000008000001000000400000080
% 3340000800000000000000000000000000000004000000000000000000000000000000000080
% 1ec0000800000100000020000004000000800004200000040000008000001000000400000080
% 0000000800000100000020000004000000800004200000040000008000001000000400000080
% 1f00000800000000000000000000000000000008000000000000000000000000000000000080
% 3f00000f2d25a5a5a4b4b4b496969692d2d2d25a7a5a4b4f4b4969e9692d3d2d25a5a5a4b780
% 2d00000800000000000000000000000000000008000000000000000000000000000000000080
% 3500000800000000000000000000000000000010000000000000000000000000000000000080
% 1700000800000100000020000004000000800010200000040000008000001000000400000080
% 0000000800000000000000000000000000000010000000000000000000000000000000000080
% 0000000800000000000000000000000000000020000000000000000000000000000000000080
% 1f00000800000100000020000004000000800020200000040000008000001000000400000080
% 3000000800000000000000000000000000000020000000000000000000000000000000000080
% 3000000800000100000020000004000000800060200000040000008000001000000400000080
% 1f00000800000100000020000004000000800040200000040000008000001000000400000080
% 3f00000800000000000000000000000000000040000000000000000000000000000000000080
% 2000000800000100000020000004000000800080200000040000008000001000000400000080
% 3f00000800000000000000000000000000000080000000000000000000000000000000000080
% 3f00000800000000000000000000000000000080000000000000000000000000000000000080
% 0000000800000100000020000004000000800180200000040000008000001000000400000080
% 0000000800000000000000000000000000000100000000000000000000000000000000000080
% 0000000800000100000020000004000000800100200000040000008000001000000400000080
% 0000000800000100000020000004000000800300200000040000008000001000000400000080
% 0000000800000000000000000000000000000200000000000000000000000000000000000080
% 1f00000800000100000020000004000000800200200000040000008000001000000400000080
% 3500000800000000000000000000000000000400000000000000000000000000000000000080
% 2500000f2d25a5a5a4b4b4b496969692d2d2d65a5a5a4b4b4b496969692d2d2d25a5a5a4b780
% 1f00000800000100000020000004000000800400200000040000008000001000000400000080
% 0e00000800000000000000000000000000000c00000000000000000000000000000000000080
% 0000000800000100000020000004000000800800200000040000008000001000000400000080
% 0000000800000100000020000004000000800800200000040000008000001000000400000080
% 3fc0000800000000000000000000000000001000000000000000000000000000000000000080
% 3340000800000100000020000004000000801000200000040000008000001000000400000080
% 2140000800000000000000000000000000001000000000000000000000000000000000000080
% 3340000800000000000000000000000000003000000000000000000000000000000000000080
% 1ec0000800000100000020000004000000802000200000040000008000001000000400000080
% 0000000800000000000000000000000000002000000000000000000000000000000000000080
% 0000000800000000000000000000000000004000000000000000000000000000000000000080
% 1f00000800000100000020000004000000804000200000040000008000001000000400000080
% 3f00000800000000000000000000000000004000000000000000000000000000000000000080
% 2d00000800000100000020000004000000808000200000040000008000001000000400000080
% 3500000800000100000020000004000000808000200000040000008000001000000400000080
% 1700000800000000000000000000000000018000000000000000000000000000000000000080
% 0000000800000100000020000004000000810000200000040000008000001000000400000080
% 3000000800000000000000000000000000020000000000000000000000000000000000000080
% 3f00000800000000000000000000000000020000000000000000000000000000000000000080
% 3f00000800000100000020000004000000820000200000040000008000001000000400000080
% 0000000f2d25a5a5a4b4b4b496969692d2d6d25a5a5a4b4b4b496969692d2d2d25a5a5a4b780
% 1f00000800000100000020000004000000840000200000040000008000001000000400000080
% 35000008000001000000200000040000008c0000200000040000008000001000000400000080
% 2500000800000000000000000000000000080000000000000000000000000000000000000080
% 1f00000800000100000020000004000000900000200000040000008000001000000400000080
% 0e00000800000000000000000000000000100000000000000000000000000000000000000080
% 0000000800000000000000000000000000300000000000000000000000000000000000000080
% 2000000800000100000020000004000000a00000200000040000008000001000000400000080
% 1c00000800000000000000000000000000600000000000000000000000000000000000000080
% 0700000800000100000020000004000000c00000200000040000008000001000000400000080
% 0f00000800000100000020000004000000800000200000040000008000001000000400000080
% 3800000800000000000000000000000000800000000000000000000000000000000000000080
% 0000000800000100000020000004000001800000200000040000008000001000000400000080
% 0000000800000000000000000000000001800000000000000000000000000000000000000080
% 1f00000800000000000000000000000003000000000000000000000000000000000000000080
% 3f00000800000100000020000004000002800000200000040000008000001000000400000080
% 2d00000800000000000000000000000004000000000000000000000000000000000000000080
% 3500000800000000000000000000000004000000000000000000000000000000000000000080
% 1700000800000100000020000004000008800000200000040000008000001000000400000080
% 0000000800000000000000000000000018000000000000000000000000000000000000000080
% 0000000800000100000020000004000010800000200000040000008000001000000400000080
% 0000000f2d25a5a5a4b4b4b496969692f2d2d25a7a5a4b4f4b4969e9692d3d2d25a5a5a4b780
% 0000000800000000000000000000000040000000000000000000000000000000000000000080
% 0000000800000100000020000004000080800000200000040000008000001000000400000080
% 0000000800000000000000000000000100000000000000000000000000000000000000000080
% 0000000800000000000000000000000280000000000000000000000000000000000000000080
% 0000000800000100000020000004000500800000200000040000008000001000000400000080
% 0000000800000000000000000000000400000000000000000000000000000000000000000080
% 0000000800000100000020000004000800800000200000040000008000001000000400000080
% 0000000800000100000020000004001000800000200000040000008000001000000400000080
% 0000000800000000000000000000003000000000000000000000000000000000000000000080
% 0000000800000100000020000004006000800000200000040000008000001000000400000080
% 0000000800000000000000000000018000000000000000000000000000000000000000000080
% 0000000800000000000000000000060000000000000000000000000000000000000000000080
% 00000008000001000000200000040a0000800000200000040000008000001000000400000080
% 0000000800000000000000000000360000000000000000000000000000000000000000000080
% 0000000800000100000020000004d80000800000200000040000008000001000000400000080
% 0000020800000100000020000007000000800000200000040000008000001000000400000080
% 0000020800000000000000000019800000000000000000000000000000000000000000000080
% 00000608000001000000200003e6000000800000200000040000008000001000000400000080
% 000002080000010000002000fdc4000000800000200000040000008000001000000400000080
% 000002080000010000003dffe204000000800000200000040000008000001000000400000080
% 0000e20fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80
% 0000020000000000000000000000000000000000000000000000000000000000000000000000
% 0000020000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000e1c70e000000020e1c70000000000000000000000000000000000000000000000
% 00000000001b36d9b000000021b36d8000000000000000000000000000000000000000000000
% 00000000001136d9b000000061b36d80000000003800000000021c38700000000e3870e00000
% 00000000000322891000000021122880000000006c0000000002366cd80000001b6cd9b00000
% 00000000000622891000000021122880000000006c0000000006366cd8000000116cd9b00000
% 0000000001cc22891000000e2112288000000000440000000002224488000000034489100000
% 00000000001836d9b000000021b36d8000000000440000000002224488000000064489100000
% 00000000001f1c70e000000020e1c700000000004400000000022244880000000c4489100000
% 00000000000000000000000000000000000000006c0000000002366cd8000000186cd9b00000
% 00000000000000000000000000000000000000003800000000021c38700000001f3870e00000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000018000000000000000000000
% 0000000000000000000000000000000000000000000000000000010000000000000000000000
% 000000000000000000000000010000000000008004c000000000108400000000000000000000
% 0000000000000000000000000100000004000080040020000000218200000000000000000000
% 0000000000000000000000000f1c49780fce1c903cce771e386021c200000000000000000000
% 0000000000000000000000001b3649640ddb36b06cda6d996cb0214200000000000000000000
% 00000000000000000000000011227764058720e044dc23994190626200000000000000000000
% 00000000000000000000000011223664e59f20f044c72f9941f063e200000000000000000000
% 0000000000000000000000001b363664059336906cdb29996d90662200000000000000000000
% 0000000000000000000000001f1c3664079f1c987cce3f9938f0263200000000000000000000
% 0000000000000000000000000000000000000000000000000000200200000000000000000000
% 0000000000000000000000000000000000000000000000000000000400000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 66 214 550 583 290.4 221.4 69.8 506.3 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  577   260  5888  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
c0
 898 4615 mt  898  389 L
 898  389 mt  898  389 L
1434 4615 mt 1434  389 L
1434  389 mt 1434  389 L
1970 4615 mt 1970  389 L
1970  389 mt 1970  389 L
2505 4615 mt 2505  389 L
2505  389 mt 2505  389 L
3041 4615 mt 3041  389 L
3041  389 mt 3041  389 L
3577 4615 mt 3577  389 L
3577  389 mt 3577  389 L
4113 4615 mt 4113  389 L
4113  389 mt 4113  389 L
4649 4615 mt 4649  389 L
4649  389 mt 4649  389 L
5184 4615 mt 5184  389 L
5184  389 mt 5184  389 L
5720 4615 mt 5720  389 L
5720  389 mt 5720  389 L
6256 4615 mt 6256  389 L
6256  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
6256 4615 mt 6256 4615 L
 898 4192 mt 6256 4192 L
6256 4192 mt 6256 4192 L
 898 3770 mt 6256 3770 L
6256 3770 mt 6256 3770 L
 898 3347 mt 6256 3347 L
6256 3347 mt 6256 3347 L
 898 2925 mt 6256 2925 L
6256 2925 mt 6256 2925 L
 898 2502 mt 6256 2502 L
6256 2502 mt 6256 2502 L
 898 2079 mt 6256 2079 L
6256 2079 mt 6256 2079 L
 898 1657 mt 6256 1657 L
6256 1657 mt 6256 1657 L
 898 1234 mt 6256 1234 L
6256 1234 mt 6256 1234 L
 898  812 mt 6256  812 L
6256  812 mt 6256  812 L
 898  389 mt 6256  389 L
6256  389 mt 6256  389 L
 898 4615 mt  898  389 L
 898  389 mt 6256  389 L
 898 4615 mt  898  389 L
 898  389 mt 6256  389 L
 898 4615 mt  898  389 L
 898  389 mt 6256  389 L
SO
6 w
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 654 4784 mt 
(-2500) s
1434 4615 mt 1434 4561 L
1434  389 mt 1434  443 L
1190 4784 mt 
(-2000) s
1970 4615 mt 1970 4561 L
1970  389 mt 1970  443 L
1726 4784 mt 
(-1500) s
2505 4615 mt 2505 4561 L
2505  389 mt 2505  443 L
2261 4784 mt 
(-1000) s
3041 4615 mt 3041 4561 L
3041  389 mt 3041  443 L
2837 4784 mt 
(-500) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4113 4615 mt 4113 4561 L
4113  389 mt 4113  443 L
3993 4784 mt 
(500) s
4649 4615 mt 4649 4561 L
4649  389 mt 4649  443 L
4489 4784 mt 
(1000) s
5184 4615 mt 5184 4561 L
5184  389 mt 5184  443 L
5024 4784 mt 
(1500) s
5720 4615 mt 5720 4561 L
5720  389 mt 5720  443 L
5560 4784 mt 
(2000) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6096 4784 mt 
(2500) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 699 4668 mt 
(-1) s
 898 4192 mt  952 4192 L
6256 4192 mt 6202 4192 L
 579 4245 mt 
(-0.8) s
 898 3770 mt  952 3770 L
6256 3770 mt 6202 3770 L
 579 3823 mt 
(-0.6) s
 898 3347 mt  952 3347 L
6256 3347 mt 6202 3347 L
 579 3400 mt 
(-0.4) s
 898 2925 mt  952 2925 L
6256 2925 mt 6202 2925 L
 579 2978 mt 
(-0.2) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 783 2555 mt 
(0) s
 898 2079 mt  952 2079 L
6256 2079 mt 6202 2079 L
 663 2132 mt 
(0.2) s
 898 1657 mt  952 1657 L
6256 1657 mt 6202 1657 L
 663 1710 mt 
(0.4) s
 898 1234 mt  952 1234 L
6256 1234 mt 6202 1234 L
 663 1287 mt 
(0.6) s
 898  812 mt  952  812 L
6256  812 mt 6202  812 L
 663  865 mt 
(0.8) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 783  442 mt 
(1) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
49 0 49 0 50 0 49 0 49 0 50 0 49 0 49 0 
49 -1 50 0 49 0 49 -1 50 -1 49 -1 49 -2 49 -2 
50 -3 49 -4 49 -5 50 -6 49 -9 49 -11 50 -13 49 -17 
49 -20 49 -25 50 -32 49 -36 49 -43 50 -51 49 -58 49 -67 
49 -81 50 -87 49 -96 49 -107 50 -116 49 -126 49 -143 50 -144 
49 -151 49 -157 49 -162 50 -165 49 -172 49 -171 50 -165 49 -162 
49 -157 49 -151 50 -144 49 -143 49 -126 50 -116 49 -106 49 -97 
50 -86 49 -81 49 -66 49 -59 50 -50 49 -43 49 -36 50 -32 
49 -25 49 -20 49 -16 50 -14 49 -10 49 -9 50 -7 49 -4 
49 -4 50 -3 49 -2 49 -2 49 -1 50 -1 49 -1 49 0 
50 0 49 -1 49 0 49 0 50 0 49 0 49 0 50 0 
49 0 49 0 1359 4615 91 MP stroke
SO
232 -5 232 -5 232 -19 232 -39 232 -125 232 -300 232 -537 232 -729 
232 -789 232 -688 232 -483 232 -271 232 -130 232 -50 232 -21 232 -8 
232 -4 232 -4 232 0 1124 4615 20 MP stroke

gr 

end

eplot

epage
end

showpage


FMENDEPSF
0 0 0 0 1 1 1 K
65 495.89 84.44 730.33 R
7 X
V
0.5 H
2 Z
N
75 489.78 367.78 513.11 R
V
N
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(0) 76.11 617 T
(0) 217.78 499.22 T
(-1000) 149.45 501.44 T
(1000) 260.56 499.22 T
(-2000) 96.11 501.44 T
(2000) 315.56 499.22 T
(-1) 72.78 512 T
(1) 76.11 722.55 T
J
90.33 627 129.33 627 2 L
J
90.33 627 92.08 627 2 L
N
[3.404 4.377] 3.404 I
92.08 627 127.58 627 2 L
N
J
127.58 627 129.33 627 2 L
N
J
90.33 650.5 129.33 650.5 2 L
N
(micromagnetic) 135.83 648 T
(TZ-ZT) 136.33 624 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(average magnetization) 0 -270 64.56 537.88 TF
1 F
(M\050x\051/M) 0 -270 64.56 662.6 TF
1 9.6 Q
(r) 0 -270 67.56 699.92 TF
0 12 Q
(down-track distance \050\201\051) 156.22 482.88 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 4756 a(Figure)45 b(7:)71 b(Av)m(erage)47
b(transition)e(pro\014les)i(for)f(the)-165 4877 y(orien)m(ted)f
(medium.)80 b(Solid)43 b(line:)68 b(micromagnetic)-165
4997 y(mo)s(del.)42 b(Dotted)32 b(line:)42 b(TZ-ZT)32
b(mo)s(del.)2040 1714 y @beginspecial 46 @llx 519 @lly
375 @urx 757 @ury 1984 @rwi @setspecial
% 00000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc000
% 000000000000040000000000200000000001000000000010000000000080000000000400000000004000
% 000000000000040000000000200000000001000000000010000000000080000000000400000000004000
% 000000000000040000000000200000000001000000000010000000000080000000000400000000004000
% 000000000000040000000000000000000000000000000000000000000000000000000000000000004000
% 000000000000040000000000000000000000000000000000000000000000000000000000000000004000
% 000000000000040000000000000000000000000000000000000000000000000000000000000000004000
% 000000000000040000000000000000000000000000000000000000000000000000000000000000004000
% 00000000000004000000000000c00000000000000c000000000000000000000000000000000000004000
% 000000000000040000000000000000000000000040000000000000000000000000000000000000004000
% 000000000000040000000003d8ce738f61c79e0cedc00000000000000000000000000000000000004000
% 0000000000000400000000036cdb76cdb36d9916cf600000000000000000000000000000000000004000
% 00000000000004000000000364d0644d90e899324e000000000000000000000000000000000000004000
% 0000000000000407ffffff8364d0644d93e8993e4e000000000000000000000000000000000000004000
% 00000000000004000000000364db66cd926d99324f600000000000000000000000000000000000004000
% 00000000000004000000000364ce638d93e7991e6dc00400000000000000000000000000000000004000
% 000000000000040000000000000000000008800000000b00000000000000000000000000000000004000
% 00000000000004000000000000000000000f8000000010c0000000000000000000000000000000004000
% 00000000000004000000000000000000000000000000103c000000000000000000000000000000004000
% 000000000000040000000000000000000000000000001006000000000000000000000000000000004000
% 000000000000040000000000000000000000000000002001800000000000000000000000000000004000
% 000000000000040000000000000000000000000000002000600000000000000000000000000000004000
% 000000000000040000000000000000000000000000004040200000000000000000000000000000004000
% 000000000000040000000000000000000000000000004080900000000000000000000000000000004000
% 000000000000040000000000000000000000000000008080900000000000000000000000000000004000
% 000000000000040000000000000000000000000000008000480000000000000000000000000000004000
% 000001c071c1840000000000000000000000000000010000080000000000000000000000000000004000
% 00000360db62c40000000000000000000000000000010000040000000000000000000000000000004000
% 00000360db66040000000000000000000000000000020400040000000000000000000000000000004000
% 000002208a27840000000000000000000000000000020800140000000000000000000000000000004000
% 000002208a26c7800000000000000000000000000004100012000000000000000000000000000003c000
% 000002208a244400000000000000000000000000000400000a0000000000000000000000000000004000
% 00000360db66c40000000001fbf07e7e0000000000040000010000000000000000000000000000004000
% 000001c471c3840000000000403006100000000000080000010000000000000000000000000000004000
% 00000000000004000000000040600c100000000000082000008000000000000000000000000000004000
% 00000000000004000000000040c018100000000000104000028000000000000000000000000000004000
% 00000000000004000000000040c018100000000000104000028000000000000000000000000000004000
% 00000000000004078f87c780418730100000000000200000014000000000000000000000000000004000
% 000000000000040000000000430060100000000000200000014000000000000000000000000000004000
% 00000000000004000000000043f07e100000000000400000002000000000000000000000000000004000
% 000000000000040000000000000000000000000000400000002000000000000000000000000000004000
% 000000000000040000000000000000000000000000810000001000000000000000000000000000004000
% 000000000000040000000000000000000000000000820000009000000000000000000000000000004000
% 000000000000040000000000000000000000000000820000005000000000000000000000000000004000
% 000000000000040000000000000000000000000001000000004800000000000000000000000000004000
% 000000000000040000000000000000000000000001000000004800000000000000000000000000004000
% 000000000000040000000000000000000000000001000000000400000000000000000000000000004000
% 000000000000040000000000000000000000000002080000000400000000000000000000000000004000
% 000000000000040000000000000000000000000002080000000200000000000000000000000000004000
% 000000000000040000000000000000000000000002080000001200000000000000000000000000004000
% 000000000000040000000000000000000000000002100000001200000000000000000000000000004000
% 000000000000040000000000000000000000000002000000001100000000000000000000000000004000
% 000000000000040000000000000000000000000002000000000100000000000000000000000000004000
% 000000000000040000000000000000000000000004000000000080000000000000000000000000004000
% 000000000000040000000000000000000000000004200000000080000000000000000000000000004000
% 000000000000040000000000000000000000000004200000000080000000000000000000000000004000
% 000001c071c3c40000000000000000000000000004400000000480000000000000000000000000004000
% 00000360db62040000000000000000000000000004400000000480000000000000000000000000004000
% 00000360db66040000000000000000000000000004000000000240000000000000000000000000004000
% 000002208a27840000000000000000000000000008000000000040000000000000000000000000004000
% 000002208a26c7800000000000000000000000000800000000004000000000000000000000000003c000
% 1fe002208a20440000000000000000000000000008800000000040000000000000000000000000004000
% 20100360db66c40000000000000000000000000008800000000020000000000000000000000000004000
% 000001c471c7840000000000000000000000000008800000000120000000000000000000000000004000
% 004000000000040000000000000000000000000008800000000120000000000000000000000000004000
% 03c0000000000400000000000000000000000000080000000000a0000000000000000000000000004000
% 0f0000000000040000000000000000000000000010000000000020000000000000000000000000004000
% b90000000000040000000000000000000000000010000000000010000000000000000000000000004000
% dd0000000000040000000000000000000000000011000000000010000000000000000000000000004000
% 03c000000000040000000000000000000000000011000000000050000000000000000000000000004000
% 00c000000000040000000000000000000000000012000000000050000000000000000000000000004000
% 300000000000040000000000000000000000000012000000000050000000000000000000000000004000
% 0f0000000000040000000000000000000000000020000000000048000000000000000000000000004000
% 01c000000000040000000000000000000000000020000000000048000000000000000000000000004000
% 000000000000040000000000000000000000000020000000000008000000000000000000000000004000
% 000000000000040000000000000000000000000024000000000008000000000000000000000000004000
% 000000000000040000000000000000000000000024000000000004000000000000000000000000004000
% 000000000000040000000000000000000000000024000000000024000000000000000000000000004000
% 3fc000000000040000000000000000000000000044000000000024000000000000000000000000004000
% 080000000000040000000000000000000000000040000000000014000000000000000000000000004000
% 000000000000040000000000000000000000000040000000000004000000000000000000000000004000
% 000000000000040000000000000000000000000040000000000002000000000000000000000000004000
% 200000000000040000000000000000000000000048000000000002000000000000000000000000004000
% 1fe00000000004000000000000000000000000005000000000000a000000000000000000000000004000
% 03800000000004000000000000000000000000009000000000000a000000000000000000000000004000
% 00000000000004000000000000000000000000009000000000000a000000000000000000000000004000
% 000000000000040000000000000000000000000080000000000009000000000000000000000000004000
% 000001c071c0840000000000000000000000000080000000000009000000000000000000000000004000
% 00000360db61840000000000000000000000000080000000000001000000000000000000000000004000
% 08000360db618400000000000000000000000000a0000000000001000000000000000000000000004000
% 0f0002208a228780000000000000000000000000a000000000000080000000000000000000000003c000
% 01e002208a26840000000000000000000000000120000000000004800000000000000000000000004000
% 07f002208a27c40000000000000000000000000120000000000002800000000000000000000000004000
% 0c100360db67c40000000000000000000000000100000000000002800000000000000000000000004000
% 084001c471c0840000000000000000000000000100000000000000800000000000000000000000004000
% 1fc000000000040000000000000000000000000100000000000000400000000000000000000000004000
% 0c0000000000040000000000000000000000000140000000000000400000000000000000000000004000
% 000000000000040000000000000000000000000280000000000000400000000000000000000000004000
% 2fc000000000040000000000000000000000000280000000000001400000000000000000000000004000
% 2fc000000000040000000000000000000000000280000000000001400000000000000000000000004000
% 000000000000040000000000000000000000000200000000000001200000000000000000000000004000
% 018000000000040000000000000000000000000200000000000000200000000000000000000000004000
% 0dc000000000040000000000000000000000000200000000000000200000000000000000000000004000
% 0b4000000000040000000000000000000000000500000000000000200000000000000000000000004000
% 0ec000000000040000000000000000000000000600000000000000100000000000000000000000004000
% 068000000000040000000000000000000000000600000000000000500000000000000000000000004000
% 000000000000040000000000000000000000000600000000000000500000000000000000000000004000
% 000000000000040000000000000000000000000400000000000000500000000000000000000000004000
% 07c000000000040000000000000000000000000400000000000000100000000000000000000000004000
% 0c0000000000040000000000000000000000000800000000000000080000000000000000000000004000
% 080000000000040000000000000000000000000c00000000000000080000000000000000000000004000
% 0fc000000000040000000000000000000000000800000000000000080000000000000000000000004000
% 0fc000000000040000000000000000000000000800000000000000180000000000000000000000004000
% 000000000000040000000000000000000000000800000000000000180000000000000000000000004000
% 07c000000000040000000000000000000000000800000000000000140000000000000000000000004000
% 0d4000000000040000000000000000000000000800000000000000040000000000000000000000004000
% 094001c071c3840000000000000000000000001000000000000000040000000000000000000000004000
% 07c00360db66c40000000000000000000000001000000000000000040000000000000000000000004000
% 03800360db66c40000000000000000000000001000000000000000020000000000000000000000004000
% 000002208a21c40000000000000000000000003000000000000000060000000000000000000000004000
% 000002208a21c40000000000000000000000003000000000000000060000000000000000000000004000
% 3fc002208a2447800000000000000000000000100000000000000006000000000000000000000003c000
% 0cc00360db66c40000000000000000000000002000000000000000020000000000000000000000004000
% 084001c471c3840000000000000000000000002000000000000000010000000000000000000000004000
% 0cc000000000040000000000000000000000006000000000000000010000000000000000000000004000
% 07c000000000040000000000000000000000006000000000000000010000000000000000000000004000
% 00000000000004000000000000000000000000a000000000000000010000000000000000000000004000
% 00000000000004000000000000000000000000a000000000000000018000000000000000000000004000
% 000000000000040000000000000000000000004000000000000000008000000000000000000000004000
% 000000000000040000000000000000000000004000000000000000008000000000000000000000004000
% 0c0000000000040000000000000000000000004000000000000000008000000000000000000000004000
% 0fc000000000040000000000000000000000014000000000000000008000000000000000000000004000
% 0fc000000000040000000000000000000000014000000000000000004000000000000000000000004000
% 000000000000040000000000000000000000028000000000000000004000000000000000000000004000
% 000000000000040000000000000000000000028000000000000000004000000000000000000000004000
% 07c000000000040000000000000000000000008000000000000000006000000000000000000000004000
% 0d4000000000040000000000000000000000008000000000000000002000000000000000000000004000
% 094000000000040000000000000000000000008000000000000000002000000000000000000000004000
% 07c000000000040000000000000000000000050000000000000000002000000000000000000000004000
% 038000000000040000000000000000000000090000000000000000003000000000000000000000004000
% 084000000000040000000000000000000000090000000000000000003000000000000000000000004000
% 1fc000000000040000000000000000000000010000000000000000001800000000000000000000004000
% 0c0000000000040000000000000000000000020000000000000000001800000000000000000000004000
% 000000000000040000000000000000000000020000000000000000001000000000000000000000004000
% 084000000000040000000000000000000000020000000000000000001000000000000000000000004000
% 1fc000000000040000000000000000000000120000000000000000000800000000000000000000004000
% 0c0001c071c3840000000000000000000000240000000000000000000c00000000000000000000004000
% 2fc00360db66c40000000000000000000000240000000000000000000c00000000000000000000004000
% 2fc00360db64440000000000000000000000040000000000000000000a00000000000000000000004000
% 000002208a20c40000000000000000000000040000000000000000000a00000000000000000000004000
% 2ff002208a21840000000000000000000000040000000000000000000400000000000000000000004000
% 2ff002208a2307800000000000000000000008000000000000000000040000000000000000000003c000
% 00100360db66040000000000000000000000480000000000000000000400000000000000000000004000
% 000001c471c7c40000000000000000000000880000000000000000000500000000000000000000004000
% 000000000000040000000000000000000000880000000000000000000300000000000000000000004000
% 000000000000040000000000000000000000100000000000000000000280000000000000000000004000
% 000000000000040000000000000000000000100000000000000000000280000000000000000000004000
% 000000000000040000000000000000000000100000000000000000000200000000000000000000004000
% 000000000000040000000000000000000000100000000000000000000200000000000000000000004000
% 000000000000040000000000000000000001100000000000000000000100000000000000000000004000
% 000000000000040000000000000000000002200000000000000000000140000000000000000000004000
% 000000000000040000000000000000000002200000000000000000000120000000000000000000004000
% 000000000000040000000000000000000000200000000000000000000120000000000000000000004000
% 000000000000040000000000000000000000200000000000000000000080000000000000000000004000
% 000000000000040000000000000000000000400000000000000000000080000000000000000000004000
% 000000000000040000000000000000000008400000000000000000000080000000000000000000004000
% 000000000000040000000000000000000010400000000000000000000080000000000000000000004000
% 000000000000040000000000000000000010400000000000000000000088000000000000000000004000
% 000000000000040000000000000000000020800000000000000000000048000000000000000000004000
% 000000000000040000000000000000000000800000000000000000000044000000000000000000004000
% 000000000000040000000000000000000000800000000000000000000040000000000000000000004000
% 000000000000040000000000000000000000800000000000000000000040000000000000000000004000
% 000000000000040000000000000000000080800000000000000000000020000000000000000000004000
% 000000000000040000000000000000000081000000000000000000000022000000000000000000004000
% 000000000000040000000000000000000081000000000000000000000021000000000000000000004000
% 000000000000040000000000000000000001000000000000000000000021000000000000000000004000
% 000000000000040000000000000000000001000000000000000000000020800000000000000000004000
% 000001c071c1040000000000000000000002000000000000000000000010000000000000000000004000
% 00000360db61040000000000000000000202000000000000000000000018000000000000000000004000
% 00000360db63040000000000000000000402000000000000000000000004000000000000000000004000
% 000002208a21040000000000000000000402000000000000000000000002400000000000000000004000
% 000002208a21078000000000000000000004000000000000000000000001a0000000000000000003c000
% 000002208a21040000000000000000000004000000000000000000000000600000000000000000004000
% 00000360db61040000000000000000000004000000000000000000000000200000000000000000004000
% 000001c471c1040000000000000000000004000000000000000000000000180000000000000000004000
% 000000000000040000000000000000002004000000000000000000000000040000000000000000004000
% 000000000000040000000000000000004008000000000000000000000000070000000000000000004000
% 000000000000040000000000000000008008000000000000000000000000048000000000000000004000
% 000000000000040000000000000000000008000000000000000000000000024000000000000000004000
% 000000000000040000000000000000000008000000000000000000000000004000000000000000004000
% 0000000000000400000000000000000000f0000000000000000000000000002000000000000000004000
% 000000000000040000000000000000020700000000000000000000000000002000000000000000004000
% 000000000000040000000000000000043800000000000000000000000000003000000000000000004000
% 00000000000004000000000000000007c000000000000000000000000000002800000000000000004000
% 000000000000040000000000000000040000000000000000000000000000001800000000000000004000
% 000000000000040000000000000000080000000000000000000000000000000400000000000000004000
% 000000000000040000000000000000300000000000000000000000000000000400000000000000004000
% 000000000000040000000000000000600000000000000000000000000000000200000000000000004000
% 000000000000040000000000000000c00000000000000000000000000000000300000000000000004000
% 000000000000040000000000000001800000000000000000000000000000000180000000000000004000
% 000000000000040000000000000002000000000000000000000000000000000080000000000000004000
% 000000000000040000000000000004000000000000000000000000000000000080000000000000004000
% 000000000000040000000000000008000000000000000000000000000000000040000000000000004000
% 000000000000040000000000000030000000000000000000000000000000000048000000000000004000
% 000000000000040000000000000020000000000000000000000000000000000024000000000000004000
% 0000000000000400000000000002c0000000000000000000000000000000000020000000000000004000
% 000000000000040000000000000f00000000000000000000000000000000000010380000000000004000
% 000000000000040000000000000c00000000000000000000000000000000000008000000000000004000
% 00000000000004000000000007b00000000000000000000000000000000000000800f000000000004000
% 000000000000040000000001e1c000000001000000000010000000000080000004000500000000004000
% 0000000000000400000000e2260000000001000000000010000000000080000004000463000000004000
% 00000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000038e1c0000003871c0000000870e00000000380000000083870000000e387000000071c380
% 000000000006db360000006cdb600000008d9b000000006c0000000086cd8000001b6cd8000000db66c0
% 000000000006db3600000044db600000018d9b000000006c0000000186cd800000116cd8000000db66c0
% 000000000001d1220000000c8a20000000889100000000440000000084488000000344880000003a2440
% 000000000001d122000000188a20000000889100000000440000000084488000000644880000003a2440
% 0000000000745122000007308a20000038889100000000440000000084488000000c44880000008a2440
% 000000000006db3600000060db600000008d9b000000006c0000000086cd800000186cd8000000db66c0
% 0000000000038e1c0000007c71c0000000870e00000000380000000083870000001f387000000071c380
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000001800000000000000000000000000000
% 000000000000000000000000000000000000000000000000000001000000000000000000000000000000
% 00000000000000000000000000000000000001b000000003000010840000000000000000000000000000
% 000000000000000000000000000000000000000240000003000021820000000000000000000000000000
% 00000000000000000000000000000000000001b7e63844e3646021c20000000000000000000000000000
% 00000000000000000000000000000000000001b6cb3849b364b021420000000000000000000000000000
% 00000000000000000000000000000000000001b259306873659062620000000000000000000000000000
% 00000000000000000000000000000000000001b25f3039f365f063e20000000000000000000000000000
% 00000000000000000000000000000000000001b2593031336d9066220000000000000000000000000000
% 00000000000000000000000000000000000001b36f3031f33cf026320000000000000000000000000000
% 000000000000000000000000000000000000018000000000000020020000000000000000000000000000
% 000000000000000000000000000000000000038000000000000000040000000000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 1 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 76 214 547 597 282.6 229.8 89.7 537.21 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  692   109  5733  4708 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 694 4784 mt 
(-300) s
1791 4615 mt 1791 4561 L
1791  389 mt 1791  443 L
1587 4784 mt 
(-200) s
2684 4615 mt 2684 4561 L
2684  389 mt 2684  443 L
2480 4784 mt 
(-100) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4470 4615 mt 4470 4561 L
4470  389 mt 4470  443 L
4350 4784 mt 
(100) s
5363 4615 mt 5363 4561 L
5363  389 mt 5363  443 L
5243 4784 mt 
(200) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6136 4784 mt 
(300) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 4011 mt  952 4011 L
6256 4011 mt 6202 4011 L
 783 4064 mt 
(1) s
 898 3408 mt  952 3408 L
6256 3408 mt 6202 3408 L
 783 3461 mt 
(2) s
 898 2804 mt  952 2804 L
6256 2804 mt 6202 2804 L
 783 2857 mt 
(3) s
 898 2200 mt  952 2200 L
6256 2200 mt 6202 2200 L
 783 2253 mt 
(4) s
 898 1596 mt  952 1596 L
6256 1596 mt 6202 1596 L
 783 1649 mt 
(5) s
 898  993 mt  952  993 L
6256  993 mt 6202  993 L
 783 1046 mt 
(6) s
/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

 898  335 mt 
(x 10) s
/Helvetica /ISOLatin1Encoding 96 FMSR

1170  246 mt 
(-3) s
/Helvetica /ISOLatin1Encoding 144 FMSR

 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
184 2 183 2 184 5 184 18 184 49 183 57 184 178 184 217 
183 430 184 602 184 615 183 826 184 548 184 328 183 -257 184 -456 
184 -848 183 -662 184 -615 184 -396 183 -298 184 -176 184 -92 184 -40 
183 -24 184 -9 184 -4 183 0 184 -1 844 4614 30 MP stroke
SO
272 476 272 198 272 1229 272 1268 272 634 272 119 272 -594 272 -1705 
272 -1189 272 -79 272 -238 272 -119 1807 4615 13 MP stroke

gr 

end

eplot

epage
end

showpage


FMENDEPSF
J
107.78 720.33 133.78 720.33 2 L
J
107.78 720.33 109.53 720.33 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
[3.841 4.939] 3.841 I
109.53 720.33 132.03 720.33 2 L
N
J
132.03 720.33 133.78 720.33 2 L
N
J
107.78 743.83 133.78 743.83 2 L
N
0 12 Q
(micromagnetic) 140.28 741.33 T
(TZ-ZT) 140.78 717.33 T
(jitter density \0501/\201\051) 0 -270 56.44 604.88 TF
0 0 0 0 1 1 1 K
94.44 758.11 120.56 769.22 R
7 X
0 0 0 0 1 1 1 K
V
N
75.56 525.33 97.22 739.22 R
V
N
93.33 522.55 376.67 544.22 R
V
N
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(0) 231.11 534.22 T
(100) 268.33 534.22 T
(200) 312.78 534.22 T
(300) 357.78 534.22 T
(-100) 175.56 534.22 T
(-200) 131.11 534.22 T
(-300) 86.67 534.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.001) 67.78 572 T
(0.002) 67.78 602.55 T
(0.003) 67.78 632.55 T
(0.004) 67.78 662 T
(0.005) 67.78 693.11 T
(0.006) 67.78 723.11 T
(jitter value \050\201\051) 197.33 519.54 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 1884 2025 a(Figure)46 b(8:)72 b(Normalized)45
b(jitter)h(histograms)f(\(em-)1884 2146 y(pirical)e(p)s(dfs\))i(for)g
(the)h(orien)m(ted)f(medium.)80 b(Solid)1884 2266 y(line:)53
b(micromagnetic)34 b(mo)s(del.)58 b(Dotted)37 b(line:)53
b(TZ-)1884 2386 y(ZT)33 b(mo)s(del.)2040 4256 y @beginspecial
53 @llx 516 @lly 383 @urx 763 @ury 1984 @rwi @setspecial
% 00000e3870e0000000000000000000000000000000000000000000000000000000000000000000000000
% 00001b6cd9b0000000000000000000000000000000000000000000000000000000000000000000000000
% 0000116cd9b0000000000000000000000000000000000000000000000000000000000000000000000000
% 000003448910000000000000000000000000000000000000000000000000000000000000000000000000
% 000006448911fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000
% 00000c448911000000200000040000010000002000000400000080000020000004000000800000100000
% 0000186cd9b1000000200000040000010000002000000400000080000020000004000000800000100000
% 00001f3870e1000000200000040000010000002000000400000080000020000004000000800000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000018f00000000000000000000000000000000000100000
% 000000000001000000000000000000000000000020000000000000000000300000000000000300100000
% 000000000001000000000000000000000000000000020000000000000000000000000000001000100000
% 0000000000010000000000000000000000000000000200000000000000f6339ce3d871e7833b70100000
% 0000000000010000000000000000000000000000000100000000000000db36ddb36cdb6645b3d8100000
% 0000000000010000000000000000000000000000000000000000000000d9341913643a264c9380100000
% 00000000000100000000000000000000000000008000000001ffffffe0d934191364fa264f9380100000
% 0000000000010000000000000000000000000000800000000000000000d936d9b3649b664c93d8100000
% 0000000000010000000000000000000000000001000040000000000000d93398e364f9e6479b70100000
% 000000000001000000000000000000000000000000004000000000000000000000000220000000100000
% 000000000001e000000000000000000000000000000020000000000000000000000003e0000000f00000
% 000000000001000000000000000000000000000000002000000000000000000000000000000000100000
% 000000000001000000000000000000000000000200000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000400000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000400000000000000000000000000000000000000100000
% 1fe000000001000000000000000000000000000800000800000000000000000000000000000000100000
% 201000000001000000000000000000000000000000000400000000000000000000000000000000100000
% 008000000001000000000000000000000000000000000400000000000000000000000000000000100000
% 00c000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 00f800000001000000000000000000000000001000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000002000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000002000000100000000000000000000000000000000100000
% 3fc000000001000000000000000000000000000000000100000000000000000000000000000000100000
% 3fc000000001000000000000000000000000000000000080000000000000000000000000000000100000
% 1f0000000001000000000000000000000000000000000080000000000000000000000000000000100000
% 03c00000000100000000000000000000000000800000000000000000007efc1f9f800000000000100000
% 03c0041870e10000000000000000000000000080000000000000000000100c0184000000000000100000
% 1e00042cd9b1000000000000000000000000008000000000000000000010180304000000000000100000
% 3fc00c60d9b1000000000000000000000000008000000040000000000010300604000000000000100000
% 000004788911000000000000000000000000008000000040000000000010300604000000000000100000
% 0000046c891100000000000000000000000000000000002001e3e1f1e01061cc04000000000000100000
% 300004448911e00000000000000000000000000000000020000000000010c01804000000000000f00000
% 0f00046cd9b1000000000000000000000000000000000000000000000010fc1f84000000000000100000
% 01c0043870e1000000000000000000000000010000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000010000000000000000000000000000000000000000100000
% 004000000001000000000000000000000000020000000010000000000000000000000000000000100000
% 03c000000001000000000000000000000000000000000008000000000000000000000000000000100000
% 0f0000000001000000000000000000000000000000000008000000000000000000000000000000100000
% b90000000001000000000000000000000000000000000008000000000000000000000000000000100000
% dd0000000001000000000000000000000000040000000000000000000000000000000000000000100000
% 03c000000001000000000000000000000000040000000000000000000000000000000000000000100000
% 00c000000001000000000000000000000000040000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000040000000004000000000000000000000000000000100000
% 200000000001000000000000000000000000040000000002000000000000000000000000000000100000
% 1fe000000001000000000000000000000000000000000002000000000000000000000000000000100000
% 038000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000080000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000080000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000100000000001000000000000000000000000000000100000
% 080000000001000000000000000000000000000000000000800000000000000000000000000000100000
% 0f0000000001000000000000000000000000000000000000800000000000000000000000000000100000
% 01e000000001e00000000000000000000000000000000000000000000000000000000000000000f00000
% 07f000000001000000000000000000000000200000000000000000000000000000000000000000100000
% 0c1000000001000000000000000000000000200000000000000000000000000000000000000000100000
% 084000000001000000000000000000000000200000000000000000000000000000000000000000100000
% 1fc000000001000000000000000000000000200000000000400000000000000000000000000000100000
% 0c0000000001000000000000000000000000200000000000400000000000000000000000000000100000
% 000000000001000000000000000000000000000000000000200000000000000000000000000000100000
% 2fc000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 2fc000000001000000000000000000000000000000000000000000000000000000000000000000100000
% 000000000001000000000000000000000000400000000000000000000000000000000000000000100000
% 018000000001000000000000000000000000400000000000100000000000000000000000000000100000
% 0dc000000001000000000000000000000000800000000000100000000000000000000000000000100000
% 0b4000000001000000000000000000000000800000000000100000000000000000000000000000100000
% 0ec000000001000000000000000000000000000000000000900000000000000000000000000000100000
% 06800000000100000000000000000000000000000000000f500000000000000000000000000000100000
% 0000000000010000000000000000000000000000000000f0200000000000000000000000000000100000
% 000000000001000000000000000000000001000000000700100000000000000000000000000000100000
% 07c0043870e1000000000000000000000001000000007800100000000000000000000000000000100000
% 0c00046cd9b1000000000000000000000001000000078000080000000000000000000000000000100000
% 08000c44d9b1000000000000000000000001000000380000080000000000000000000000000000100000
% 0fc0040c8911000000000000000000000000000001c00000040000000000000000000000000000100000
% 0fc004188911e0000000000000000000000000000e000000020000000000000000000000000000f00000
% 000004308911000000000000000000000000000070000000020000000000000000000000000000100000
% 07c00460d9b1000000000000000000000002000380000000010000000000000000000000000000100000
% 0d40047c70e1000000000000000000000002001c00000000030000000000000000000000000000100000
% 09400000000100000000000000000000000400e000000000028000000000000000000000000000100000
% 07c000000001000000000000000000000004008000000000024000000000000000000000000000100000
% 038000000001000000000000000000000000010000000000024000000000000000000000000000100000
% 000000000001000000000000000000000000010000000000022000000000000000000000000000100000
% 000000000001000000000000000000000000020000000000002000000000000000000000000000100000
% 3fc000000001000000000000000000000008020000000000001000000000000000000000000000100000
% 0cc000000001000000000000000000000008020000000000000800000000000000000000000000100000
% 084000000001000000000000000000000008040000000000010800000000000000000000000000100000
% 0cc000000001000000000000000000000008040000000000010400000000000000000000000000100000
% 07c000000001000000000000000000000000080000000000008400000000000000000000000000100000
% 000000000001000000000000000000000000080000000000008200000000000000000000000000100000
% 000000000001000000000000000000000000100000000000000100000000000000000000000000100000
% 000000000001000000000000000000000010100000000000000100000000000000000000000000100000
% 000000000001000000000000000000000010100000000000000080000000000000000000000000100000
% 000000000001000000000000000000000010200000000000004080000000000000000000000000100000
% 07c000000001000000000000000000000020200000000000004040000000000000000000000000100000
% 0d4000000001000000000000000000000000400000000000004020000000000000000000000000100000
% 094000000001e00000000000000000000000400000000000004020000000000000000000000000f00000
% 07c000000001000000000000000000000000400000000000000010000000000000000000000000100000
% 038000000001000000000000000000000020800000000000000010000000000000000000000000100000
% 000000000001000000000000000000000040800000000000000008000000000000000000000000100000
% 000000000001000000000000000000000041000000000000002004000000000000000000000000100000
% 07c000000001000000000000000000000041000000000000003004000000000000000000000000100000
% 0c4000000001000000000000000000000002000000000000001002000000000000000000000000100000
% 084000000001000000000000000000000002000000000000001002000000000000000000000000100000
% 0ff000000001000000000000000000000002000000000000000002000000000000000000000000100000
% 0ff000000001000000000000000000000084000000000000000001000000000000000000000000100000
% 000000000001000000000000000000000084000000000000000001000000000000000000000000100000
% 078000000001000000000000000000000088000000000000000801000000000000000000000000100000
% 0cc000000001000000000000000000000088000000000000000800800000000000000000000000100000
% 084000000001000000000000000000000008000000000000000400800000000000000000000000100000
% 0cc000000001000000000000000000000010000000000000000400800000000000000000000000100000
% 078000000001000000000000000000000010000000000000000000800000000000000000000000100000
% 000000000001000000000000000000000120000000000000000000400000000000000000000000100000
% 3fc0003870e1000000000000000000000120000000000000000000400000000000000000000000100000
% 3fc0006cd9b1000000000000000000000220000000000000000200400000000000000000000000100000
% 0000006cd9b1000000000000000000000240000000000000000200200000000000000000000000100000
% 0180007c8911000000000000000000000040000000000000000200200000000000000000000000100000
% 0dc0007c8911000000000000000000000080000000000000000100200000000000000000000000100000
% 0b4000448911e00000000000000000000080000000000000000000100000000000000000000000f00000
% 0ec0006cd9b1000000000000000000000500000000000000000000100000000000000000000000100000
% 0680003870e1000000000000000000000500000000000000000000100000000000000000000000100000
% 000000000001000000000000000000000500000000000000000080080000000000000000000000100000
% 000000000001000000000000000000000600000000000000000080080000000000000000000000100000
% 000000000001000000000000000000000200000000000000000080080000000000000000000000100000
% 000000000001000000000000000000000400000000000000000000040000000000000000000000100000
% 000000000001000000000000000000000400000000000000000000040000000000000000000000100000
% 07c000000001000000000000000000000c00000000000000000000040000000000000000000000100000
% 0c0000000001000000000000000000001800000000000000000000020000000000000000000000100000
% 080000000001000000000000000000001800000000000000000020020000000000000000000000100000
% 0fc000000001000000000000000000001000000000000000000020020000000000000000000000100000
% 0fc000000001000000000000000000001000000000000000000020020000000000000000000000100000
% 000000000001000000000000000000002000000000000000000000010000000000000000000000100000
% 000000000001000000000000000000004000000000000000000000010000000000000000000000100000
% 07800000000100000000000000000000a000000000000000000000010000000000000000000000100000
% 0cc000000001000000000000000000012000000000000000000000008000000000000000000000100000
% 084000000001000000000000000000024000000000000000000010008000000000000000000000100000
% 0cc000000001000000000000000000024000000000000000000008008000000000000000000000100000
% 078000000001000000000000000000040000000000000000000008004000000000000000000000100000
% 2fc000000001000000000000000000080000000000000000000000004000000000000000000000100000
% 2fc000000001e00000000000000000100000000000000000000000004000000000000000000000f00000
% 000000000001000000000000000000208000000000000000000000002000000000000000000000100000
% 084000000001000000000000000000408000000000000000000000002000000000000000000000100000
% 1fc000000001000000000000000000408000000000000000000002002000000000000000000000100000
% 0c0000000001000000000000000000810000000000000000000002001000000000000000000000100000
% 2fc000000001000000000000000001000000000000000000000002001000000000000000000000100000
% 2fc000000001000000000000000002000000000000000000000000001000000000000000000000100000
% 000000000001000000000000000004000000000000000000000000000800000000000000000000100000
% 018000000001000000000000000008020000000000000000000000000800000000000000000000100000
% 0dc000000001000000000000000008020000000000000000000000000800000000000000000000100000
% 0b4000000001000000000000000010020000000000000000000000800400000000000000000000100000
% 0ec000000001000000000000000020040000000000000000000000400400000000000000000000100000
% 068000000001000000000000000040000000000000000000000000400400000000000000000000100000
% 000000000001000000000000000080000000000000000000000000000400000000000000000000100000
% 000000000001000000000000000100000000000000000000000000000200000000000000000000100000
% 07c000000001000000000000000100080000000000000000000000000200000000000000000000100000
% 0c0000000001000000000000000200080000000000000000000000200200000000000000000000100000
% 0800000870e1000000000000000400080000000000000000000000100100000000000000000000100000
% 0fc00018d9b1000000000000000400080000000000000000000000100100000000000000000000100000
% 0fc00018d9b1000000000000000800000000000000000000000000080100000000000000000000100000
% 000000288911000000000000001000000000000000000000000000000080000000000000000000100000
% 000000688911e00000000000001000000000000000000000000000000080000000000000000000f00000
% 07c0007c8911000000000000002000200000000000000000000000000080000000000000000000100000
% 0fc0007cd9b1000000000000004000200000000000000000000000040040000000000000000000100000
% 0b40000870e1000000000000004000400000000000000000000000040040000000000000000000100000
% 0d4000000001000000000000008000000000000000000000000000020040000000000000000000100000
% 05c000000001000000000000008000000000000000000000000000000020000000000000000000100000
% 000000000001000000000000010000000000000000000000000000000020000000000000000000100000
% 0c0000000001000000000000020000000000000000000000000000000010000000000000000000100000
% 0fc000000001000000000000020001000000000000000000000000000008000000000000000000100000
% 0fc000000001000000000000040001000000000000000000000000008006000000000000000000100000
% 084000000001000000000000080002000000000000000000000000004001000000000000000000100000
% 1fc000000001000000000000080000000000000000000000000000002000c00000000000000000100000
% 0c0000000001000000000000100000000000000000000000000000000000200000000000000000100000
% 000000000001000000000000200000000000000000000000000000000000100000000000000000100000
% 0000000000010000000000002000080000000000000000000000000000000c0000000000000000100000
% 000000000001000000000000400008000000000000000000000000000800020000000000000000100000
% 000000000001000000000000800010000000000000000000000000000400010000000000000000100000
% 00000000000100000000000080001000000000000000000000000000040000c000000000000000100000
% 000000000001000000000001000000000000000000000000000000000000002000000000000000100000
% 000000000001000000000002000000000000000000000000000000000000001000000000000000100000
% 000000000001000000000002000040000000000000000000000000000000000c00000000000000100000
% 000000000001e00000000004000040000000000000000000000000000080000200000000000000f00000
% 000000000001000000000008000080000000000000000000000000000080000100000000000000100000
% 0000000000010000000000080000800000000000000000000000000000400000c0000000000000100000
% 000000000001000000000010000000000000000000000000000000000000000020000000000000100000
% 000000000001000000000010000000000000000000000000000000000000000010000000000000100000
% 00000000000100000000006000000000000000000000000000000000000800000c000000000000100000
% 000000000001000000000080000400000000000000000000000000000004000002000000000000100000
% 000000000001000000000100000800000000000000000000000000000002000001800000000000100000
% 000000000001000000000600000800000000000000000000000000000000000000400000000000100000
% 000000000001000000000800000000000000000000000000000000000000000000200000000000100000
% 000000000001000000001000000000000000000000000000000000000000000000180000000000100000
% 000000000001000000006000000000000000000000000000000000000000400000040000000000100000
% 000000000001000000008000004000000000000000000000000000000000200000020000000000100000
% 000000000001000000010000008000000000000000000000000000000000100000018000000000100000
% 000000000001000000060000008000000000000000000000000000000000000000004000000000100000
% 000000000001000000080000000000000000000000000000000000000000018000002000000000100000
% 000000000001000000300000080000000000000000000000000000000000004000001e00000000100000
% 0000000000010000004000003000000000000000000000000000000000000004000001e0000000100000
% 000000000001000000a0000004000001000000200000040000008000002000038400001c800000100000
% 00000000000100000320000004000001000000200000040000008000002000000c000003c00000100000
% 000000000001001ffc20021c0400000100000020000004000000800000200000070e0000bc0000100000
% 000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000e038e08000000000000701c3840c00000000000701c3871c00000000000701c38e1c0
% 000000000000001b06db08000000000000d8366c41600000000000d8366cdb600000000000d8366db360
% 000000000000001b06db18000000000000d8366cc3000000000000d8366c8a200000000000d8366d1360
% 000000000000001104510800000000000088224443c000000000008822441860000000000088224433e0
% 00000000000000110451080000000000008822444360000000000088224430c0000000000088224463e0
% 00000000000000110451080000000000008822444220000000000088224461800000000000882244c220
% 000000000000001b06db08000000000000d8366c43600000000000d8366cc3000000000000d8366d8360
% 000000000000000e238e08000000000000709c3841c00000000000709c38fbe00000000000709c39f1c0
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000018000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000010000000000000000000000
% 000000000000000000000000000000000186000001800000000600001218088400000000000000000000
% 000000000000000000000000000200000010000001800000000600002338098200000000000000000000
% 0000000000000000000000000007e71e39be71e039b8f86044e6c860233811c200000000000000000000
% 0000000000000000000000000006ed9969b6d99069ecc8b049b6c8b02338114200000000000000000000
% 0000000000000000000000000002c3997196899071c4c9906876c99063f8126200000000000000000000
% 0000000000000000000000000002cf991d9689901dc4c9f039f6c9f062f833e200000000000000000000
% 0000000000000000000000000002c9996d96d9906decc9903136d99062d9e62200000000000000000000
% 0000000000000000000000000003cf99399e719039b8f8f031f678f022d9a63200000000000000000000
% 00000000000000000000000000000000000000000000c000000000002001000200000000000000000000
% 00000000000000000000000000000000000000000000c000000000000001000400000000000000000000
% 000000000000000000000000000000000000000000000000000000000001000000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 2 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 63 195 545 583 289.2 232.8 82.51 527.94 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  541   260  5864  4789 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 798 4784 mt 
(0.8) s
1434 4615 mt 1434 4561 L
1434  389 mt 1434  443 L
1394 4784 mt 
(1) s
1970 4615 mt 1970 4561 L
1970  389 mt 1970  443 L
1870 4784 mt 
(1.2) s
2505 4615 mt 2505 4561 L
2505  389 mt 2505  443 L
2405 4784 mt 
(1.4) s
3041 4615 mt 3041 4561 L
3041  389 mt 3041  443 L
2941 4784 mt 
(1.6) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3477 4784 mt 
(1.8) s
4113 4615 mt 4113 4561 L
4113  389 mt 4113  443 L
4073 4784 mt 
(2) s
4649 4615 mt 4649 4561 L
4649  389 mt 4649  443 L
4549 4784 mt 
(2.2) s
5184 4615 mt 5184 4561 L
5184  389 mt 5184  443 L
5084 4784 mt 
(2.4) s
5720 4615 mt 5720 4561 L
5720  389 mt 5720  443 L
5620 4784 mt 
(2.6) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6156 4784 mt 
(2.8) s
/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

5875 5016 mt 
(x 10) s
/Helvetica /ISOLatin1Encoding 96 FMSR

6147 4927 mt 
(-3) s
/Helvetica /ISOLatin1Encoding 144 FMSR

 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 4192 mt  952 4192 L
6256 4192 mt 6202 4192 L
 623 4245 mt 
(200) s
 898 3770 mt  952 3770 L
6256 3770 mt 6202 3770 L
 623 3823 mt 
(400) s
 898 3347 mt  952 3347 L
6256 3347 mt 6202 3347 L
 623 3400 mt 
(600) s
 898 2925 mt  952 2925 L
6256 2925 mt 6202 2925 L
 623 2978 mt 
(800) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 543 2555 mt 
(1000) s
 898 2079 mt  952 2079 L
6256 2079 mt 6202 2079 L
 543 2132 mt 
(1200) s
 898 1657 mt  952 1657 L
6256 1657 mt 6202 1657 L
 543 1710 mt 
(1400) s
 898 1234 mt  952 1234 L
6256 1234 mt 6202 1234 L
 543 1287 mt 
(1600) s
 898  812 mt  952  812 L
6256  812 mt 6202  812 L
 543  865 mt 
(1800) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 543  442 mt 
(2000) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
199 0 198 1 198 2 199 7 198 19 199 49 198 101 199 226 
198 326 199 544 198 755 199 919 198 669 199 393 198 -5 199 -477 
198 -929 199 -990 198 -752 199 -440 198 -293 199 -97 198 -21 1626 4607 24 MP stroke
SO
411 110 411 303 410 303 411 1295 411 689 411 -110 411 -138 411 -992 
411 -496 411 -633 411 -303 411 -28 941 4615 13 MP stroke

gr 

end

eplot

epage
end

showpage


FMENDEPSF
J
252.78 718.11 278.78 718.11 2 L
J
252.78 718.11 254.53 718.11 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
[3.841 4.939] 3.841 I
254.53 718.11 277.03 718.11 2 L
N
J
277.03 718.11 278.78 718.11 2 L
N
J
252.78 741.61 278.78 741.61 2 L
N
0 12 Q
(micromagnetic) 285.28 739.11 T
(TZ-ZT) 285.78 715.11 T
0 0 0 0 1 1 1 K
75.56 525.33 97.22 774.22 R
7 X
0 0 0 0 1 1 1 K
V
N
93.33 514.78 377.78 544.22 R
V
N
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(0.001) 111.67 535.33 T
(0.0022) 269.44 535.33 T
(800) 78.34 628.67 T
(0.0028) 348.89 535.33 T
(400) 78.34 586.44 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.0016) 188.88 535.33 T
(transition slope density \050\201/M) 0 -270 62.56 577.1 TF
0 9.6 Q
(r) 0 -270 65.56 727.82 TF
0 12 Q
(\051) 0 -270 62.56 731.02 TF
(transition slope value \050M) 161.78 517.88 T
0 9.6 Q
(r) 291.82 514.88 T
0 12 Q
(/\201\051) 295.02 517.88 T
(1200) 71.67 670.89 T
(1600) 71.67 713.67 T
(2000) 71.67 755.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 1884 4568 a(Figure)61 b(9:)103 b(Normalized)60
b(transition)g(slop)s(e)i(his-)1884 4688 y(tograms)76
b(\(empirical)d(p)s(dfs\))k(for)f(the)h(orien)m(ted)1884
4808 y(medium.)105 b(Solid)52 b(line:)85 b(micromagnetic)51
b(mo)s(del.)1884 4929 y(Dotted)32 b(line:)42 b(TZ-ZT)33
b(mo)s(del.)p eop
27 26 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1064 b Fr(xxvii)-9 1754 y @beginspecial 18 @llx 519 @lly
332 @urx 767 @ury 1984 @rwi @setspecial
% 0000701c20c000000000000000000000000000000000000000000000000000000000000000000000
% 0000d03460c000000000000000000000000000000000000000000000000000000000000000000000
% 000098262143ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
% 00009826234200000040000008000002000000400000080000010000004000000800000100000020
% 0000982622c200000040000008000002000000400000080000010000004000000800000100000020
% 0000d03423e200000040000008000002000000400000080000010000004000000800000100000020
% 0000709c204200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000e00000000000000000000000000000000020
% 00000000000200000000000000000000000000000001000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000030000000000000000000000000000000020
% 00000000000200000000000000000000000000000010008000000000000000000000000000000020
% 00000000000200000000000000000000000000000060000800000000000000000000000000000020
% 00000000000200000000000000000000000000000000000600000000000000000000000000000020
% 00000000000200000000000000000000000000000400000100000000000000000000000000000020
% 00000000000200000000000000000000000000001800000010000000000000000000000000000020
% 0000000000020000000000000000000000000000200000000c000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000060000000000600000000000000000000000000020
% 00000000000200000000000000000000000000080000000000180000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 0000000000020000000000000000000000000180000000000000c000000000000000000000000020
% 00000000000200000000000000000000000002000000000000002000000000000000000000000020
% 0000701c21c200000000000000000000000000000000000000000000000000000000000000000020
% 0000d034636200000000000000000000000000000000000000000180000000000000000000000020
% 000098262062000000000000000000000000c0000000000000000040000000000000000000000020
% 0000982620c200000000000000000000000100000000000000000000000000000000000000000020
% 000098262183c00000000000000000000000000000000000000000060000000000000000000001e0
% 0000d034230200000000000000000000003000000000000000000002000000000000000000000020
% 0000709c23e200000000000000000000004000000000000000000001000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000020000000000700000000000400000000000000000000020
% 000000000002000000000000000000000400000000038ffff8000000200000000000000000000020
% 0000000000020000000000000000000008000000001c000007fffc00100000000000000000000020
% 000000000002000000000000000000000000000001e00000000003fe000000000000000000000020
% 00000000000200000000000000000000000000000e00000000000001000000000000000000000020
% 00000000000200000000000000000000000000007000000000000000800000000000000000000020
% 00000000000200000000000000000000400000038000000000000000420000000000000000000020
% 000000000002000000000000000000004000003c0000000000000000220000000000000000000020
% 00000000000200000000000000000000800001c00000000000000000110000000000000000000020
% 0000000000020000000000000000000000000e000000000000000000080000000000000000000020
% 000000000002000000000000000000000000f0000000000000000000040000000000000000000020
% 1f000000000200000000000000000000000700000000000000000000020000000000000000000020
% 35000000000200000000000000000004003800000000000000000000012000000000000000000020
% 2500000000020000000000000000000801c000000000000000000000009000000000000000000020
% 1f000000000200000000000000000010020000000000000000000000007000000000000000000020
% 0e000000000200000000000000000000040000000000000000000000001000000000000000000020
% 00000000000200000000000000000000080000000000000000000000000800000000000000000020
% 12000000000200000000000000000000100000000000000000000000000400000000000000000020
% 33000000000200000000000000000080200000000000000000000000000200000000000000000020
% 21000000000200000000000000000080400000000000000000000000000100000000000000000020
% 33000000000200000000000000000000800000000000000000000000000080000000000000000020
% 1e0000e0708200000000000000000001000000000000000000000000000040000000000000000020
% 000001a0d18200000000000000000006000000000000000000000000000020000000000000000020
% 1f000130988200000000000000000408000000000000000000000000000010000000000000000020
% 30000130988200000000000000000810000000000000000000000000000018000000000000000020
% 200001309883c000000000000000102000000000000000000000000000000e0000000000000001e0
% 3f0001a0d08200000000000000000040000000000000000000000000000009000000000000000020
% 3f0000e2708200000000000000000080000000000000000000000000000000800000000000000020
% 00000000000200000000000000000100000000000000000000000000000000400000000000000020
% 00000000000200000000000000008200000000000000000000000000000000200000000000000020
% 1f000000000200000000000000008400000000000000000000000000000001100000000000000020
% 3f000000000200000000000000010800000000000000000000000000000000880000000000000020
% 2d000000000200000000000000003000000000000000000000000000000000040000000000000020
% 35000000000200000000000000004000000000000000000000000000000000020000000000000020
% 17000000000200000000000000008000000000000000000000000000000000010000000000000020
% 00000000000200000000000000090000000000000000000000000000000000108000000000000020
% bf000000000200000000000000120000000000000000000000000000000000084000000000000020
% bf000000000200000000000000240000000000000000000000000000000000083000000000000020
% 00000000000200000000000000080000000000000000000000000000000000000800000000000020
% 30000000000200000000000000100000000000000000000000000000000000000000000000000020
% 3f000000000200000000000000200000000000000000000000000000000000000400000000000020
% 3f000000000200000000000000c00000000000000000000000000000000000010200000000000020
% 00000000000200000000000003000000000000000000000000000000000000008100000000000020
% 1f000000000200000000000002000000000000000000000000000000000000004100000000000020
% 3f000000000200000000000002000000000000000000000000000000000000000080000000000020
% 2d000000000200000000000004000000000000000000000000000000000000000040000000000020
% 35000000000200000000000008000000000000000000000000000000000000000040000000000020
% 17000000000200000000000018000000000000000000000000000000000000000820000000000020
% 00000000000200000000000018000000000000000000000000000000000000000810000000000020
% 20000000000200000000000030000000000000000000000000000000000000000410000000000020
% 1c000000000200000000000040000000000000000000000000000000000000000008000000000020
% 07000000000200000000000080000000000000000000000000000000000000000008000000000020
% 0f00701c71c200000000000100000000000000000000000000000000000000000004000000000020
% 3800d034d34200000000000140000000000000000000000000000000000000000102000000000020
% 000098269b4200000000000240000000000000000000000000000000000000000102000000000020
% 0000982699c3c00000000004800000000000000000000000000000000000000000810000000001e0
% 000098269a6200000000000880000000000000000000000000000000000000000000800000000020
% 0000d034d26200000000000800000000000000000000000000000000000000000000800000000020
% 0000709c71c200000000001000000000000000000000000000000000000000000000400000000020
% 1f000000000200000000002000000000000000000000000000000000000000000000200000000020
% 30000000000200000000004200000000000000000000000000000000000000000020200000000020
% 20000000000200000000004400000000000000000000000000000000000000000010100000000020
% 3f000000000200000000008400000000000000000000000000000000000000000010080000000020
% 3f000000000200000000010000000000000000000000000000000000000000000000080000000020
% 00000000000200000000020000000000000000000000000000000000000000000000040000000020
% 00000000000200000000020000000000000000000000000000000000000000000000040000000020
% 1e000000000200000000041000000000000000000000000000000000000000000004020000000020
% 33000000000200000000082000000000000000000000000000000000000000000002010000000020
% 21000000000200000000102000000000000000000000000000000000000000000002010000000020
% 33000000000200000000204000000000000000000000000000000000000000000000008000000020
% 1e000000000200000000200000000000000000000000000000000000000000000000004000000020
% 00000000000200000000400000000000000000000000000000000000000000000000004000000020
% bf000000000200000000800000000000000000000000000000000000000000000000002000000020
% bf000000000200000001010000000000000000000000000000000000000000000000801000000020
% 21000000000200000001010000000000000000000000000000000000000000000000401000000020
% 7f000000000200000002020000000000000000000000000000000000000000000000400800000020
% 30000000000200000002000000000000000000000000000000000000000000000000000400000020
% 00000000000200000004000000000000000000000000000000000000000000000000000400000020
% 00000000000200000008000000000000000000000000000000000000000000000000000200000020
% 1f000000000200000008080000000000000000000000000000000000000000000000100200000020
% 3f000000000200000010080000000000000000000000000000000000000000000000080100000020
% 2d000000000200000010100000000000000000000000000000000000000000000000080080000020
% 3500701c71c200000020000000000000000000000000000000000000000000000000000080000020
% 1700d034d34200000040000000000000000000000000000000000000000000000000000080000020
% 000098269a0200000040000000000000000000000000000000000000000000000000000040000020
% 010098269bc3c00000800000000000000000000000000000000000000000000000000000400001e0
% 310098269a6200000100800000000000000000000000000000000000000000000000010040000020
% 2d00d034d36200000100800000000000000000000000000000000000000000000000010020000020
% 2700709c71c200000201800000000000000000000000000000000000000000000000008020000020
% 23000000000200000200000000000000000000000000000000000000000000000000000020000020
% bf000000000200000400000000000000000000000000000000000000000000000000000010000020
% bf000000000200000800000000000000000000000000000000000000000000000000000010000020
% 00000000000200000802000000000000000000000000000000000000000000000000004010000020
% 21000000000200001004000000000000000000000000000000000000000000000000002008000020
% 7f000000000200001004000000000000000000000000000000000000000000000000002008000020
% 30000000000200002000000000000000000000000000000000000000000000000000001008000020
% 00000000000200004000000000000000000000000000000000000000000000000000000004000020
% 1f000000000200004000000000000000000000000000000000000000000000000000000004000020
% 35000000000200008000000000000000000000000000000000000000000000000000000004000020
% 25000000000200008010000000000000000000000000000000000000000000000000000402000020
% 1f000000000200010010000000000000000000000000000000000000000000000000000402000020
% 0e000000000200010020000000000000000000000000000000000000000000000000000202000020
% 00000000000200020000000000000000000000000000000000000000000000000000000001000020
% 00000000000200020000000000000000000000000000000000000000000000000000000001000020
% 1f000000000200020000000000000000000000000000000000000000000000000000000001000020
% 30000000000200040080000000000000000000000000000000000000000000000000000080800020
% 20000000000200040080000000000000000000000000000000000000000000000000000080800020
% 3f000000000200080080000000000000000000000000000000000000000000000000000080800020
% 3f000000000200080100000000000000000000000000000000000000000000000000000040800020
% 00000000000200080000000000000000000000000000000000000000000000000000000000400020
% 00000000000200100000000000000000000000000000000000000000000000000000000000400020
% 3fc00000000200100000000000000000000000000000000000000000000000000000000000400020
% 3340701c70c200200200000000000000000000000000000000000000000000000000000020200020
% 2140d034d0c20020040000000000000000000000000030c000c00001800000000000000010200020
% 33409826994200200400000000000000000000000000000000c00000000000000000000010200020
% 1ec098269b43c0400000000000000000000000067b1f37ce38c2271db8f0e18000000000001001e0
% 000098269ac2004000000000000000000000000b6d9937db6cc24d9decc9b2c00000000000100020
% 0000d034d3e200800000000000000000000000196c9936d01cc343999cc906400000000000100020
% 1f00709c7042008000000000000000000000001f6c9936d07cc1cf99fcc907c00000000000080020
% 3f0000000002008010000000000ffffffffff8196c9936db4cc18999ccc9b6400000000004080020
% 2d0000000002010020000000000000000000000f6c9f36ce7cc18f99fcc8e3c00000000004080020
% 35000000000201002000000000000000000000000018000000000000000000000000000002040020
% 17000000000202000000000000000000000000000018000000000000000000000000000000040020
% 00000000000202000000000000000000000000000000000000000000000000000000000000020020
% 00000000000204000000000000000000000000000000000000000000000000000000000000010020
% 1f000000000204008000000000000000000000000000000000000000000000000000000001008020
% 30000000000204008000000000000000000000000000000000000000000000000000000000804020
% 30000000000208010000000000000000000000000000000000000000000000000000000000802020
% 1f000000000208010000000000000000000000000000000000000000000000000000000000402020
% 3f000000000210000000000000000000000000000000000000000000000000000000000000001020
% 20000000000210000000000000000000000000000000000000000000000000000000000000000820
% 3f000000000220000000000000000000000000000000000000000000000000000000000000000820
% 3f000000000220020000000000000000000000180000000000000000014000000000000000200820
% 00000000000220040000000000000000000000180000200000000000030400000000000000100820
% 0000000000024004000000000000000000000018c70e7071e64738c3834e00000000000000100420
% 00000000000240080000000000000000000000196d9a60d3664db966834c00000000000000000420
% 000000000002800000000000000000000000001b239c20e22643b327034400000000000000000420
% 000000000002800000000000000f3e3e3c3c781bef872e3a264fb3e1c34400000000000000000420
% 000000000003800000000000000000000000001b299b20db66c9b326c34400000000000000040220
% 0000000000020010000000000000000000000019ef8e3071e3cfb1e3834600000000000000040220
% 00000000000200100000000000000000000000000000000020000000000000000000000000040120
% 00000000000200200000000000000000000000000000000020000000000000000000000000020120
% 000000000002000000000000000000000000000000000000000000000000000000000000000000a0
% 0000701c71c200000000000000000000000000000000000000000000000000000000000000000020
% 0000d034d36200000000000000000000000000000000000000000000000000000000000000000020
% 000098269863c00000000000000000000000000000000000000000000000000000000000000001e0
% 0000982698c200800000000000000000000000000000000000000000000000000000000000010020
% 00009826998200800000000000000000000000000000000000000000000000000000000000008020
% 0000d034d30200800000000000000000000000000000000000000000000000000000000000008020
% 0000709c73e200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000202000000000000000000000000000000000000000000000000000000000000002020
% 00000000000202000000000000000000000000000000000000000000000000000000000000002020
% 00000000000204000000000000000000000000000000000000000000000000000000000000002020
% 00000000000204000000000000000000000000000000000000000000000000000000000000001020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000208000000000000000000000000000000000000000000000000000000000000000820
% 00000000000210000000000000000000000000000000000000000000000000000000000000000820
% 00000000000210000000000000000000000000000000000000000000000000000000000000000420
% 00000000000210000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000240000000000000000000000000000000000000000000000000000000000000000020
% 00000000000240000000000000000000000000000000000000000000000000000000000000000120
% 00000000000240000000000000000000000000000000000000000000000000000000000000000120
% 00000000000240000000000000000000000000000000000000000000000000000000000000000120
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000300000040000008000002000000400000080000010000004000000800000100000020
% 00000000000300000040000008000002000000400000080000010000004000000800000100000020
% 00000000000200000040000008000002000000400000080000010000004000000800000100000020
% 000000000003ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000400000000000000000000000000000001c0000000000000000000000000000000020
% 000000000000c0000000000000000000000000000000340000000000000000000000000000000060
% 00000000000040000000000000000000000000000000260000000000000000000000000000000020
% 00000000000040000000000000000000000000000000260000000000000000000000000000000020
% 00000000001c40000000000000000000000000000000260000000000000000000000000000000020
% 00000000000040000000000000000000000000000000340000000000000000000000000000000020
% 000000000000400000000000000000000000000000001c0000000000000000000000000000000020
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000060000c00006188040c3000000000000000000000
% 000000000000000000000000000000000000000100004000006300042c6000000000000000000000
% 0000000000000000000000000000007b0e1ef063ef1cedc780e711243ce000000000000000000000
% 0000000000000000000000000000006d9b36c8b36136cf6640a5216454a000000000000000000000
% 0000000000000000000000000000006c8722c991630e4e2640af21c495e000000000000000000000
% 0000000000000000000000000000006c9f22c9f1663e4e2640aa2184954000000000000000000000
% 0000000000000000000000000000006c9336c9916c264f6640ba23c5974700000000000000000000
% 0000000000000000000000000000006c9f1ec8f1efbe6dc641b22649364600000000000000000000
% 00000000000000000000000000000000002200000000000000002008000400000000000000000000
% 00000000000000000000000000000000003e00000000000000002010000c00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000c00000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 60 214 539 583 287.4 221.4 44.75 544.75 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  501   260  5844  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 774 4784 mt 
(-1) s
1434 4615 mt 1434 4561 L
1434  389 mt 1434  443 L
1250 4784 mt 
(-0.8) s
1970 4615 mt 1970 4561 L
1970  389 mt 1970  443 L
1786 4784 mt 
(-0.6) s
2505 4615 mt 2505 4561 L
2505  389 mt 2505  443 L
2321 4784 mt 
(-0.4) s
3041 4615 mt 3041 4561 L
3041  389 mt 3041  443 L
2857 4784 mt 
(-0.2) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4113 4615 mt 4113 4561 L
4113  389 mt 4113  443 L
4013 4784 mt 
(0.2) s
4649 4615 mt 4649 4561 L
4649  389 mt 4649  443 L
4549 4784 mt 
(0.4) s
5184 4615 mt 5184 4561 L
5184  389 mt 5184  443 L
5084 4784 mt 
(0.6) s
5720 4615 mt 5720 4561 L
5720  389 mt 5720  443 L
5620 4784 mt 
(0.8) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6216 4784 mt 
(1) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 4011 mt  952 4011 L
6256 4011 mt 6202 4011 L
 503 4064 mt 
(0.002) s
 898 3408 mt  952 3408 L
6256 3408 mt 6202 3408 L
 503 3461 mt 
(0.004) s
 898 2804 mt  952 2804 L
6256 2804 mt 6202 2804 L
 503 2857 mt 
(0.006) s
 898 2200 mt  952 2200 L
6256 2200 mt 6202 2200 L
 503 2253 mt 
(0.008) s
 898 1596 mt  952 1596 L
6256 1596 mt 6202 1596 L
 583 1649 mt 
(0.01) s
 898  993 mt  952  993 L
6256  993 mt 6202  993 L
 503 1046 mt 
(0.012) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 503  442 mt 
(0.014) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
17 16 40 69 51 190 128 142 260 812 539 839 788 725 884 53 
840 -254 657 -596 459 -600 309 -501 166 -410 92 -215 44 -106 26 -71 
21 -13 10 -15 4 -24 898 3913 20 MP stroke
DA
17 53 40 114 51 147 128 355 260 664 539 1137 788 1079 884 385 
840 -441 657 -894 459 -909 309 -747 166 -443 92 -260 44 -128 26 -76 
21 -62 10 -30 4 -11 898 4615 20 MP stroke

gr 
DA
SO

end

eplot

epage
end

showpage


FMENDEPSF
0 12 Q
0 X
0 0 0 1 0 0 0 K
(magnetization) 139 521.21 T
1 F
(M\050x\051/M) 217.04 521.21 T
1 9.6 Q
(r) 254.36 518.21 T
0 12 Q
(magnetization variance) 0 -270 26 596.5 TF
J
127 592 166 592 2 L
J
127 592 128.75 592 2 L
0.5 H
2 Z
N
[3.404 4.377] 3.404 I
128.75 592 164.25 592 2 L
N
J
164.25 592 166 592 2 L
N
J
127 610.5 166 610.5 2 L
N
(empirical variance) 172.5 608 T
(least-squares \336t) 173 589 T
0 0 0 1 0 0 0 K
0 0 0 0 1 1 1 K
59 536.5 336.5 550.5 R
7 X
0 0 0 0 1 1 1 K
V
40.5 522 63 771.5 R
V
0 0 0 1 0 0 0 K
0 11 Q
0 X
0 0 0 1 0 0 0 K
(0.002) 34.44 578.94 T
(0.004) 34.44 610.11 T
(0.006) 34.44 640.11 T
(0.008) 34.44 670.11 T
(0.01) 40.56 701.11 T
(0.012) 34.44 730.61 T
(-1) 61 541 T
(0) 196 541 T
(1) 329.5 541 T
(0.014) 34.44 759.78 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 2066 a(Figure)62 b(10:)103 b(Magnetization)62
b(v)-5 b(ariance)62 b(for)h(the)-165 2186 y(isotropic)38
b(medium.)64 b(Solid)38 b(line:)57 b(empirical)37 b(mag-)-165
2306 y(netization)30 b(v)-5 b(ariance)36 b(^)-54 b Fl(\033)725
2321 y Fj(M)804 2306 y Fr(\()p Fl(x)p Fr(\))32 b(v)m(ersus)i(the)e
(magneti-)-165 2427 y(zation)41 b Fl(M)10 b Fr(\()p Fl(x)p
Fr(\))p Fl(=)-5 b(M)510 2442 y Fj(r)548 2427 y Fr(.)72
b(Dotted)41 b(line:)61 b(Least-squares)-165 2547 y(parab)s(ola)30
b(\014t.)-9 4446 y @beginspecial 57 @llx 482 @lly 354
@urx 731 @ury 1984 @rwi @setspecial
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 00000c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000040000000000000000000000000000000000000000000000000000000000000000000000
% 00000407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
% 00000404000000800000100000020000004000001000000200000040001a3c7f000200000040
% 000004040000008000001000000200000040000010000002000000400601ff80000200000040
% 0000040400000080000010000002000000400000100000020000004008fe0800000200000040
% 00000004000000800000100000020000004000001000000200000043bf000800000200000040
% 00000004000000000000000000000000000000000000000000000007c0000000000000000040
% 0000000400000080000010000002000000400000100000020000005800000800000200000040
% 000000040000000000000000000000000000000000000000000001e000000000000000000040
% 0000000400000000000000000000000000000000000000000000030000000000000000000040
% 00000004000000800000100000020000004000001000000200000c4000000800000200000040
% 0000000400000000000000000000000000000000000000000000700000000000000000000040
% 0000000400000080000010000002000000400000100000020000a04000000800000200000040
% 0000000400000080000010000002000000400000100000020001c04000000800000200000040
% 0000000400000000000000000000000000000000000000000002000000000000000000000040
% 0000000400000080000010000002000000400000100000020004004000000800000200000040
% 000000040000000000000000000000000000000000000000000c000000000000000000000040
% 0000000400000000000000000000000000000000000000000018000000000000000000000040
% 0000000400000080000010000002000000400000100000020030004000000800000200000040
% 00000004000000000000000000000000000000000000000000c0000000000000000000000040
% 0000000400000000000000000000000000000000000000000100000000000000000000000040
% 0000000400000080000010000002000000400000100000020240004000000800000200000040
% 000000079692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25bc0
% 0000000400000080000010000002000000400000100000020500004000000800000200000040
% 0200000400000000000000000000000000000000000000000800000000000000000000000040
% 0300000400000000000000000000000000000000000000000800000000000000000000000040
% 03e0000400000080000010000002000000400000100000021000004000000800000200000040
% 0060000400000000000000000000000000000000000000001800000000000000000000000040
% 8000000400000000000000000000000000000000000000002800000000000000000000000040
% f800000400000080000010000002000000400000100000025000004000000800000200000040
% 7f00000400000000000000000000000000000000000000004000000000000000000000000040
% 3800000400000080000010000002000000400000100000028000004000000800000200000040
% 0e00000400000080000010000002000000400000100000028000004000000800000200000040
% 0300000400000000000000000000000000000000000000014000000000000000000000000040
% ff00000400000080000010000002000000400000100000038000004000000800000200000040
% e000000400000000000000000000000000000000000000028000000000000000000000000040
% 3f00000400000000000000000000000000000000000000030000000000000000000000000040
% 6100000400000080000010000002000000400000100000060000004000000800000200000040
% 1000000400000000000000000000000000000000000000040000000000000000000000000040
% 0e000004000000800000100000020000004000001000000e0000004000000800000200000040
% 0300000400000080000010000002000000400000100000160000004000000800000200000040
% 0000000400000000000000000000000000000000000000180000000000000000000000000040
% fe000004000000800000100000020000004000001000002a0000004000000800000200000040
% 018000079692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25bc0
% 0040000400000000000000000000000000000000000000400000000000000000000000000040
% 3000000400000080000010000002000000400000100000420000004000000800000200000040
% 1b00000400000000000000000000000000000000000000600000000000000000000000000040
% 0e00000400000080000010000002000000400000100000a20000004000000800000200000040
% 3e00000400000080000010000002000000400000100000c20000004000000800000200000040
% 0300000400000000000000000000000000000000000000800000000000000000000000000040
% 0100000400000080000010000002000000400000100001020000004000000800000200000040
% 8000000400000000000000000000000000000000000001000000000000000000000000000040
% 2000000400000000000000000000000000000000000002000000000000000000000000000040
% 1fc0000400000080000010000002000000400000100003020000004000000800000200000040
% 0000000400000000000000000000000000000000000003000000000000000000000000000040
% 8000000400000000000000000000000000000000000006000000000000000000000000000040
% f800000400000080000010000002000000400000100004020000004000000800000200000040
% 7f00000400000000000000000000000000000000000004000000000000000000000000000040
% 3800000400000080000010000002000000400000100008020000004000000800000200000040
% 0e0000040000008000001000000200000040000010000c020000004000000800000200000040
% 0300000400000000000000000000000000000000000008000000000000000000000000000040
% ff00000400000080000010000002000000400000100018020000004000000800000200000040
% e000000400000000000000000000000000000000000010000000000000000000000000000040
% 3f00000400000000000000000000000000000000000020000000000000000000000000000040
% 0100000400000080000010000002000000400000100020020000004000000800000200000040
% 000000079692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25bc0
% 0000000400000080000010000002000000400000100060020000004000000800000200000040
% 0000000400000080000010000002000000400000100040020000004000000800000200000040
% 0000000400000000000000000000000000000000000040000000000000000000000000000040
% 00000004000000800000100000020000004000001000c0020000004000000800000200000040
% 1f00000400000000000000000000000000000000000080000000000000000000000000000040
% 3000000400000000000000000000000000000000000100000000000000000000000000000040
% 2000000400000080000010600002000000400c00100100020000004000000800000200000040
% 3f00000400000000000000000000000000002000000100000000000000000000000000000040
% 3f000004000000800001fc6e738f61c3de4c7ce0100300020000004000000800000200000040
% 00000004000000800001b67b76cfb366d9566db0100200020000004000000800000200000040
% 00000004000000000001b270644d90e459322d00000200000000000000000000000000000040
% 1e000004000000800001b270644f93e4597e2d00100400020000004000000800000200000040
% 33000004ffffffffff81b27b66cd9266d9322db0000400000000000000000000000000000040
% 21000004000000000001b26e638d93e3d91e3ce0000400000000000000000000000000000040
% 3300000400000080000010000002000440400000100c00020000004000000800000200000040
% 1e000004000000000000000000000007c0000000000800000000000000000000000000000040
% 0000000400000000000000000000000000000000000800000000000000000000000000000040
% bf00000400000080000010000002000000400000101800020000004000000800000200000040
% bf00000400000000000000000000000000000000001000000000000000000000000000000040
% 2100000400000080000010000002000000400000101000020000004000000800000200000040
% 7f0000079692d2d2d25a5a5a4b4b4b496969692d3d2d25a7a5a4b4f4b4969e9692d2d2d25bc0
% 3000000400000000000000000000000000000000002000000000000000000000000000000040
% 0000000400000080000010000002000000400000102000020000004000000800000200000040
% 0000000400000000000000000000000000000000004000000000000000000000000000000040
% 1f00000400000000000000000000000000000000004000000000000000000000000000000040
% 3f00000400000080000010000002000000400000104000020000004000000800000200000040
% 2d00000400000000000000000000000000000000008000000000000000000000000000000040
% 3500000400000080000010000002000000400000108000020000004000000800000200000040
% 1700000400000080000010000002000000400000108000020000004000000800000200000040
% 0000000400000000000000000000000000000000010000000000000000000000000000000040
% 01000004000000800001f9f83f7e000000400000110000020000004000000800000200000040
% 3100000400000000000040180310000000000000010000000000000000000000000000000040
% 2d00000400000000000040300610000000000000020000000000000000000000000000000040
% 2700000400000080000050600c12000000400000120000020000004000000800000200000040
% 2300000400000000000040600c10000000000000020000000000000000000000000000000040
% bf000004f1f1f1e1e38050c39812000000400000140000020000004000000800000200000040
% bf00000400000080000051803012000000400000140000020000004000000800000200000040
% 00000e0400000000000041f83f10000000000000040000000000000000000000000000000040
% 21001b0400000080000010000002000000400000180000020000004000000800000200000040
% 7f001b0400000000000000000000000000000000080000000000000000000000000000000040
% 3000110400000000000000000000000000000000180000000000000000000000000000000040
% 000011079692d2d2d25a5a5a4b4b4b496969692d3d2d25a7a5a4b4f4b4969e9692d2d2d25bc0
% 1f00110400000000000000000000000000000000100000000000000000000000000000000040
% 35001b0400000000000000000000000000000000100000000000000000000000000000000040
% 25000e0400000080000010000002000000400000300000020000004000000800000200000040
% 1f00000400000000000000000000000000000000200000000000000000000000000000000040
% 0e00000400000080000010000002000000400000300000020000004000000800000200000040
% 0000000400000080000010000002000000400000500000020000004000000800000200000040
% 0000000400000000000000000000000000000000400000000000000000000000000000000040
% 1f00000400000080000010000002000000400000d00000020000004000000800000200000040
% 3000000400000000000000000000000000000000800000000000000000000000000000000040
% 2000000400000000000000000000000000000000800000000000000000000000000000000040
% 3f00000400000080000010000002000000400001100000020000004000000800000200000040
% 3f00000400000000000000000000000000000001000000000000000000000000000000000040
% 0000000400000080000010000002000000400001100000020000004000000800000200000040
% 0000000400000080000010000002000000400003100000020000004000000800000200000040
% 3fc0000400000000000000000000000000000002000000000000000000000000000000000040
% 3340000400000080000010000002000000400002100000020000004000000800000200000040
% 2140000400000000000000000000000000000004000000000000000000000000000000000040
% 3340000400000000000000000000000000000004000000000000000000000000000000000040
% 1ec0000400000080000010000002000000400004100000020000004000000800000200000040
% 0000000400000000000000000000000000000008000000000000000000000000000000000040
% 1f0000079692d2d2d25a5a5a4b4b4b496969692d3d2d25a7a5a4b4f4b4969e9692d2d2d25bc0
% 3f00000400000080000010000002000000400008100000020000004000000800000200000040
% 2d00000400000000000000000000000000000010000000000000000000000000000000000040
% 3500000400000080000010000002000000400010100000020000004000000800000200000040
% 1700000400000000000000000000000000000010000000000000000000000000000000000040
% 0000000400000000000000000000000000000020000000000000000000000000000000000040
% 0000000400000080000010000002000000400020100000020000004000000800000200000040
% 1f00000400000000000000000000000000000020000000000000000000000000000000000040
% 3000000400000000000000000000000000000040000000000000000000000000000000000040
% 3000000400000080000010000002000000400040100000020000004000000800000200000040
% 1f00000400000000000000000000000000000080000000000000000000000000000000000040
% 3f00000400000080000010000002000000400080100000020000004000000800000200000040
% 2000000400000080000010000002000000400080100000020000004000000800000200000040
% 3f00000400000000000000000000000000000180000000000000000000000000000000000040
% 3f00000400000080000010000002000000400100100000020000004000000800000200000040
% 0000000400000000000000000000000000000100000000000000000000000000000000000040
% 0000000400000000000000000000000000000200000000000000000000000000000000000040
% 0000000400000080000010000002000000400200100000020000004000000800000200000040
% 0000000400000000000000000000000000000400000000000000000000000000000000000040
% 0000000400000080000010000002000000400400100000020000004000000800000200000040
% 1f00000400000080000010000002000000400c00100000020000004000000800000200000040
% 350000079692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25bc0
% 2500000400000080000010000002000000400800100000020000004000000800000200000040
% 1f00000400000000000000000000000000001000000000000000000000000000000000000040
% 0e00000400000000000000000000000000001000000000000000000000000000000000000040
% 0000000400000080000010000002000000402000100000020000004000000800000200000040
% 0000000400000000000000000000000000002000000000000000000000000000000000000040
% 3fc0000400000080000010000002000000406000100000020000004000000800000200000040
% 3340000400000080000010000002000000406000100000020000004000000800000200000040
% 214000040000000000000000000000000000c000000000000000000000000000000000000040
% 3340000400000080000010000002000000408000100000020000004000000800000200000040
% 1ec0000400000000000000000000000000010000000000000000000000000000000000000040
% 0000000400000000000000000000000000010000000000000000000000000000000000000040
% 0000000400000080000010000002000000418000100000020000004000000800000200000040
% 1f00000400000000000000000000000000030000000000000000000000000000000000000040
% 3f00000400000000000000000000000000030000000000000000000000000000000000000040
% 2d00000400000080000010000002000000440000100000020000004000000800000200000040
% 3500000400000000000000000000000000040000000000000000000000000000000000000040
% 1700000400000080000010000002000000480000100000020000004000000800000200000040
% 00000004000000800000100000020000004c0000100000020000004000000800000200000040
% 30000004000000000000000000000000001c0000000000000000000000000000000000000040
% 3f00000400000080000010000002000000580000100000020000004000000800000200000040
% 3f0000079692d2d2d25a5a5a4b4b4b496969692d2d2d25a5a5a4b4b4b496969692d2d2d25bc0
% 0000000400000000000000000000000000400000000000000000000000000000000000000040
% 1f00000400000080000010000002000000400000100000020000004000000800000200000040
% 3500000400000000000000000000000000800000000000000000000000000000000000000040
% 2500000400000080000010000002000000e00000100000020000004000000800000200000040
% 1f00000400000080000010000002000001400000100000020000004000000800000200000040
% 0e00000400000000000000000000000002400000000000000000000000000000000000000040
% 0000000400000080000010000002000002400000100000020000004000000800000200000040
% 2000000400000000000000000000000004000000000000000000000000000000000000000040
% 1c00000400000000000000000000000008000000000000000000000000000000000000000040
% 070000040000008000001000000200000a400000100000020000004000000800000200000040
% 0f00000400000000000000000000000012000000000000000000000000000000000000000040
% 3800000400000080000010000002000024400000100000020000004000000800000200000040
% 0000000400000080000010000002000024400000100000020000004000000800000200000040
% 0000000400000000000000000000000040000000000000000000000000000000000000000040
% 1f00000400000080000010000002000040400000100000020000004000000800000200000040
% 3f00000400000000000000000000000080000000000000000000000000000000000000000040
% 2d00000400000000000000000000000120000000000000000000000000000000000000000040
% 3500000400000080000010000002000240400000100000020000004000000800000200000040
% 1700000400000000000000000000000440000000000000000000000000000000000000000040
% 0000000400000000000000000000000800000000000000000000000000000000000000000040
% 000000079692d2d2d25a5a5a4b4b4b596969692d3d2d25a7a5a4b4f4b4969e9692d2d2d25bc0
% 0000000400000000000000000000002300000000000000000000000000000000000000000040
% 0000000400000080000010000002004200400000100000020000004000000800000200000040
% 0000000400000080000010000002008400400000100000020000004000000800000200000040
% 0000000400000000000000000000010000000000000000000000000000000000000000000040
% 0000000400000080000010000002020000400000100000020000004000000800000200000040
% 0000000400000000000000000000040000000000000000000000000000000000000000000040
% 0000000400000000000000000000084000000000000000000000000000000000000000000040
% 0000000400000080000010000002308000400000100000020000004000000800000200000040
% 0000000400000000000000000000400000000000000000000000000000000000000000000040
% 0000000400000080000010000003800000400000100000020000004000000800000200000040
% 0000000400000080000010000006080000400000100000020000004000000800000200000040
% 0000000400000000000000000018100000000000000000000000000000000000000000000040
% 0000000400000080000010000022200000400000100000020000004000000800000200000040
% 00000004000000000000000001c0000000000000000000000000000000000000000000000040
% 0000000400000000000000001e06000000000000000000000000000000000000000000000040
% 000000040000008000001000e00e000000400000100000020000004000000800000200000040
% 00000204000000000000000f0000000000000000000000000000000000000000000000000040
% 0000020400000080000013f00702000000400000100000020000004000000800000200000040
% 00000604000000800007fc000c02000000400000100000020000004000000800000200000040
% 00000204000000807ff810028002000000400000100000020000004000000800000200000040
% 00000207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
% 0000e20000000000000000000000000000000000000000000000000000000000000000000000
% 0000020000000000000000000000000000000000000000000000000000000000000000000000
% 0000020000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000e1c70e000000020e1c70000000000000000000000000000000000000000000000
% 00000000001b36d9b000000021b36d8000000000000000000000000000000000000000000000
% 00000000001136d9b000000061b36d80000000003800000000021c38700000000e3870e00000
% 00000000000322891000000021122880000000006c0000000002366cd80000001b6cd9b00000
% 00000000000622891000000021122880000000006c0000000006366cd8000000116cd9b00000
% 0000000001cc22891000000e2112288000000000440000000002224488000000034489100000
% 00000000001836d9b000000021b36d8000000000440000000002224488000000064489100000
% 00000000001f1c70e000000020e1c700000000004400000000022244880000000c4489100000
% 00000000000000000000000000000000000000006c0000000002366cd8000000186cd9b00000
% 00000000000000000000000000000000000000003800000000021c38700000001f3870e00000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000018000000000000000000000
% 0000000000000000000000000000000000000000000000000000010000000000000000000000
% 000000000000000000000000010000000000008004c000000000108400000000000000000000
% 0000000000000000000000000100000004000080040020000000218200000000000000000000
% 0000000000000000000000000f1c49780fce1c903cce771e386021c200000000000000000000
% 0000000000000000000000001b3649640ddb36b06cda6d996cb0214200000000000000000000
% 00000000000000000000000011227764058720e044dc23994190626200000000000000000000
% 00000000000000000000000011223664e59f20f044c72f9941f063e200000000000000000000
% 0000000000000000000000001b363664059336906cdb29996d90662200000000000000000000
% 0000000000000000000000001f1c3664079f1c987cce3f9938f0263200000000000000000000
% 0000000000000000000000000000000000000000000000000000200200000000000000000000
% 0000000000000000000000000000000000000000000000000000000400000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 66 214 550 583 290.4 221.4 70.8 506.97 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  577   260  5888  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
c0
 898 4615 mt  898  389 L
 898  389 mt  898  389 L
1434 4615 mt 1434  389 L
1434  389 mt 1434  389 L
1970 4615 mt 1970  389 L
1970  389 mt 1970  389 L
2505 4615 mt 2505  389 L
2505  389 mt 2505  389 L
3041 4615 mt 3041  389 L
3041  389 mt 3041  389 L
3577 4615 mt 3577  389 L
3577  389 mt 3577  389 L
4113 4615 mt 4113  389 L
4113  389 mt 4113  389 L
4649 4615 mt 4649  389 L
4649  389 mt 4649  389 L
5184 4615 mt 5184  389 L
5184  389 mt 5184  389 L
5720 4615 mt 5720  389 L
5720  389 mt 5720  389 L
6256 4615 mt 6256  389 L
6256  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
6256 4615 mt 6256 4615 L
 898 4192 mt 6256 4192 L
6256 4192 mt 6256 4192 L
 898 3770 mt 6256 3770 L
6256 3770 mt 6256 3770 L
 898 3347 mt 6256 3347 L
6256 3347 mt 6256 3347 L
 898 2925 mt 6256 2925 L
6256 2925 mt 6256 2925 L
 898 2502 mt 6256 2502 L
6256 2502 mt 6256 2502 L
 898 2079 mt 6256 2079 L
6256 2079 mt 6256 2079 L
 898 1657 mt 6256 1657 L
6256 1657 mt 6256 1657 L
 898 1234 mt 6256 1234 L
6256 1234 mt 6256 1234 L
 898  812 mt 6256  812 L
6256  812 mt 6256  812 L
 898  389 mt 6256  389 L
6256  389 mt 6256  389 L
 898 4615 mt  898  389 L
 898  389 mt 6256  389 L
 898 4615 mt  898  389 L
 898  389 mt 6256  389 L
 898 4615 mt  898  389 L
 898  389 mt 6256  389 L
SO
6 w
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 654 4784 mt 
(-2500) s
1434 4615 mt 1434 4561 L
1434  389 mt 1434  443 L
1190 4784 mt 
(-2000) s
1970 4615 mt 1970 4561 L
1970  389 mt 1970  443 L
1726 4784 mt 
(-1500) s
2505 4615 mt 2505 4561 L
2505  389 mt 2505  443 L
2261 4784 mt 
(-1000) s
3041 4615 mt 3041 4561 L
3041  389 mt 3041  443 L
2837 4784 mt 
(-500) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4113 4615 mt 4113 4561 L
4113  389 mt 4113  443 L
3993 4784 mt 
(500) s
4649 4615 mt 4649 4561 L
4649  389 mt 4649  443 L
4489 4784 mt 
(1000) s
5184 4615 mt 5184 4561 L
5184  389 mt 5184  443 L
5024 4784 mt 
(1500) s
5720 4615 mt 5720 4561 L
5720  389 mt 5720  443 L
5560 4784 mt 
(2000) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6096 4784 mt 
(2500) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 699 4668 mt 
(-1) s
 898 4192 mt  952 4192 L
6256 4192 mt 6202 4192 L
 579 4245 mt 
(-0.8) s
 898 3770 mt  952 3770 L
6256 3770 mt 6202 3770 L
 579 3823 mt 
(-0.6) s
 898 3347 mt  952 3347 L
6256 3347 mt 6202 3347 L
 579 3400 mt 
(-0.4) s
 898 2925 mt  952 2925 L
6256 2925 mt 6202 2925 L
 579 2978 mt 
(-0.2) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 783 2555 mt 
(0) s
 898 2079 mt  952 2079 L
6256 2079 mt 6202 2079 L
 663 2132 mt 
(0.2) s
 898 1657 mt  952 1657 L
6256 1657 mt 6202 1657 L
 663 1710 mt 
(0.4) s
 898 1234 mt  952 1234 L
6256 1234 mt 6202 1234 L
 663 1287 mt 
(0.6) s
 898  812 mt  952  812 L
6256  812 mt 6202  812 L
 663  865 mt 
(0.8) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 783  442 mt 
(1) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
232 -14 232 -31 232 -40 232 -101 232 -205 232 -425 232 -622 232 -697 
232 -663 232 -518 232 -362 232 -244 232 -131 233 -72 232 -35 232 -21 
232 -16 232 -8 232 -3 1011 4615 20 MP stroke
DA
57 0 57 0 57 0 56 0 57 0 57 0 57 0 57 0 
56 -1 57 0 57 0 57 -1 57 -1 56 -1 57 -2 57 -2 
57 -2 57 -4 56 -5 57 -7 57 -8 57 -11 57 -13 56 -17 
57 -21 57 -24 57 -32 56 -36 57 -42 57 -53 57 -58 57 -66 
56 -80 57 -86 57 -95 57 -112 57 -115 56 -125 57 -141 57 -143 
57 -150 57 -164 56 -160 57 -164 57 -170 57 -170 57 -164 56 -161 
57 -164 57 -150 57 -142 57 -142 56 -125 57 -116 57 -111 57 -96 
57 -85 56 -80 57 -67 57 -58 57 -52 57 -43 56 -36 57 -31 
57 -25 57 -20 56 -17 57 -14 57 -10 57 -9 57 -6 56 -5 
57 -4 57 -3 57 -2 57 -2 56 -1 57 -1 57 -1 57 0 
57 0 56 0 57 -1 57 0 57 0 57 0 56 0 57 0 
57 0 57 0 1021 4615 91 MP stroke

gr 
DA
SO

end

eplot

epage
end

showpage


FMENDEPSF
0 0 0 0 1 1 1 K
65 495.89 84.44 730.33 R
7 X
V
0.5 H
2 Z
N
75 489.78 367.78 513.11 R
V
N
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
(0) 76.11 617 T
(0) 217.78 499.22 T
(-1000) 149.45 501.44 T
(1000) 260.56 499.22 T
(-2000) 96.11 501.44 T
(2000) 315.56 499.22 T
(-1) 72.78 512 T
(1) 76.11 722.55 T
J
90.33 627 129.33 627 2 L
J
90.33 627 92.08 627 2 L
N
[3.404 4.377] 3.404 I
92.08 627 127.58 627 2 L
N
J
127.58 627 129.33 627 2 L
N
J
90.33 650.5 129.33 650.5 2 L
N
(micromagnetic) 135.83 648 T
(TZ-ZT) 136.33 624 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(average magnetization) 0 -270 64.56 537.88 TF
1 F
(M\050x\051/M) 0 -270 64.56 662.6 TF
1 9.6 Q
(r) 0 -270 67.56 699.92 TF
0 12 Q
(down-track distance \050\201\051) 156.22 482.88 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 4758 a(Figure)38 b(11:)57 b(Av)m(erage)40
b(transition)e(pro\014les)i(for)f(the)-165 4878 y(isotropic)i(medium.)
71 b(Solid)41 b(line:)62 b(micromagnetic)-165 4998 y(mo)s(del.)42
b(Dotted)32 b(line:)42 b(TZ-ZT)32 b(mo)s(del.)2040 1718
y @beginspecial 46 @llx 519 @lly 375 @urx 762 @ury 1984
@rwi @setspecial
% 000001c071c1800000000000000000000000000000000000000000000000000000000000000000000000
% 00000360db62c00000000000000000000000000000000000000000000000000000000000000000000000
% 00000360db66000000000000000000000000000000000000000000000000000000000000000000000000
% 000002208a27800000000000000000000000000000000000000000000000000000000000000000000000
% 000002208a26c3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe000
% 000002208a24420000000000100000000001000000000008000000000040000000000400000000002000
% 00000360db66c20000000000100000000001000000000008000000000040000000000400000000002000
% 000001c471c3820000000000100000000001000000000008000000000040000000000400000000002000
% 000000000000020000000000000000000000000000000000000000000000000000000000000000002000
% 000000000000020000000000000000000000000000000000000000000000000000000000000000002000
% 000000000000020000000000000000000000000000000000000000000000000000000000000000002000
% 000000000000020000000000000000000000000000000000000000000000000000000000000000002000
% 000000000000020000000000000000000000000000000000000000000000000000000000000000002000
% 00000000000002000000000000c00000000000000c000000000000000000000000000000000000002000
% 000000000000020000000000000000000000000040000000000000000000000000000000000000002000
% 000000000000020000000003d8ce738f61c79e0cedc00000000000000000000000000000000000002000
% 0000000000000200000000036cdb76cdb36d9916cf600000000000000000000000000000000000002000
% 00000000000002000000000364d0644d90e899324e000000300000000000000000000000000000002000
% 0000000000000207ffffff8364d0644d93e8993e4e000000300000000000000000000000000000002000
% 00000000000002000000000364db66cd926d99324f600000500000000000000000000000000000002000
% 00000000000002000000000364ce638d93e7991e6dc00000880000000000000000000000000000002000
% 000000000000020000000000000000000008800000000000880000000000000000000000000000002000
% 00000000000002000000000000000000000f800000000001040000000000000000000000000000002000
% 000000000000020000000000000000000000000000000001040000000000000000000000000000002000
% 000000000000020000000000000000000000000000000002020000000000000000000000000000002000
% 000000000000020000000000000000000000000000000004020000000000000000000000000000002000
% 000000000000020000000000000000000000000000000004020000000000000000000000000000002000
% 000000000000020000000000000000000000000000000008010000000000000000000000000000002000
% 000000000000020000000000000000000000000000000008010000000000000000000000000000002000
% 000000000000020000000000000000000000000000000010008000000000000000000000000000002000
% 000000000000020000000000000000000000000000000010008000000000000000000000000000002000
% 000000000000020000000000000000000000000000000020004000000000000000000000000000002000
% 000000000000020000000000000000000000000000000040004000000000000000000000000000002000
% 000000000000020000000000000000000000000000000040004000000000000000000000000000002000
% 000000000000020000000000000000000000000000000088002000000000000000000000000000002000
% 000001c071c3c200000000000000000000000000000000b0002000000000000000000000000000002000
% 00000360db62020000000000000000000000000000000100001000000000000000000000000000002000
% 00000360db66020000000001fbf07e7e0000000000000201001000000000000000000000000000002000
% 000002208a27820000000000403006100000000000000e00800800000000000000000000000000002000
% 000002208a26c3c00000000040600c10000000000000140080080000000000000000000000000001e000
% 000002208a2042000000000040c018100000000000000400000800000000000000000000000000002000
% 00000360db66c2000000000040c018100000000000000800000400000000000000000000000000002000
% 000001c471c782078f87c780418730100000000000004800000400000000000000000000000000002000
% 000000000000020000000000430060100000000000009000100200000000000000000000000000002000
% 00000000000002000000000043f07e10000000000000a000080200000000000000000000000000002000
% 000000000000020000000000000000000000000000002000080100000000000000000000000000002000
% 000000000000020000000000000000000000000000004000000100000000000000000000000000002000
% 000000000000020000000000000000000000000000004000000100000000000000000000000000002000
% 000000000000020000000000000000000000000000008000000080000000000000000000000000002000
% 000000000000020000000000000000000000000000030000010080000000000000000000000000002000
% 000000000000020000000000000000000000000000030000010040000000000000000000000000002000
% 000000000000020000000000000000000000000000060000008040000000000000000000000000002000
% 000000000000020000000000000000000000000000020000008040000000000000000000000000002000
% 000000000000020000000000000000000000000000040000000020000000000000000000000000002000
% 000000000000020000000000000000000000000000080000000020000000000000000000000000002000
% 000000000000020000000000000000000000000000080000002020000000000000000000000000002000
% 000000000000020000000000000000000000000000100000001010000000000000000000000000002000
% 000000000000020000000000000000000000000000100000001010000000000000000000000000002000
% 000000000000020000000000000000000000000000300000000810000000000000000000000000002000
% 000000000000020000000000000000000000000000200000000008000000000000000000000000002000
% 000000000000020000000000000000000000000000400000000008000000000000000000000000002000
% 000000000000020000000000000000000000000000800000000008000000000000000000000000002000
% 000000000000020000000000000000000000000000c00000000204000000000000000000000000002000
% 000000000000020000000000000000000000000001400000000204000000000000000000000000002000
% 000000000000020000000000000000000000000001800000000104000000000000000000000000002000
% 000000000000020000000000000000000000000002000000000004000000000000000000000000002000
% 1fe000000000020000000000000000000000000004000000000002000000000000000000000000002000
% 201000000000020000000000000000000000000004000000000002000000000000000000000000002000
% 000000000000020000000000000000000000000008000000000042000000000000000000000000002000
% 004000000000020000000000000000000000000009000000000041000000000000000000000000002000
% 03c001c071c0820000000000000000000000000012000000000021000000000000000000000000002000
% 0f000360db61820000000000000000000000000012000000000001000000000000000000000000002000
% b9000360db61820000000000000000000000000010000000000001000000000000000000000000002000
% dd0002208a22820000000000000000000000000020000000000000800000000000000000000000002000
% 03c002208a26820000000000000000000000000020000000000000800000000000000000000000002000
% 00c002208a27c3c00000000000000000000000002000000000000880000000000000000000000001e000
% 30000360db67c20000000000000000000000000048000000000008400000000000000000000000002000
% 0f0001c471c0820000000000000000000000000048000000000004400000000000000000000000002000
% 01c000000000020000000000000000000000000048000000000000400000000000000000000000002000
% 000000000000020000000000000000000000000080000000000000200000000000000000000000002000
% 000000000000020000000000000000000000000080000000000000200000000000000000000000002000
% 000000000000020000000000000000000000000080000000000002200000000000000000000000002000
% 000000000000020000000000000000000000000100000000000002200000000000000000000000002000
% 3fc000000000020000000000000000000000000120000000000001100000000000000000000000002000
% 080000000000020000000000000000000000000120000000000001100000000000000000000000002000
% 000000000000020000000000000000000000000140000000000000100000000000000000000000002000
% 000000000000020000000000000000000000000200000000000000080000000000000000000000002000
% 200000000000020000000000000000000000000200000000000000080000000000000000000000002000
% 1fe000000000020000000000000000000000000200000000000000480000000000000000000000002000
% 038000000000020000000000000000000000000480000000000000480000000000000000000000002000
% 000000000000020000000000000000000000000480000000000000440000000000000000000000002000
% 000000000000020000000000000000000000000480000000000000240000000000000000000000002000
% 000000000000020000000000000000000000000900000000000000040000000000000000000000002000
% 000000000000020000000000000000000000000800000000000000020000000000000000000000002000
% 080000000000020000000000000000000000000800000000000000020000000000000000000000002000
% 0f0000000000020000000000000000000000001000000000000000120000000000000000000000002000
% 01e000000000020000000000000000000000001200000000000000110000000000000000000000002000
% 07f000000000020000000000000000000000001200000000000000090000000000000000000000002000
% 0c1000000000020000000000000000000000002400000000000000010000000000000000000000002000
% 084000000000020000000000000000000000002400000000000000010000000000000000000000002000
% 1fc000000000020000000000000000000000002000000000000000008000000000000000000000002000
% 0c0000000000020000000000000000000000004000000000000000008000000000000000000000002000
% 000000000000020000000000000000000000004000000000000000048000000000000000000000002000
% 2fc000000000020000000000000000000000004800000000000000024000000000000000000000002000
% 2fc000000000020000000000000000000000009000000000000000024000000000000000000000002000
% 000001c071c3820000000000000000000000009000000000000000024000000000000000000000002000
% 01800360db66c20000000000000000000000009000000000000000004000000000000000000000002000
% 0dc00360db66c20000000000000000000000008000000000000000002000000000000000000000002000
% 0b4002208a21c20000000000000000000000010000000000000000002000000000000000000000002000
% 0ec002208a21c2000000000000000000000001000000000000000000a000000000000000000000002000
% 068002208a2443c00000000000000000000001400000000000000000a00000000000000000000001e000
% 00000360db66c20000000000000000000000024000000000000000009000000000000000000000002000
% 000001c471c3820000000000000000000000024000000000000000001000000000000000000000002000
% 07c000000000020000000000000000000000020000000000000000001000000000000000000000002000
% 0c0000000000020000000000000000000000040000000000000000001000000000000000000000002000
% 080000000000020000000000000000000000040000000000000000002800000000000000000000002000
% 0fc000000000020000000000000000000000040000000000000000002800000000000000000000002000
% 0fc000000000020000000000000000000000090000000000000000002800000000000000000000002000
% 000000000000020000000000000000000000090000000000000000001800000000000000000000002000
% 07c0000000000200000000000000000000000a0000000000000000000400000000000000000000002000
% 0d4000000000020000000000000000000000100000000000000000000400000000000000000000002000
% 094000000000020000000000000000000000100000000000000000000400000000000000000000002000
% 07c000000000020000000000000000000000100000000000000000000c00000000000000000000002000
% 038000000000020000000000000000000000200000000000000000000a00000000000000000000002000
% 000000000000020000000000000000000000240000000000000000000a00000000000000000000002000
% 000000000000020000000000000000000000480000000000000000000600000000000000000000002000
% 3fc000000000020000000000000000000000480000000000000000000200000000000000000000002000
% 0cc000000000020000000000000000000000400000000000000000000200000000000000000000002000
% 084000000000020000000000000000000000800000000000000000000100000000000000000000002000
% 0cc000000000020000000000000000000000800000000000000000000300000000000000000000002000
% 07c000000000020000000000000000000000900000000000000000000300000000000000000000002000
% 000000000000020000000000000000000001200000000000000000000100000000000000000000002000
% 000000000000020000000000000000000001200000000000000000000180000000000000000000002000
% 000000000000020000000000000000000001200000000000000000000080000000000000000000002000
% 000000000000020000000000000000000002000000000000000000000080000000000000000000002000
% 0c0000000000020000000000000000000002000000000000000000000080000000000000000000002000
% 0fc0000000000200000000000000000000040000000000000000000000c0000000000000000000002000
% 0fc000000000020000000000000000000004800000000000000000000040000000000000000000002000
% 000000000000020000000000000000000004800000000000000000000040000000000000000000002000
% 000000000000020000000000000000000009000000000000000000000040000000000000000000002000
% 07c000000000020000000000000000000009000000000000000000000020000000000000000000002000
% 0d4001c071c3820000000000000000000008000000000000000000000020000000000000000000002000
% 09400360db66c20000000000000000000010000000000000000000000020000000000000000000002000
% 07c00360db64420000000000000000000010000000000000000000000030000000000000000000002000
% 038002208a20c20000000000000000000014000000000000000000000010000000000000000000002000
% 084002208a2183c00000000000000000002400000000000000000000001800000000000000000001e000
% 1fc002208a23020000000000000000000028000000000000000000000010000000000000000000002000
% 0c000360db66020000000000000000000040000000000000000000000010000000000000000000002000
% 000001c471c7c20000000000000000000040000000000000000000000010000000000000000000002000
% 084000000000020000000000000000000040000000000000000000000008000000000000000000002000
% 1fc00000000002000000000000000000009000000000000000000000000a000000000000000000002000
% 0c00000000000200000000000000000000a000000000000000000000000a000000000000000000002000
% 2fc0000000000200000000000000000000a000000000000000000000000a000000000000000000002000
% 2fc000000000020000000000000000000140000000000000000000000004000000000000000000002000
% 000000000000020000000000000000000100000000000000000000000004000000000000000000002000
% 2ff000000000020000000000000000000100000000000000000000000004000000000000000000002000
% 2ff000000000020000000000000000000200000000000000000000000004800000000000000000002000
% 001000000000020000000000000000000280000000000000000000000002800000000000000000002000
% 000000000000020000000000000000000500000000000000000000000002400000000000000000002000
% 000000000000020000000000000000000500000000000000000000000002400000000000000000002000
% 000000000000020000000000000000000400000000000000000000000002000000000000000000002000
% 000000000000020000000000000000000800000000000000000000000001000000000000000000002000
% 000000000000020000000000000000000800000000000000000000000001000000000000000000002000
% 000000000000020000000000000000000800000000000000000000000001100000000000000000002000
% 000000000000020000000000000000001800000000000000000000000001100000000000000000002000
% 000000000000020000000000000000001800000000000000000000000000880000000000000000002000
% 000000000000020000000000000000001000000000000000000000000000800000000000000000002000
% 000000000000020000000000000000002000000000000000000000000000800000000000000000002000
% 000000000000020000000000000000002000000000000000000000000000800000000000000000002000
% 000000000000020000000000000000002000000000000000000000000000420000000000000000002000
% 000000000000020000000000000000004000000000000000000000000000420000000000000000002000
% 000000000000020000000000000000004000000000000000000000000000410000000000000000002000
% 000000000000020000000000000000004000000000000000000000000000410000000000000000002000
% 000000000000020000000000000000008000000000000000000000000000200000000000000000002000
% 000000000000020000000000000000008000000000000000000000000000200000000000000000002000
% 000000000000020000000000000000008000000000000000000000000000100000000000000000002000
% 000001c071c1020000000000000000010000000000000000000000000000104000000000000000002000
% 00000360db61020000000000000000030000000000000000000000000000082000000000000000002000
% 00000360db63020000000000000000020000000000000000000000000000082000000000000000002000
% 000002208a21020000000000000000060000000000000000000000000000040000000000000000002000
% 000002208a2103c00000000000000002000000000000000000000000000004000000000000000001e000
% 000002208a21020000000000000000040000000000000000000000000000020000000000000000002000
% 00000360db61020000000000000000040000000000000000000000000000020800000000000000002000
% 000001c471c1020000000000000000140000000000000000000000000000020400000000000000002000
% 000000000000020000000000000000180000000000000000000000000000010400000000000000002000
% 000000000000020000000000000000280000000000000000000000000000010000000000000000002000
% 000000000000020000000000000000080000000000000000000000000000008000000000000000002000
% 000000000000020000000000000000100000000000000000000000000000008000000000000000002000
% 000000000000020000000000000000100000000000000000000000000000004080000000000000002000
% 000000000000020000000000000001100000000000000000000000000000004040000000000000002000
% 000000000000020000000000000002200000000000000000000000000000002020000000000000002000
% 000000000000020000000000000000200000000000000000000000000000002000000000000000002000
% 000000000000020000000000000000200000000000000000000000000000002000000000000000002000
% 000000000000020000000000000000400000000000000000000000000000001000000000000000002000
% 000000000000020000000000000020400000000000000000000000000000001004000000000000002000
% 000000000000020000000000000040400000000000000000000000000000000802000000000000002000
% 000000000000020000000000000080800000000000000000000000000000000801000000000000002000
% 000000000000020000000000000000800000000000000000000000000000000400000000000000002000
% 000000000000020000000000000000800000000000000000000000000000000400000000000000002000
% 000000000000020000000000000401000000000000000000000000000000000200400000000000002000
% 000000000000020000000000000801000000000000000000000000000000000200200000000000002000
% 000000000000020000000000001002000000000000000000000000000000000100100000000000002000
% 000000000000020000000000000002000000000000000000000000000000000100000000000000002000
% 000000000000020000000000000002000000000000000000000000000000000100000000000000002000
% 00000000000002000000000001000400000000000000000000000000000000008000c000000000002000
% 0000000000000200000000000200040000000000000000000000000000000000c0002000000000002000
% 000000000000020000000000000018000000000000000000000000000000000038000000000000002000
% 000000000000020000000000000060000000000000000000000000000000000007800200000000002000
% 000000000000020000000000e00180000000000000000000000000000000000000780180000000002000
% 000000000000020000000001000600000000000000000000000000000000000000078000000000002000
% 00000000000002000000000000080000000000000000000000000000000000000000600c000000002000
% 0000000000000200000000f0003000000000000000000000000000000000000000001c02000000002000
% 00000000000002000000180000c0000000000000000000000000000000000000000003001c0000002000
% 0000000000000200000460001700000000010000000000080000000000400000000004e0023000002000
% 00000000000002000e380003f8000000000100000000000800000000004000000000041c000c78002000
% 00000000000003ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000038e1c0000003871c0000000870e00000000380000000083870000000e387000000071c380
% 000000000006db360000006cdb600000008d9b000000006c0000000086cd8000001b6cd8000000db66c0
% 000000000006db3600000044db600000018d9b000000006c0000000186cd800000116cd8000000db66c0
% 000000000001d1220000000c8a20000000889100000000440000000084488000000344880000003a2440
% 000000000001d122000000188a20000000889100000000440000000084488000000644880000003a2440
% 0000000000745122000007308a20000038889100000000440000000084488000000c44880000008a2440
% 000000000006db3600000060db600000008d9b000000006c0000000086cd800000186cd8000000db66c0
% 0000000000038e1c0000007c71c0000000870e00000000380000000083870000001f387000000071c380
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000001800000000000000000000000000000
% 000000000000000000000000000000000000000000000000000001000000000000000000000000000000
% 00000000000000000000000000000000000001b000000003000010840000000000000000000000000000
% 000000000000000000000000000000000000000240000003000021820000000000000000000000000000
% 00000000000000000000000000000000000001b7e63844e3646021c20000000000000000000000000000
% 00000000000000000000000000000000000001b6cb3849b364b021420000000000000000000000000000
% 00000000000000000000000000000000000001b259306873659062620000000000000000000000000000
% 00000000000000000000000000000000000001b25f3039f365f063e20000000000000000000000000000
% 00000000000000000000000000000000000001b2593031336d9066220000000000000000000000000000
% 00000000000000000000000000000000000001b36f3031f33cf026320000000000000000000000000000
% 000000000000000000000000000000000000018000000000000020020000000000000000000000000000
% 000000000000000000000000000000000000038000000000000000040000000000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 1 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 76 214 547 597 282.6 229.8 90.59 537.99 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  692   109  5733  4708 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 694 4784 mt 
(-300) s
1791 4615 mt 1791 4561 L
1791  389 mt 1791  443 L
1587 4784 mt 
(-200) s
2684 4615 mt 2684 4561 L
2684  389 mt 2684  443 L
2480 4784 mt 
(-100) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4470 4615 mt 4470 4561 L
4470  389 mt 4470  443 L
4350 4784 mt 
(100) s
5363 4615 mt 5363 4561 L
5363  389 mt 5363  443 L
5243 4784 mt 
(200) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6136 4784 mt 
(300) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 3911 mt  952 3911 L
6256 3911 mt 6202 3911 L
 783 3964 mt 
(1) s
 898 3206 mt  952 3206 L
6256 3206 mt 6202 3206 L
 783 3259 mt 
(2) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 783 2555 mt 
(3) s
 898 1798 mt  952 1798 L
6256 1798 mt 6202 1798 L
 783 1851 mt 
(4) s
 898 1093 mt  952 1093 L
6256 1093 mt 6202 1093 L
 783 1146 mt 
(5) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 783  442 mt 
(6) s
/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

 898  335 mt 
(x 10) s
/Helvetica /ISOLatin1Encoding 96 FMSR

1170  246 mt 
(-3) s
/Helvetica /ISOLatin1Encoding 144 FMSR

 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
221 4 220 -1 221 13 220 24 221 33 220 101 221 134 220 261 
221 424 220 551 221 699 220 624 221 425 220 343 221 -111 220 -575 
221 -696 221 -665 220 -500 221 -465 220 -249 221 -194 220 -95 221 -43 
220 -24 221 -11 220 -3 221 -5 220 1 284 4614 30 MP stroke
SO
310 122 310 81 310 690 310 1299 310 1055 310 731 310 -528 309 -528 
310 -974 310 -852 310 -893 310 -162 310 -41 1534 4615 14 MP stroke

gr 

end

eplot

epage
end

showpage


FMENDEPSF
J
107.78 720.33 133.78 720.33 2 L
J
107.78 720.33 109.53 720.33 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
[3.841 4.939] 3.841 I
109.53 720.33 132.03 720.33 2 L
N
J
132.03 720.33 133.78 720.33 2 L
N
J
107.78 743.83 133.78 743.83 2 L
N
0 12 Q
(micromagnetic) 140.28 741.33 T
(TZ-ZT) 140.78 717.33 T
(jitter density \0501/\201\051) 0 -270 56.44 604.88 TF
0 0 0 0 1 1 1 K
95.56 759.78 121.67 770.89 R
7 X
0 0 0 0 1 1 1 K
V
N
75.56 525.33 97.22 774.22 R
V
N
93.33 522.55 376.67 544.22 R
V
N
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(0) 231.11 534.22 T
(100) 268.33 534.22 T
(200) 312.78 534.22 T
(300) 357.78 534.22 T
(-100) 175.56 534.22 T
(-200) 131.11 534.22 T
(-300) 86.67 534.22 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.001) 67.78 578.11 T
(0.002) 67.78 612.55 T
(0.003) 67.78 648.67 T
(0.004) 67.78 684.22 T
(0.005) 67.78 718.67 T
(0.006) 67.78 754.22 T
(jitter value \050\201\051) 197.33 519.54 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 1884 2030 a(Figure)38 b(12:)55 b(Normalized)37
b(jitter)h(histograms)f(\(em-)1884 2150 y(pirical)j(p)s(dfs\))j(for)g
(the)g(isotropic)e(medium.)73 b(Solid)1884 2270 y(line:)53
b(micromagnetic)34 b(mo)s(del.)58 b(Dotted)37 b(line:)53
b(TZ-)1884 2391 y(ZT)33 b(mo)s(del.)2040 4277 y @beginspecial
53 @llx 516 @lly 367 @urx 762 @ury 1984 @rwi @setspecial
% 00000e3c70e000000000000000000000000000000000000000000000000000000000000000000000
% 00001b20d9b000000000000000000000000000000000000000000000000000000000000000000000
% 00001160d9b000000000000000000000000000000000000000000000000000000000000000000000
% 00000378891000000000000000000000000000000000000000000000000000000000000000000000
% 0000066c8913ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
% 00000c04891200000000000000004000000000000000080000000000000001000000000000000020
% 0000186cd9b200000000000000004000000000000000080000000000000001000000000000000020
% 00001f7870e200000000000000004000000000000000080000000000000001000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000030000000000000030020
% 00000000000200000000000000000000000000000000000000000000000000000000000000100020
% 0000000000020000000000000000000000000000000000000000000000f6339ce3d871e7833b7020
% 0000000000020000000000000000000000000000000000000000000000db36ddb36cdb6645b3d820
% 0000000000020000000000000000000000000000000000000000000000d9341913643a264c938020
% 00000000000200000000000000000000000000000000000001ffffffe0d934191364fa264f938020
% 0000000000020000000000000000000000000000000000000000000000d936d9b3649b664c93d820
% 0000000000020000000000000000000000000000000000000000000000d93398e364f9e6479b7020
% 00000000000200000000000000000000000000000000000000000000000000000000022000000020
% 0000000000020000000000000000000000000000000000000000000000000000000003e000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 1fe00000000200000000000000000000000000000000000000000000000000000000000000000020
% 20100000000200000000000000000000000000000000000000000000000000000000000000000020
% 00800000000200000000000000000000000000000000000000000000000000000000000000000020
% 00c00000000200000000000000000000000000000000000000000000000000000000000000000020
% 00f80000000200000000000000000000000000000000080000000000000000000000000000000020
% 00000000000200000000000000000000000000000000380000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000000000000000000000000000000000020
% 3fc0000000020000000000000000000000000000001c000000000000000000000000000000000020
% 3fc00000000200000000000000000000000000000000000000000000000000000000000000000020
% 1f000000000200000000000000000000000000000000020000000000000000000000000000000020
% 03c00000000200000000000000000000000000000000020000000000007efc1f9f80000000000020
% 03c0000000020000000000000000000000000000004001000000000000100c018400000000000020
% 1e000000000200000000000000000000000000000040000000000000001018030400000000000020
% 3fc00000000200000000000000000000000000000080000000000000001030060400000000000020
% 00000e3870e200000000000000000000000000000000000000000000001030060400000000000020
% 00001b6cd9b200000000000000000000000000000000004001e3e1f1e01061cc0400000000000020
% 3000116cd9b2000000000000000000000000000000000040000000000010c0180400000000000020
% 0f0003448913c00000000000000000000000000000000040000000000010fc1f84000000000000e0
% 01c00644891200000000000000000000000000000100002000000000000000000000000000000020
% 00000c44891200000000000000000000000000000100000000000000000000000000000000000020
% 0040186cd9b200000000000000000000000000000200000000000000000000000000000000000020
% 03c01f3870e200000000000000000000000000000000000000000000000000000000000000000020
% 0f000000000200000000000000000000000000000000000800000000000000000000000000000020
% b9000000000200000000000000000000000000000000000800000000000000000000000000000020
% dd000000000200000000000000000000000000000000000800000000000000000000000000000020
% 03c00000000200000000000000000000000000000400000000000000000000000000000000000020
% 00c00000000200000000000000000000000000000400000000000000000000000000000000000020
% 00000000000200000000000000000000000000000800000000000000000000000000000000000020
% 20000000000200000000000000000000000000000000000000000000000000000000000000000020
% 1fe00000000200000000000000000000000000000000000200000000000000000000000000000020
% 03800000000200000000000000000000000000000000000100000000000000000000000000000020
% 00000000000200000000000000000000000000000000000100000000000000000000000000000020
% 00000000000200000000000000000000000000001000000000000000000000000000000000000020
% 00000000000200000000000000000000000000001000000000000000000000000000000000000020
% 00000000000200000000000000000000000000002000000000000000000000000000000000000020
% 08000000000200000000000000000000000000000000000000000000000000000000000000000020
% 0f000000000200000000000000000000000000000000000080000000000000000000000000000020
% 01e00000000200000000000000000000000000000000000080000000000000000000000000000020
% 07f00000000200000000000000000000000000000000000040000000000000000000000000000020
% 0c100000000200000000000000000000000000004000000000000000000000000000000000000020
% 08400000000200000000000000000000000000004000000000000000000000000000000000000020
% 1fc00000000200000000000000000000000000008000000000000000000000000000000000000020
% 0c000000000200000000000000000000000000000000000000000000000000000000000000000020
% 00000000000200000000000000000000000000000000000020000000000000000000000000000020
% 2fc00000000200000000000000000000000000000000000020000000000000000000000000000020
% 2fc00000000200000000000000000000000000010000000010000000000000000000000000000020
% 00000000000200000000000000000000000000010000000000000000000000000000000000000020
% 01800000000200000000000000000000000000010000000000000000000000000000000000000020
% 0dc00000000200000000000000000000000000010000000000000000000000000000000000000020
% 0b400000000200000000000000000000000000010000000000000000000000000000000000000020
% 0ec00000000200000000000000000000000000000000000008000000000000000000000000000020
% 06800000000200000000000000000000000000000000000008000000000000000000000000000020
% 00000000000200000000000000000000000000000000000008000000000000000000000000000020
% 00000000000200000000000000000000000000020000000000000000000000000000000000000020
% 07c00000000200000000000000000000000000040000000000000000000000000000000000000020
% 0c00043c70e200000000000000000000000000040000000000000000000000000000000000000020
% 08000420d9b200000000000000000000000000000000000002000000000000000000000000000020
% 0fc00c60d9b200000000000000000000000000000000000002000000000000000000000000000020
% 0fc00478891200000000000000000000000000000000000002000000000000000000000000000020
% 0000046c8913c00000000000000000000000000800000000020000000000000000000000000000e0
% 07c00404891200000000000000000000000000080000000002000000000000000000000000000020
% 0d40046cd9b200000000000000000000000000080000000000000000000000000000000000000020
% 0940047870e200000000000000000000000000080000000000000000000000000000000000000020
% 07c00000000200000000000000000000000000080000000000000000000000000000000000000020
% 03800000000200000000000000000000000000000000000000800000000000000000000000000020
% 00000000000200000000000000000000000000000000000000800000000000000000000000000020
% 00000000000200000000000000000000000000000000000000800000000000000000000000000020
% 3fc00000000200000000000000000000000000100000000000000000000000000000000000000020
% 0cc00000000200000000000000000000000000100000000000000000000000000000000000000020
% 08400000000200000000000000000000000000200000000000000000000000000000000000000020
% 0cc00000000200000000000000000000000000000000000000400000000000000000000000000020
% 07c00000000200000000000000000000000000000000000000400000000000000000000000000020
% 00000000000200000000000000000000000000000000000000200000000000000000000000000020
% 00000000000200000000000000000000000000400000000000200000000000000000000000000020
% 00000000000200000000000000000000000000400000000000000000000000000000000000000020
% 00000000000200000000000000000000000000400000000000000000000000000000000000000020
% 00000000000200000000000000000000000000400000000000000000000000000000000000000020
% 07c00000000200000000000000000000000000400000000000100000000000000000000000000020
% 0d400000000200000000000000000000000000000000000000100000000000000000000000000020
% 09400000000200000000000000000000000000000000000000100000000000000000000000000020
% 07c00000000200000000000000000000000000000000000000080000000000000000000000000020
% 03800000000200000000000000000000000000800000000080000000000000000000000000000020
% 00000000000200000000000000000000000000800000000140000000000000000000000000000020
% 00000000000200000000000000000000000001000000000220000000000000000000000000000020
% 07c00000000200000000000000000000000000000000000c10080000000000000000000000000020
% 0c400000000200000000000000000000000000000000001008040000000000000000000000000020
% 08400000000200000000000000000000000000000000002006040000000000000000000000000020
% 0ff00000000200000000000000000000000000000000004001040000000000000000000000000020
% 0ff00000000200000000000000000000000002000000018000800000000000000000000000000020
% 00000000000200000000000000000000000002000000020000400000000000000000000000000020
% 07800000000200000000000000000000000002000000040000200000000000000000000000000020
% 0cc00000000200000000000000000000000002000000180000120000000000000000000000000020
% 084000000002000000000000000000000000000000002000000e0000000000000000000000000020
% 0cc00000000200000000000000000000000000000000400000030000000000000000000000000020
% 07800000000200000000000000000000000000000000800000010000000000000000000000000020
% 00000000000200000000000000000000000004000003000000008000000000000000000000000020
% 3fc00000000200000000000000000000000004000004000000004000000000000000000000000020
% 3fc0043870e200000000000000000000000008000008000000003000000000000000000000000020
% 0000046cd9b200000000000000000000000000000010000000008800000000000000000000000020
% 01800c6cd9b200000000000000000000000000000020000000008400000000000000000000000020
% 0dc00444891200000000000000000000000000000040000000008200000000000000000000000020
% 0b400444891200000000000000000000000000000180000000004100000000000000000000000020
% 0ec004448913c00000000000000000000000100002000000000000800000000000000000000000e0
% 0680046cd9b200000000000000000000000010000400000000000040000000000000000000000020
% 0000043870e200000000000000000000000010000800000000000020000000000000000000000020
% 00000000000200000000000000000000000000001000000000002018000000000000000000000020
% 00000000000200000000000000000000000000002000000000002004000000000000000000000020
% 00000000000200000000000000000000000000004000000000002002000000000000000000000020
% 00000000000200000000000000000000000000008000000000002001000000000000000000000020
% 07c00000000200000000000000000000000020010000000000000000800000000000000000000020
% 0c000000000200000000000000000000000040060000000000000000400000000000000000000020
% 08000000000200000000000000000000000040080000000000000000200000000000000000000020
% 0fc00000000200000000000000000000000000100000000000000800100000000000000000000020
% 0fc00000000200000000000000000000000000200000000000000800080000000000000000000020
% 00000000000200000000000000000000000000000000000000000800060000000000000000000020
% 00000000000200000000000000000000000000800000000000000800000000000000000000000020
% 07800000000200000000000000000000000080800000000000000000010000000000000000000020
% 0cc00000000200000000000000000000000081000000000000000000008000000000000000000020
% 08400000000200000000000000000000000101000000000000000000004000000000000000000020
% 0cc00000000200000000000000000000000102000000000000000200004000000000000000000020
% 07800000000200000000000000000000000002000000000000000200002000000000000000000020
% 2fc00000000200000000000000000000000004000000000000000200002000000000000000000020
% 2fc00000000200000000000000000000000004000000000000000200001000000000000000000020
% 00000000000200000000000000000000000208000000000000000000000800000000000000000020
% 08400000000200000000000000000000000210000000000000000000000800000000000000000020
% 1fc00000000200000000000000000000000210000000000000000000000400000000000000000020
% 0c000000000200000000000000000000000420000000000000000080000400000000000000000020
% 2fc00000000200000000000000000000000020000000000000000080000200000000000000000020
% 2fc00000000200000000000000000000000040000000000000000080000100000000000000000020
% 00000000000200000000000000000000000040000000000000000040000100000000000000000020
% 01800000000200000000000000000000000480000000000000000000000080000000000000000020
% 0dc00000000200000000000000000000000880000000000000000000000040000000000000000020
% 0b400000000200000000000000000000000900000000000000000000000040000000000000000020
% 0ec00000000200000000000000000000000a00000000000000000020000020000000000000000020
% 06800000000200000000000000000000000200000000000000000020000020000000000000000020
% 00000000000200000000000000000000000400000000000000000020000010000000000000000020
% 00000000000200000000000000000000000400000000000000000010000008000000000000000020
% 07c00000000200000000000000000000002800000000000000000000000008000000000000000020
% 0c000000000200000000000000000000002800000000000000000000000004000000000000000020
% 08000000000200000000000000000000003000000000000000000000000002000000000000000020
% 0fc0003c70e200000000000000000000001000000000000000000008000002000000000000000020
% 0fc00020d9b200000000000000000000002000000000000000000008000001000000000000000020
% 00000060d9b200000000000000000000004000000000000000000008000001000000000000000020
% 00000078891200000000000000000000004000000000000000000000000000800000000000000020
% 07c0006c8913c00000000000000000000080000000000000000000000000004000000000000000e0
% 0fc00004891200000000000000000000008000000000000000000000000000400000000000000020
% 0b40006cd9b200000000000000000000010000000000000000000000000000200000000000000020
% 0d40007870e200000000000000000000010000000000000000000001000000180000000000000020
% 05c00000000200000000000000000000020000000000000000000001000000070000000000000020
% 0000000000020000000000000000000004000000000000000000000080000000e000000000000020
% 0c000000000200000000000000000000080000000000000000000000000000001800000000000020
% 0fc00000000200000000000000000000120000000000000000000000000000000700000000000020
% 0fc000000002000000000000000000006400000000000000000000000000000000e0000000000020
% 0840000000020000000000000000000084000000000000000000000040000000001c000000000020
% 1fc00000000200000000000000000003000000000000000000000000200000000002000000000020
% 0c000000000200000000000000000004000000000000000000000000200000000001000000000020
% 00000000000200000000000000000008000000000000000000000000100000000000800000000020
% 00000000000200000000000000000030080000000000000000000000000000000000400000000020
% 00000000000200000000000000000040100000000000000000000000000000000000200000000020
% 00000000000200000000000000000180100000000000000000000000000000000000100000000020
% 00000000000200000000000000000200100000000000000000000000080000000000080000000020
% 00000000000200000000000000000400000000000000000000000000040000000000040000000020
% 00000000000200000000000000001800000000000000000000000000040000000000040000000020
% 00000000000200000000000000002000000000000000000000000000000000000000020000000020
% 00000000000200000000000000004000400000000000000000000000000000000000010000000020
% 00000000000200000000000000008000800000000000000000000000000000000000008000000020
% 00000000000200000000000000030000800000000000000000000000008000000000004000000020
% 00000000000200000000000000040000000000000000000000000000004000000000002000000020
% 00000000000200000000000000080000000000000000000000000000002000000000001000000020
% 00000000000200000000000000100000000000000000000000000000000000000000000800000020
% 00000000000200000000000000200004000000000000000000000000000000000000000400000020
% 00000000000200000000000000c00004000000000000000000000000000000000000000200000020
% 00000000000200000000000001000008000000000000000000000000000400000000000100000020
% 00000000000200000000000002000000000000000000000000000000000200000000000080000020
% 00000000000200000000000004000000000000000000000000000000000000000000000040000020
% 00000000000200000000000008000000000000000000000000000000000000000000000020000020
% 00000000000200000000000030000020000000000000000000000000000000000000000018000020
% 00000000000200000000000040000040000000000000000000000000000020000000000006000020
% 00000000000200000000000080000080000000000000000000000000000018000000000001000020
% 00000000000200000000000700000000000000000000000000000000000000000000000000c00020
% 0000000000020000000007f800000000000000000000000000000000000000000000000000300020
% 0000000000020000000ff80000001800000000000000000000000000000000800000000000080020
% 000000000002000000f0000000002000000000000000000000000000000000600000000000060020
% 00000000000200000f00000000000000000000000000000000000000000000030000000000018020
% 0000000000020000f00000000006400000000000000008000000000000000100c000000000004020
% 000000000002001f0000000001184000000000000000080000000000000001000788000000003020
% 000000000003ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000701c704000000000701c7041e00000000e03871c000000000000000
% 0000000000000000000000000d836d84000000000d836d841000000001b06cdb6000000000000000
% 0000000000000000000000000d836d8c000000000d836d8c3000000001b06cda2000000000000000
% 0000000000000000000000000882288400000000088228843c000000011044886000000000000000
% 0000000000000000000000000882288400000000088228843600000001104488c000000000000000
% 00000000000000000000000008822884000000000882288402000000011044898000000000000000
% 0000000000000000000000000d836d84000000000d836d843600000001b06cdb0000000000000000
% 0000000000000000000000000711c704000000000711c7043c00000000e13873e000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000001800000000000000000
% 00000000000000000000000000000000000000000000000000000000000001000000000000000000
% 00000000000000000000000000000000018600000180000000060000121808840000000000000000
% 00000000000000000000000000020000001000000180000000060000233809820000000000000000
% 0000000000000000000000000007e71e39be71e039b8f86044e6c860233811c20000000000000000
% 0000000000000000000000000006ed9969b6d99069ecc8b049b6c8b0233811420000000000000000
% 0000000000000000000000000002c3997196899071c4c9906876c99063f812620000000000000000
% 0000000000000000000000000002cf991d9689901dc4c9f039f6c9f062f833e20000000000000000
% 0000000000000000000000000002c9996d96d9906decc9903136d99062d9e6220000000000000000
% 0000000000000000000000000003cf99399e719039b8f8f031f678f022d9a6320000000000000000
% 00000000000000000000000000000000000000000000c00000000000200100020000000000000000
% 00000000000000000000000000000000000000000000c00000000000000100040000000000000000
% 00000000000000000000000000000000000000000000000000000000000100000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 2 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 63 195 545 583 289.2 232.8 81.96 526.83 FMBEGINEPSF


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  541   260  5864  4789 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 798 4784 mt 
(0.5) s
2238 4615 mt 2238 4561 L
2238  389 mt 2238  443 L
2198 4784 mt 
(1) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3477 4784 mt 
(1.5) s
4917 4615 mt 4917 4561 L
4917  389 mt 4917  443 L
4877 4784 mt 
(2) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6156 4784 mt 
(2.5) s
/Helvetica /ISOLatin1Encoding 96 FMSR

/Helvetica /ISOLatin1Encoding 144 FMSR

5875 5016 mt 
(x 10) s
/Helvetica /ISOLatin1Encoding 96 FMSR

6147 4927 mt 
(-3) s
/Helvetica /ISOLatin1Encoding 144 FMSR

 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 3770 mt  952 3770 L
6256 3770 mt 6202 3770 L
 623 3823 mt 
(500) s
 898 2925 mt  952 2925 L
6256 2925 mt 6202 2925 L
 543 2978 mt 
(1000) s
 898 2079 mt  952 2079 L
6256 2079 mt 6202 2079 L
 543 2132 mt 
(1500) s
 898 1234 mt  952 1234 L
6256 1234 mt 6202 1234 L
 543 1287 mt 
(2000) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 543  442 mt 
(2500) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
201 4 200 5 201 20 201 49 200 132 201 237 201 458 200 681 
201 832 201 759 200 462 201 -71 201 -703 200 -959 201 -846 200 -596 
201 -320 201 -107 200 -32 1964 4609 20 MP stroke
SO
389 233 389 419 389 140 388 629 389 349 389 327 389 -303 389 -350 
388 -699 389 -279 389 -326 389 -47 389 -93 1087 4615 14 MP stroke

gr 

end

eplot

epage
end

showpage


FMENDEPSF
J
252.78 718.11 278.78 718.11 2 L
J
252.78 718.11 254.53 718.11 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
[3.841 4.939] 3.841 I
254.53 718.11 277.03 718.11 2 L
N
J
277.03 718.11 278.78 718.11 2 L
N
J
252.78 741.61 278.78 741.61 2 L
N
0 12 Q
(micromagnetic) 285.28 739.11 T
(TZ-ZT) 285.78 715.11 T
0 0 0 0 1 1 1 K
75.56 525.33 97.22 774.22 R
7 X
0 0 0 0 1 1 1 K
V
N
93.33 514.78 377.78 544.22 R
V
N
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(0.001) 152.78 535.33 T
(0.002) 283.89 535.33 T
(1000) 71.67 627.55 T
(500) 78.34 585.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(0.0015) 216.66 535.33 T
(transition slope density \050\201/M) 0 -270 62.56 577.1 TF
0 9.6 Q
(r) 0 -270 65.56 727.82 TF
0 12 Q
(\051) 0 -270 62.56 731.02 TF
(transition slope value \050M) 161.78 517.88 T
0 9.6 Q
(r) 291.82 514.88 T
0 12 Q
(/\201\051) 295.02 517.88 T
(1500) 71.67 669.78 T
(2000) 71.67 711.44 T
(2500) 71.67 754.22 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 1884 4588 a(Figure)53 b(13:)86 b(Normalized)52
b(transition)g(slop)s(e)i(his-)1884 4709 y(tograms)72
b(\(empirical)d(p)s(dfs\))k(for)g(the)g(isotropic)1884
4829 y(medium.)105 b(Solid)52 b(line:)85 b(micromagnetic)51
b(mo)s(del.)1884 4950 y(Dotted)32 b(line:)42 b(TZ-ZT)33
b(mo)s(del.)p eop
28 27 bop -133 -99 a Fn(IEEE)30 b(T)-8 b(ransactions)30
b(on)g(Magnetics,)i(v)m(ol.)f(33,)g(pp.)f(4482-4491,)k(No)m(v.)e(1997.)
1037 b Fr(xxviii)-9 3470 y @beginspecial 69 @llx 468
@lly 270 @urx 763 @ury 1984 @rwi @setspecial
% 0000000000100000000000000000000000000000000000000000
% 0000000000100000000000000000000000000000000000000000
% 0ee7550dfb940000000000000000000038000000000000000000
% 084966689a180000000000000000000078000000000000000000
% 08493308aa1400000000000000000001a4000000000000000000
% 0ec6550dbf9e00000000000000000066b8000000000000000000
% 0000000000000000000000000000018250000000000000000000
% 300000000000000000000000000000b340000000000000000000
% 300000000000000000000000000000d100000000000000000000
% 7800000000000000000000000000004800000000000000000000
% 7800000000000000000000000000182800000000000000000000
% fc00000000000000000000000001a82000000000000000000000
% 10000000000000000000000000003c0000000000000000000000
% 1000000000000000000000000000c40000000000000000000000
% 1000000000000000000000000003480000000000000000000000
% 1000000000000000000000000005200000000000000000000000
% 1000000001000000000400000037a00000000000000000000000
% 1000000001000000000400000078800000000000000000000000
% 10000000073bd783eee500000c1d000000000000000000000000
% 100000000949c4b24686000007ac000000000000000000000000
% 100000000949e4824a85000006d0000000000000000000000000
% 100000000f312683cfe780000240000000000000000000000000
% 1000000020000000000000000340000000000000000000000000
% 1000000038000000000000000100000000000000000000000000
% 100000003c000000000000000200000000000000000000000000
% 101ffffffc000000000000000200000000000000000000000000
% 0000000038000000000000000200000000000000000000000000
% 0000000020000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 3fffffffffffffffffffffffffffffffffffffffffffffffffc0
% 00000000000000000000000c02e2222222222222222222222200
% 00000000000000000000001e0230000000000000000000000000
% 00000000000000000000001e020c080808080808080808080800
% 00000000000000000000003f0203000000000000000000000000
% 0000000000000000000000040200e22222222222222222222200
% 0000000000000000000000040200300000000000000000000000
% 00000000000000000000000402000c8888888888888888888880
% 0000000000000000000000040200030000000000000000000000
% 000000000000000000000004020000e222222222222222222200
% 0000000000000000000000040200003000000000000000000000
% 0000000000000000000000040200000c08080808080808080800
% 0000000000000000000000040200000300000000000000000000
% 00000000000000000000000402000000e2222222222222222200
% 0000000000000000000000040200000030000000000000000000
% 000000000000000000000004020000000c888888888888888880
% 00000046000000000000000402000c0003000000000000000000
% 000000cc000000000000000402000c0000e22222222222222200
% 000000dc000000000000000402000a0000300000000000000000
% 000000d8000000000000000402000e10000c0808080808080800
% 00000c68000000000000000402000a1000030000000000000000
% 000001586000000000000004020012100000e222222222222200
% 00000000c0000000000000040200122000003000000000000000
% 000000008000000000000c040200002000000c88888888ce8880
% 0000004000000000000008040200002000000300000000cc0000
% 000001c00000000000000a0402000000000000e2222222fe2200
% 000003c00000000000000f140200000000000038000078d80000
% 000003ffff0000000000091407fffffffffffff8080828680800
% 000001c0000000000000121402000000100000c8000021580000
% 000000400000000000001e24020000001000032222222222e200
% 0000000000000000000000240200000010000c00000000018000
% 000000000000000000000024020001c010003888888888898880
% 0000000000000000000000040200024b9000c008000000000000
% 0000000000000000000000040200024c8803222a222222322200
% 000000000000000000000004020003c9880c00000000001c0000
% 000000000000000000000004020002530c3808080808081e0800
% 0000000000000000000000040200025604c000000007fffe0000
% 000000000000000000000004020001df8322222a2222223e2200
% 000000000000000000000004020000000c000008000000100000
% 0000000000000000000000040200000038888888888888888880
% 00000000000000000000000402000000c0000000000000000000
% 0000000000000000000000040200000322222222222222222200
% 0000000000000000000000040200000c00000000000000000000
% 0000000000000000000000040200003808080808080808080800
% 000000000000000000000004020000c000000008000000000000
% 000000000000000000000004020003222222222a222222222200
% 00000000000000000000000402000c0000000000000000000000
% 0000000000000000000000040200388888888888888888888880
% 0000000000000000000000040200c00000000000000000000000
% 00000000000000000000003f020322222222222a222222222200
% 00000000000000000000001e020c000000000008000000000000
% 00000000000000000000001e0238080808080808080808080800
% 00000000000000000000000c02c0000000000000000000000000
% 00000000000000000000000c0322222222222222222222222200
% 3fffffffffffffffffffffffffffffffffffffffffffffffffc0
% 0000000000000000000000003a8b888888888888888888888880
% 000000000000000000000000c207800000000008000000000000
% 0000000000000000000000032227a2222222222a222222222200
% 00000000000000000000000c020fc00000000000000000000000
% 0000000000000000000000380a09080808080808080808080800
% 0000000000000000000000c00201000000000000000000000000
% 00000000000000000000032e222322222222222a222222222200
% 000000000000000000000c0c0201000000000008000000000000
% 00000000000000000000388a8a89888888888888888888888880
% 00000000000000000000c00e0201000000000000000000000000
% 00000000000000000003222a3223222222222222222222222200
% 0000000000000000000c00125a01000000000000000000000000
% 00000000000000000038081a1a09080808080808080808080800
% 000000000000000000c000001201180000000008000000000000
% 000000000000000003222222222332222222222a222222222200
% 00000000000000000c0000007201140000000000000000000000
% 0000000000000000388888888a899e8888888888888888888880
% 00000000000000007ffffffffe01126000000000000000000000
% 00000000000000002e222a22222326b22222222a222222222200
% 0000000000000000030008e002013c3000000008000000000000
% 000000000000000000c8092cea09082808080808080808080800
% 0000000000000000203009252201004000000000000000000000
% 0000000000000000200e2be6622322e222222222222222222200
% 000000000000000020030928c201000000000000000000000000
% 00000000000000000000d9a98a89888888888888888888888880
% 0000000000000000000030ebe201000000000008000000000000
% 000000000000000000000e22222322222222222a222222222200
% 0000000000000000200003000201000000000000000000000000
% 0000000000000000200000c80a09080808080808080808080800
% 0000000000000000200000300201000000000000000000000000
% 00000000000000000000000e222fe2222222222a222222222200
% 0000000000000000000000030207800000000008000000000000
% 000000000000000000000000ca8f888888888888888888888880
% 0000000000000000200000003203000000000000000000000000
% 0000000000000000200000000e23222222222222222222222200
% 3fffffffffffffffffffffffffffffffffffffffffffffffffc0
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000200000000000000000000000000000000000
% 0000000000000000200000000000000000000000000000000000
% 0000000000000000200000000000001e0000400000006c000100
% 0000000000000000000000000000001600000008000048000000
% 00000000000000000000000000158025000a20082b008a001480
% 000000000000000000000000001e8067000e21f83d018f001c80
% 00000000000000002000000000158045080c20002b0109201880
% 00000000000000002000000000258049080c61f04b0112201980
% 000000000000000020000000062d9c490a3640005b711e246d00
% 0000000000000000000000000600140012008008005000440200
% 0000000000000000000000000f00242010018008009080400600
% 0000000000000000000000000f0038001000000800e000400000
% 0000000000000000200000001f80200000000000008000000000
% 0000000000000000200000000200600000000000018000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000000000000200000000000008000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000004200000000000000000000000000
% 0000000000000000000000004200000000000008000000000000
% 0000000000000000000000004200000000000008000000000000
% 0000000000000000000000004200000000000008000000000000
% 0000000000000000200000004200000000000000000000000000
% 000000000000000020000000420000000000003fffffff800000
% 000000000000000020000000471c71c71c71c77fffffff800000
% 00000000000000000000000002000000000001ffffffff800000
% 00000000000000000000000002000000000003e8000000000000
% 0000000000000000000000000200000000000f88000000000000
% 0000000000000000200000000200000000001f00000000000000
% 0000000000000000200000000200000000007c00000000000000
% 000000000000000020000000020000000000f800000000000000
% 000000000000000000000000020000000003e008000000000000
% 000000000000000000000000020000000007c008000000000000
% 00000000000000000000000002000000001f0008000000000000
% 00000000000000002000000002000000003e0000000000000000
% 0000000000000000200000000200000000f80000000000000000
% 0000000000000000200000000200000001f00000000000000000
% 0000000000000000000000000200000007c00008000000000000
% 000000000000000000000000020000000f800008000000000000
% 000000000000000000000000020000003e000008000000000800
% 000000000000000020000000020000007c000008000000000e00
% 00000000000000002000000002000001f0000008000000000f00
% 3fffffffffffffffffffffffffffffffffffffffffffffffff00
% 0000000000000000000000000200000f80000008000000000e00
% 0000000000000000000000000200001f00000009800000000800
% 0000000000000000000000000200007c00000009800000000000
% 000000000000000020000000020000f800000001400000000000
% 000000000000000020000000020003e000000001c00000000000
% 000000000000000020000000020007c000000001420000002800
% 00000000000000000000000002001f000000000a420000003800
% 00000000000000000000000002003e000000000a420000003000
% 0000000000000000000000000200f80000000008040000003000
% 0000000000000000200000000201f0000000000004000000d800
% 0000000000000000200000000207c00000000000040000000000
% 000000000000000020000000020f800000000000000000000000
% 000000000000000000000000023e000000000000000000000000
% 000000000000000000000000027c000000000000000000000000
% 00000000000000000000000003f0000000000000000000000000
% 00000000000000002000000003e0000000000000000000000000
% 00001fffffffffffffffffffff80000000000000000000000000
% 00001fffffffffffffffffffff02000000000000000000000000
% 00001ffffffffffffffffffffe02000000000000000000000000
% 0000000000000000000000000202000000000000000000000000
% 0000000000000000000000000202000000000000000000000000
% 0000000000000000200000000272000000000000000000000000
% 0000000000000000200000000202000000000000000000000000
% 0000000000000000200000000202000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000
% 0000000000000000200000000000001b0000400000003c000080
% 0000000000000000200000000000001300000000000028000000
% 000000000000000020000000000ac022800520002b004a001440
% 000000000000000000000000000f4063980720f83d00cf301c40
% 000000000000000000000000000ac042ac0620002b0089581840
% 0000000000000000000000000612dc448c0660f84b38921818c0
% 0000000000000000200000000616f444891b40005b689e146c80
% 0000000000000000200000000f00280011008000005000240100
% 0000000000000000200000000f002c2038018000005840700300
% 0000000000000000000000001f80000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000004200000000000000000000000000
% 0000000000000000200000004200000000000000000000000000
% 0000000000000000200000004200000000000000000000000000
% 0000000000000000200000004200000000000000000000000000
% 0000000000000000000000004200000000000000000000000000
% 0000000000000000000000004fffffffffffffffffffff800000
% 0000000000000000000000005fffffffffffffffffffff800000
% 0000000000000000200000003fffffffffffffffffffff800000
% 0000000000000000200000007e00000000000000000000000000
% 000000000000000020000000fa00000000000000000000000000
% 000000000000000000000001f200000000000000000000000000
% 000000000000000000000003e200000000000000000000000000
% 00000000000000c000000007c200000000000000000000000000
% 00000000000000c02000000f8200000000000000000000000000
% 00000000000000a02000001f0200000000000000000000000000
% 00000000000000e02000003e0200000000000000000000000000
% 00000000000000a30000007c0200000000000000000000000000
% 0000000000000125800000f80200000000000000000000000000
% 0000000000000121800001f00200000000000000000000000000
% 0000000000000001200003e00200000000000000000000000000
% 0000000000000002200007c00200000000000000000000000000
% 000000000000000720000f800200000000000000000000000800
% 000000000000000020001f000200000000000000000000000e00
% 000000000000000020003e000200000000000000000000000f00
% 3fffffffffffffffffffffffffffffffffffffffffffffffff00
% 00000000000000002000f8000200000000000000000000000e00
% 00000000000000002001f0000200000000000000000000000800
% 00000000000000002003e0000200000000000000000000000000
% 00000000000000000007c0000200000000000000000000000000
% 0000000000000000000f80000200000000000000000000000000
% 0000000000000000001f00000200000000000000000000002800
% 0000000000000000203e00000200000000000000000000003800
% 0000000000000000207c00000200000000000000000000003000
% 000000000000000020f800000200000000000000000000003000
% 000000000000000001f00000020000000000000000000000d800
% 000000000000000003e000000200000000000000000000000000
% 000000000000000007c000000200000000000000000000000000
% 00000000000000002f8000000200000000000000000000000000
% 00000000000000003f0000000200000000000000000000000000
% 00000000000000003e0000000200000000000000000000000000
% 00000000000000007c0000000200000000000000000000000000
% 00001ffffffffffff80000000202000000000000000000000000
% 00001ffffffffffff1c71c71ce02000000000000000000000000
% 00001fffffffffffe00000000202000000000000000000000000
% 0000000000000000200000000202000000000000000000000000
% 0000000000000000200000000272000000000000000000000000
% 0000000000000000000000000202000000000000000000000000
% 0000000000000000000000000202000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000200000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
% 0000000000000000000000000200000000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 7 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
171 729 270 729 270 639 171 639 135 657 225 702 6 Y
0 X
0 0 1 0 1 1 0 K
V
0 0 0 1 0 0 0 K
270 729 72 729 2 L
1 H
2 Z
0 0 0 1 0 0 0 K
N
270 675 72 675 2 L
0.5 H
N
270 639 72 639 2 L
1 H
N
171 738 171 630 2 L
0.5 H
N
171 729 225 702 135 657 171 639 4 L
N
225 702 171 702 2 L
N
135 657 171 657 2 L
N
264.8 588 270 585 264.8 582 264.8 585 4 Y
V
264.8 585 72 585 2 L
N
264.8 507 270 504 264.8 501 264.8 504 4 Y
V
264.8 504 72 504 2 L
N
168 615.8 171 621 174 615.8 171 615.8 4 Y
V
171 615.8 171 549 2 L
N
168 534.8 171 540 174 534.8 171 534.8 4 Y
V
171 534.8 171 468 2 L
N
J
135 657 135 477 2 L
J
135 657 135 656.25 2 L
N
[1.5 4.5] 1.5 I
135 656.25 135 477.75 2 L
N
J
135 477.75 135 477 2 L
N
J
225 702 225 576 2 L
J
225 702 225 701.25 2 L
N
[1.5 4.5] 1.5 I
225 701.25 225 576.75 2 L
N
J
225 576.75 225 576 2 L
N
J
252 603 225 603 171 567 90 567 4 L
2 H
N
252 522 171 522 135 486 90 486 4 L
N
J
225 603 171 603 2 L
J
225 603 224.25 603 2 L
0.5 H
N
[1.5 4.5] 1.5 I
224.25 603 171.75 603 2 L
N
J
171.75 603 171 603 2 L
N
J
171 486 135 486 2 L
J
171 486 170.25 486 2 L
N
[1.5 4.5] 1.5 I
170.25 486 135.75 486 2 L
N
J
135.75 486 135 486 2 L
N
0 11 Q
(1) 163.5 521.39 T
(1) 163.5 602.39 T
(-1) 173.5 560.5 T
(-1) 173.5 480.5 T
1 F
(x) 261.5 493 T
(x) 261.5 574.5 T
(h) 227 576 T
1 8.8 Q
(1) 232.5 573.25 T
1 11 Q
(-h) 120.5 509 T
1 8.8 Q
(2) 129.66 506.25 T
J
225 587.5 225 582.5 2 L
1 H
N
135 507 135 502 2 L
N
1 11 Q
(m) 175 620 T
1 8.8 Q
(p) 182.94 617.25 T
1 11 Q
(\050h) 189.54 620 T
1 8.8 Q
(1) 198.71 617.25 T
1 11 Q
(,) 203.1 620 T
(x\051 = m) 208.05 620 T
1 8.8 Q
(p) 237.47 617.25 T
1 11 Q
(\050b) 244.07 620 T
1 8.8 Q
(1) 253.23 617.25 T
1 11 Q
(,) 257.63 620 T
(x\051) 262.58 620 T
(m) 175.5 538.5 T
1 8.8 Q
(n) 183.44 535.75 T
1 11 Q
(\050h) 190.04 538.5 T
1 8.8 Q
(2) 199.21 535.75 T
1 11 Q
(,) 203.6 538.5 T
(x\051 = m) 208.55 538.5 T
1 8.8 Q
(n) 237.97 535.75 T
1 11 Q
(\050b) 244.57 538.5 T
1 8.8 Q
(2) 253.73 535.75 T
1 11 Q
(,) 258.13 538.5 T
(x\051) 263.08 538.5 T
(h) 184 706.5 T
1 8.8 Q
(1) 189.5 703.75 T
1 11 Q
(h) 160 661 T
1 8.8 Q
(2) 165.5 658.25 T
1 11 Q
(b) 152 699.5 T
1 8.8 Q
(1) 157.5 696.75 T
1 11 Q
(b) 183 654 T
1 8.8 Q
(2) 188.5 651.25 T
J
0.5 H
180 270 3.5 10.5 203.5 702 A
270 360 2 8.5 152 657 A
2 10 Q
(q) 186.5 691 T
1 F
(/2) 191.71 691 T
255.8 696 261 693 255.8 690 255.8 693 4 Y
V
255.8 693 243 693 2 L
N
95.2 699 90 702 95.2 705 95.2 702 4 Y
V
108 702 95.2 702 2 L
N
(+M) 244.81 699.66 T
1 8 Q
(r) 259.89 697.16 T
1 10 Q
(-M) 89 707.5 T
1 8 Q
(r) 100.66 705 T
2 10 Q
(q) 156 648 T
1 F
(/2) 161.21 648 T
177 669.8 180 675 183 669.8 180 669.8 4 Y
V
183 644.2 180 639 177 644.2 180 644.2 4 Y
V
180 669.8 180 644.2 2 L
0 Z
N
159 723.8 162 729 165 723.8 162 723.8 4 Y
V
165 680.2 162 675 159 680.2 162 680.2 4 Y
V
162 723.8 162 680.2 2 L
N
0 F
(basis line) 0 -330 171.5 739.5 TF
69 750.8 72 756 75 750.8 72 750.8 4 Y
V
72 750.8 72 738 2 L
2 Z
N
102.8 741 108 738 102.8 735 102.8 738 4 Y
V
81 738 102.8 738 2 L
N
(cross-track) 73 757.17 T
(down-track) 105 741 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -165 3782 a(Figure)41 b(14:)61 b(T)-8 b(op:)63
b(p)s(ortion)40 b(of)i(a)g(trac)m(k)g(in)m(v)m(olving)-165
3902 y(only)e(2)g(triangles.)66 b(Middle:)59 b(magnetization)38
b(pro-)-165 4022 y(\014le)k(in)g(the)h(strip)s(e)f(asso)s(ciated)g
(with)h(the)g(p)s(ositiv)m(e)-165 4143 y(orien)m(ted)30
b(triangle.)40 b(Bottom:)h(magnetization)28 b(pro-)-165
4263 y(\014le)38 b(in)h(the)g(strip)s(e)g(asso)s(ciated)g(with)g(the)h
(negativ)m(e)-165 4384 y(orien)m(ted)32 b(triangle.)2040
2983 y @beginspecial 10 @llx 608 @lly 244 @urx 746 @ury
1984 @rwi @setspecial
% 00000063c000000000000000000000000000000000000000000000000000
% 000000618000000000000000000000000000000000000000000000000000
% 000000f18000000000000000000000000000000000000000000000000000
% 000000f6c000000000000000000000000000000000000000000000000000
% 000001f80000000000000000000000000000000000000000000000000000
% 000000200000000000000000000000000000000000000000000000000000
% 000000200000000000000000000000000000000000000000000000000000
% 000000200000000000000000000000000000000000000000000000000000
% 000011311111111111111111111111111111111111111111111111110000
% 000000200000000000000000000000000000000000000000000000000000
% 000044644444444444444444444444444444444444444444444444440000
% 000000200000000000000000000000000000000000000000000000000000
% 000001210101010101010101010101010101010101010101010101010000
% 000000200000000000000000000000000000000000000000000000000000
% 000044644444444444444444444444444444444444444444444444440000
% 000000200000000000000000000000000000000000000000000000000000
% 000011311111111111111111111111111111111111111111111111110000
% 000000200000000001000000600000000000000000000000000000000000
% 000044644444444447444444944444444444444444444444444444440000
% 000000200000000003000001080000000000000000000000000000000000
% 000001210101010103810102050101010101010101010101010101010000
% 000000200000000003800004020000000000000000000000000000000000
% 000044644444444447c44448014444444444444444444444444444440000
% 000000200000000007c00010008000000000000000000000000000000000
% 000011311111111117d11120005111111111111111111111111111110000
% 00000020000000000fc00040002000000000000000000000000000000000
% 00004464444444444fe44480001444444444444444444444444444440000
% 00002020000000000d600100000800000000000000000000000000000000
% 000011210101010101010200002501010101010101010101010101010000
% 000008200000002301000408c02200000000000000000000000000000000
% 000004644444446645444819802144444444444444444444444444440000
% 000002200000106e0100101b802080000000000000000000000000000000
% 0000013111113d7d1111201b002051111111111111111111111111110000
% 000000a0000010340100418d002020000000000000000000000000000000
% 00000064444454ec6544802b002014444444444444444444444444440000
% 0000002000000000c1010000182008000000018000000000000600000000
% 000000310101010181020000302005010101004101010101010901010000
% 00000028000000000004000021ac02000000002000000000001080000000
% 00000024444444444448000001fc01444444481444444444446044440000
% 00000022000000000110000001f800800000100800000000004020000000
% 00000021111111111120000000f800511111000511111111118011110000
% 00000020800000000140000000f800200000000200000000010008000800
% 00000020444444444480000000f000144444000144444444460004440e00
% 0000002030000000010000000070000c00010000c0000000040003000f00
% 0000ffffffffffffffffffffffffffffffffffffffffffffffffffffff00
% 000000201800000005000000006000060000000060000000140001800e00
% 000000200444444449000000006000014440000014444444600000440800
% 0000002002000000110000000020000080100000080000004000002001e0
% 000000201111111120000000000000045120000045111111840001110080
% 000000201080000040000000000000042000000042000001040001080180
% 0000002010444444800000000000000414000000414444460400010403c0
% 000000200020000101000000000000000800000000800004000000020000
% 000000200011010201000000000000000600000000410108000000010000
% 000000200008000401000000000000000000000000200010000000000000
% 000000201004444800000000000000040000000040144460040001000000
% 000000201002001000000000000000040000000040080040040001000000
% 000000200001112000000000000000000000000000051180000000000000
% 000000200000804001000000000000000000000000020100000000000000
% 000000200000448001000000000000000000000000014600000000000000
% 000000200000210001000000000000000000000000008400000000000000
% 000000201000120000000000000000040000000040004800040001000000
% 0000002010000c0000000000000000040000000040003000040001000000
% 000000200000000000000000000000000000000000000000000000000000
% 000000000000000001000000000000000000000000000000000000000000
% 000000000000000001000000000000000000000000000000000000000000
% 000000001000000001000000000000040000000040000000040001000000
% 000000001000100000000000000000040000000040000000040001000000
% 000104001000100000000000400000040000000040000000040001000000
% 0002000000001c0000000000400000000000000000002000008000000000
% fc0278000000140001000000700000000000000000002000008000000000
% 54042400000024c00100000050000000000000000000380000e000000000
% b4c46460100038c00100000097000004000000004000280004a001000000
% a504f4601000008000000000e10000040000000040004900052407000000
% 014008f0100000800000000001000004000000004000700005c087000000
% 014210f00000008000000000020000000000000000000100000484000000
% 018001f80000000001000000070000000000000000000200000bc4000000
% 000000200000000001000000000000000000000000000300000c84000000
% 000000201100000021100000000000840000000044000000844021000000
% 000000201700000038700000000000e4000000005c000000e5c039000000
% 000000200f0000003cf00000000000f0000000003c000000f3c03c000000
% 000000200ffffffffcfffffffffffff0000000003ffffffff3fffc000000
% 000000200700000039700000000000e0000000001c000000e1c038000000
% 000000200100000021100000000000800000000004000000804020000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000000000000000000040000000040000000040001000000
% 000000200000000000000000000000000000000000000000000000000000
% 000010200000000000000000000000000000000000000000000000000000
% 000010200000000001000000000000000000000000000000000000000000
% 000010201000000001000000000000040000000040000000040001000000
% 000013fe1fffffffff00000000000007fe0000007ffffffffc0001ff8000
% 000013fe1000000001000000000000040000000040000000040001000000
% 00001bfe1000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040603018040000000040001000000
% 000000201000000001000000000000040603018040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 0000002010001c0001000000000000040000000040000000040001000000
% 0000002010001c0001000000000000040000000040003800040001000800
% 0000002010001c0001000000000000040000000040003800040001000e00
% 0000002010001c0001000000000000040000000040003800040001000f00
% 00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00
% 0000002010001c0001000000000000040000000040003800040001000e00
% 0000002010001c0001000000000000040000000040003800040001000800
% 0000002010001c0001000000000000040000000040003800040001000000
% 0000002010001c00010000000000000400000000400000000400010001e0
% 000000201000000001000000000000040000000040000000040001000080
% 000000201000000001000000000000040000000040000000040001000180
% 0000002010007800010000000000000400000000400001200400010003c0
% 000000201000200001000000000000040000000040000040040001000000
% 0000002010006000010000000000000400000000400f20c0040001000000
% 000000201000f00001000000000000040000000040047980040001000000
% 0000002010000000010000000000000400000000400c2100040001000000
% 0000002010000000010000000000000400000000401e23e0040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000000201000000001000000000000040000000040000000040001000000
% 000010201000000001000000000000040000000040000000040001000000
% 000010201000000001000000000000040000000040000000040001000000
% 000010201000000001000000000000040000000040000000040001000000
% 000011fff000000001fffffffffffffc000001ffc000000007ffff000000
% 000011fe0000000000000000000000000000000000000000000000000000
% 000019fe0000008000000000000000000000000000020000000000000000
% 000000200000038000000000000000000000000000038000000000000000
% 00000020000007800000000000000000000000000003c000000000000000
% 00000020000007ffffffffffffffffffffffffffffffc000000000000000
% 000000200000038000000000000000000000000000038000000000000000
% 000000200000008000000000000000000000000000020000000000000000
% 000000200000000000000000000120000000000000000000000000000000
% 000000200000000000000000000040000000000000000000000000000000
% 0000000000000000000000000000c0000000000000000000000000000000
% 000000000000000000000000000180000000000000000000000000000000
% 000000000000000000000000000100000000000000000000000000000000
% 0000000000000000000000000003e0000000000000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 4 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
1