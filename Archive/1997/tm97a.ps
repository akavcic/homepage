%!PS (but not EPSF; comments have been disabled)
%DVIPSCommandLine: dvips -o paper.ps paper
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1998.02.21:2319
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
TeXDict begin 40258431 52099146 1000 600 600 (paper.dvi)
@start /Fa 26 122 df<121C127F12FFA412FE12380808788716>46
D<3A01C3E001C09038CFF0033A03FFF80780ED0F00485C9038F8383E390FE01C7C9038C0
0FFC48486C5A001EC7FC003E5C003C495A5A0070495A00F01307485CC7120F4AC7FCA214
3EA25CA214FC5C13015C1303A2495AA2130F5CA2131F5CA2133FA291C8FC5BA2137EA213
38222D77AB24>55 D<143FECFFC0903803E1E090380F80F090381F0078133E017E137C5B
5B1201A2485AA215FC12075BA2140115F813C01403A2EC07F00003130FEBE01F0001133F
3900F077E0EB7FE7EB1F879038000FC0A2EC1F80A21500143E0038137E007E137C00FE5B
495A48485A48485A38700F80D8781EC7FCEA3FF8EA0FE01E2D79AB24>57
D<16E01501821503A21507150FA2151FA2153B157B157315E382EC01C114031581EC0701
A2140EA2141C143C143802707F15005C13015C49B5FCA249C7FCA2130E131E131C498016
7E5B13F0485AA21203D80FF014FFD8FFFC011F13F0A22C2F7CAE35>65
D<011FB512FCEEFF80903A00FE000FC0EE03E04AEB01F017F80101140017FC5CA2130317
F84A1301A20107EC03F017E04AEB07C0EE0F80010FEC3F0016FE9138C007F891B512E049
14F89138C0007C4A7F82013F1580A291C7120FA25BA2017E141FA213FEEE3F005B167E00
015D4B5A49495A4B5A0003EC3F80B600FEC7FC15F82E2D7BAC32>I<DA01FE133091390F
FFC07091393F01E0F09138F80079D903E0133D4948EB1FE0D91F80130F49C7FC017E1407
4915C0485A485A5B00071680485AA2485A170048CAFCA25A127EA312FE5AA51638481578
16707E16F0007C5D15014B5A6C5D4BC7FC6C140E6C6C133C6C6C5B6C6C485A3900F80FC0
D97FFFC8FCEB0FF82C2F75AD33>I<011FB612FEA2903900FE0001EE007E4A143EA20101
151E171C5CA21303A25C16E001071301170002E05B1503130F15074A485A91B5FC5BECC0
1F4A6CC7FCA2133FA2DA000E13E0A2491401030013C0017E1403178001FE14071700495C
161E12015E49147CED01FC0003EC0FF8B7FC5E2F2D7CAC30>69 D<03FF1318020FEBC038
91393F00F07802F8EB38F8D903F0131CD907C0EB0FF0EB1F8049C71207137E49EC03E048
5A485AA2484815C0485AA2485A178048CAFCA25A127EA312FE5AA292B512E0A2923801FE
006F5A15015EA3007C14035E127E123E001E1407001F5D6C6C130F6C6C133F6C6C13793A
00F803F1C090383FFF80D907FCC8FC2D2F75AD37>71 D<90381FFFF8A2903800FE00A25C
A21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C7FCA25BA213
7EA213FEA25BA21201A25BA21203B512C0A21D2D7CAC1B>73 D<91387FFFE0A2913800FE
00A25DA214015DA314035DA314075DA3140F5DA3141F5DA3143F92C7FCA35CA2147EA200
3C13FE127E00FE5BA2495AEAFC0300F05B48485A38700FC0D8781FC8FCEA1FFCEA07F023
2E7AAC25>I<90381FFFFEA2D900FEC7FCA25CA21301A25CA21303A25CA21307A25CA213
0FA25CA2131FA25CA2133FA291C7121CA249143C1638017E1478167001FE14F0A249EB01
E0A200011403ED07C049130FED3F80000314FFB7FC1600262D7BAC2D>76
D<D91FFFED0FFF600100EE3FC0A2F07F8018EF902601EF8014FF943801DF0014CFEF039F
01034B5A183E028F140E171C0107167EDA87C0EB387C14071770010FEDE0FC60010EEC01
C0EE0380011E158193380701F090381C03E0160E013CEC1C036001381438A20178EC7007
04E05B90387001F0EDF1C001F09038F3800F6001E0EBF700A2000102FE131F4B91C7FC13
C0486C6C5AD80FF05DD8FFFE9039F00FFFF815E0402D7BAC40>I<4AB4FC020F13C09138
3E03F09138F8007CD903E07FD907807F011FC77E013E15804914074915C0485AEE03E048
5A485AA2485A121F90C8FC5AA2003E1507127EA348ED0FC0A3EE1F80A217005E163E167E
167C16FC4B5A007C5D4B5A6C4A5A4B5A6C4AC7FC6C6C133E6D13F83903E003F03901F80F
C026007FFFC8FCEB0FF02B2F75AD37>79 D<011FB512FCEEFF80903A00FE000FE0EE03F0
4AEB00F8A20101157CA25C177E130317FC5CA20107EC01F8A24AEB03F017E0010FEC07C0
EE0F804AEB3F00ED01FC91B512F04991C7FC0280C8FCA3133F91C9FCA35B137EA313FE5B
A312015BA21203B512C0A22F2D7CAC30>I<000FB712F0A23A1FE00FE00701001401001E
02C013E0481500141F12380078EC8001A20070013F14C012F0481400A25CC791C7FC147E
A214FEA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133F003FB5
7EA22C2D74AC33>84 D<EB07C0EB1FF090387C39C0EBF81FEA01F03803E00FEA07C0120F
D81F801380A2EA3F00141F481400127EA25C00FE133E5AA2EC7E18EC7C385AA214FCD878
011378397C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001D1F799D24>97
D<EB01F8EB0FFE90383E0780EBFC03D801F013C03803E0070007130FEA0FC00180138012
1F48C8FCA25A127EA312FE5AA5EC0180007CEB03C0EC0780EC0F006C131E001E137C380F
83F03807FFC0C648C7FC1A1F799D21>99 D<14F8EB03FE90380F873890381F03F8137EEB
7C0113F81201EA03F015F0EA07E01403120F01C013E0A21407121F018013C0A2140FA215
80141F120F143FEC7F006C6C5AEA03C33801FFBF38007E3E1300147EA2147CA214FC0038
5BEAFC015C495A48485A38F01F80D87FFEC7FCEA1FF01D2C7C9D21>103
D<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA21201147E9038F3FF809038
F787C03903FE03E013FC13F8A2EA07F013E0A213C0000F130715C01380A2001F130F1580
1300141F481406150E003E133F143E007E141EEC7E1C007C137CEC3C3812FC157048EB1F
E00070EB07801F2F7BAD24>I<137CEA0FFCA21200A213F8A21201A213F0A21203A213E0
A21207A213C0A2120FA21380A2121FA21300A25AA2123EA2127EA2127CA2EAFC30137012
F8A213F013E012F012F113C012FBEA7F80EA1E000E2F7AAD12>108
D<3907801FC0391FE07FF0393DF1E0F83938F3C0783978FF007CEA70FEA2EAF1FCEAE1F8
A25B00C314FC00035C5BA2000713015D13C01403000FECE0C015E1EB800715C1001F14C3
020F13800100138391380787005A158E003EEB03FC001CEB00F0221F7A9D28>110
D<EB03F8EB0FFE90383E0F809038FC07C03801F003D803E013E01207390FC001F0138012
1FEA3F0014035A127EA2140700FE14E05AA2EC0FC0A2EC1F80A2007CEB3F00143E5C6C5B
381E01F0380F07C06CB4C7FCEA01FC1C1F799D24>I<90383C01F09038FF07FC3901E79E
1E9038C7BC0F000301F81380903887F00702E013C038078FC0130F1480A2D8061F130F12
001400A249131F1680133EA2017EEB3F00A2017C133E157E01FC137C5DEBFE015D486C48
5AEC0F80D9F3FEC7FCEBF0F8000390C8FCA25BA21207A25BA2120FA2EAFFFCA2222B7F9D
24>I<3807803E391FE0FF80393CF3C1C03938F781E03878FF07EA70FE13FC12F139E1F8
038091C7FC5B12C312035BA21207A25BA2120FA25BA2121FA290C8FCA25AA2123E121C1B
1F7A9D1E>114 D<EB0FC0EB7FF0EBF03C3801E01C3803C01EEA0780143EA2000F133C14
18EBC00013F813FF6C13C06C13E06C13F0EA007F130713031301EA780012FCA2130100F8
13E012E0EB03C038F0078038781F00EA1FFCEA07F0171F7A9D1D>I<EA03C0D80FF01338
D81E78137CD81C7C13FC003814F812781270EBFC01D8F0F813F012E012E138C1F0030001
14E0120313E01407000714C013C0A2140F000F14801380A2141F150000075B5C13C03803
E1FE3801FFBE38007E3EEB007E147CA2003E5BA2387E01F0A2387C03E0387007C06C485A
D83C3EC7FCEA1FF8EA07E01E2C7A9D23>121 D E /Fb 1 89 df<BF12E08AA38A6C90CC
FC0900806C6D19076C6D07007F6C6D1A1F1D076C6DF201FF6C6D747E6C6DF33F801E0F6C
6D1B076D6CF303C06D6D1A01F600E06D7F6D6D1B706D1D30816D6D1B186D6D1B007F816E
7E6E7FA26E7F6E7F6E7FA26E7F6E7F6E7FA26F7E6F7F6F7FA26F7F6F7F81836F7F6F7F16
7F83707F707F8284707F707FA2707F82715A60173F715A604D5A4DCDFC17FEA24C5A4C5A
4C5A4C5A4C5A5F163F4CCEFC16FE4B5A4B5A4B5AA24B5A4B5A4B5A4BCFFC15FEA24A5A4A
5A4A481B184A481B304A5A4B1B70023F1C604ACF12E002FE1B014948F303C049481B0749
48F30F801E1F49481B7F4948F3FF0049481A0349CE120F01FEF37FFEF403FF48481A7F48
48077FB55A48BEFC48655AA248655ABFFC666D747B7F78>88 D E
/Fc 1 1 df<B712C0A322037A8D30>0 D E /Fd 2 107 df<171C177EEE01FEEE07FCEE
1FF0EE7FC0923801FF00ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1FF0EC7FC04948C8FC
EB07FCEB1FF0EB7FC04848C9FCEA07FCEA1FF0EA7FC048CAFCA2EA7FC0EA1FF0EA07FCEA
01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1F
F0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEEE007E171C1700AC007FB712FCB812
FEA26C16FC2F3E7AB03C>20 D<126012F0B3B3B3B31260044B78B715>106
D E /Fe 17 117 df<120EEA3F80127F12FFA31300127E123C0909778819>46
D<EE01C01603A21607160FA2161F83163FA2167F16FF16EF150116CFED038FA2ED070FA2
150E151E151C1538A203707FA2EDE007A2EC01C014031580EC0700A2140EA25CA25C027F
B5FCA291B6FC9139E00007F849481303A2495A130791C7FC5B130E5BA25B1378137013F0
EA03F8486C4A7EB56C48B512F0A3343C7BBB3E>65 D<0107B612FCEFFF8018C0903B000F
F0001FF04BEB07F81703021F15FC17014B14FEA2023F1400A24B1301A2147F18FC92C712
0318F84A140718F04AEC0FE0EF1FC00101ED3F80EF7F004AEB01FEEE07F849B612E05F91
39F80007F0EE01FC01076E7E177F4AEC3F80A2010F16C0171F5CA2131F173F5CA2133FEF
7F805C1800017F5D4C5A91C7485A5F49140FEE1FE0494A5A00014AB45AB748C7FC16F816
C037397BB83A>I<0103B512F8A390390007F8005DA2140FA25DA2141FA25DA2143FA25D
A2147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25C
A2133FA25CA2137FA291C8FC497EB6FCA25C25397CB820>73 D<0007B812E0A25AD9F800
EB001F01C049EB07C0485AD900011403121E001C5C003C17801403123800785C00701607
140700F01700485CA2140FC792C7FC5DA2141FA25DA2143FA25DA2147FA292C9FCA25CA2
5CA21301A25CA21303A25CA21307A25CA2130FA25CEB3FF0007FB512F8B6FCA2333971B8
3B>84 D<14F8EB07FE90381F871C90383E03FE137CEBF801120148486C5A485A120FEBC0
01001F5CA2EA3F801403007F5C1300A21407485C5AA2140F5D48ECC1C0A2141F15831680
143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC3901F000F0
222677A42A>97 D<147F903803FFC090380FC1E090381F0070017E13784913383901F801
F83803F003120713E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015
381578007C14F0007EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC
1D2677A426>99 D<ED01F815FFA3150316F0A21507A216E0A2150FA216C0A2151FA21680
A2153FA202F81300EB07FE90381F877F90383E03FF017C5BEBF80112013803F00048485B
120FEBC001121F5DEA3F801403127F01005BA214075A485CA2140FA248ECC1C0A2141F15
C3ED8380143F1587007C017F1300ECFF076C485B9038038F8E391F0F079E3907FE03FC39
01F000F0253B77B92A>I<147F903803FFC090380FC1E090383F00F0017E13785B485A48
5A485A120F4913F8001F14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC
5A5AA55AA21530007C14381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781
F83803FFE0C690C7FC1D2677A426>I<EC07C0EC3FF09138FC38E0903901F01FF0EB03E0
903807C00FEB0F80011F1307D93F0013E05B017E130F13FE4914C01201151F1203491480
A2153F1207491400A25DA249137EA215FEA25D00031301140314076C6C485A0000131FEB
787BEB3FF390380FC3F0EB00031407A25DA2140F5D121C007E131F5D00FE49C7FC147E5C
387801F8387C07E0381FFF80D803FEC8FC24367CA426>103 D<EB01C0EB07E014F0130F
14E01307EB038090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12
E013FEC65AA212015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB838013
03EB0700A2130E6C5AEA07F8EA01E0143879B619>105 D<EB0FC0EA07FFA3EA001F1480
A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25B
A2121FA25BA2123FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA
7870EA7CE0121FEA0F80123B79B915>108 D<D801E013FE3A07F803FF803A0E3C0F07C0
3A1E3E3C03E0261C1F787F39383FF00114E0007813C000708114804A485AEAF07FEAE07E
A20000140701FE5C5BA2150F00015D5B151F5E12034990383F8380160316070007027F13
0049137EA2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A4
2F>110 D<147F903803FFC090380FC1F090381F00F8017E137C5B4848137E4848133E00
07143F5B120F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC
07F015E0140F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7
FC202677A42A>I<3903C003F0390FF01FFC391E783C0F381C7C703A3C3EE03F8038383F
C0EB7F800078150000701300151CD8F07E90C7FCEAE0FE5BA2120012015BA312035BA312
075BA3120F5BA3121F5BA3123F90C9FC120E212679A423>114 D<14FE903807FF809038
0F83C090383E00E04913F00178137001F813F00001130313F0A215E00003EB01C06DC7FC
7FEBFFC06C13F814FE6C7F6D13807F010F13C01300143F141F140F123E127E00FE1480A3
48EB1F0012E06C133E00705B6C5B381E03E06CB45AD801FEC7FC1C267AA422>I<EB0380
EB07C0130FA4131F1480A3133F1400A35B137E007FB5FCA2B6FC3800FC00A312015BA312
035BA312075BA3120F5BA3121FEB801CA2143C003F1338EB0078147014F014E0EB01C0EA
3E03381F0780380F0F00EA07FCEA01F0183579B31C>I E /Ff 5
115 df<903AFFFE07FFF0A2903A07C0003E00A249485BA449C75AA4013E495AA3013FB5
FC495C90387C0003A349495AA44848495AA4484849C7FCA300075C3AFFFE07FFF0A22C22
7CA132>72 D<EB0FE0EB7FF83801F03C3803C01C3807803C380F007C121E003E13381400
5AA35AA400781304140C00381338003C1370381F03E0380FFF803801FC0016177E951C>
99 D<1338137CA2137813701300A7EA0780EA1FC0EA38E01230EA60F0EAC1E0A3EA03C0
A3EA0780A2EA0F0013041306EA1E0CA21318121CEA1E70EA0FE0EA07800F237DA116>
105 D<13F8EA0FF0A21200A2485AA4485AA43807801E147FEB81C3EB8387380F060F495A
1318EB700E4848C7FCA213FCEA1E7EEA3C0F80EB0781158039780F0300A21402EB070600
F0138CEB03F8386000F019247CA221>107 D<380F01F0381FC7F83831CE1CEA61F8EBF0
3C00C1137C13E014383803C000A4485AA448C7FCA4121EA2120C16177D951D>114
D E /Fg 8 112 df<13FF000313C0380781E0380F00F0001E137848133CA248131EA400
F8131FAD0078131EA2007C133E003C133CA26C13786C13F0380781E03803FFC0C6130018
227DA01E>48 D<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>I<EA01
FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013FCC7FC
14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600185A5A
383FFFF85AB512F0A216217CA01E>I<14E01301A213031307A2130D131D133913311361
13E113C1EA01811203EA07011206120C121C12181230127012E0B6FCA2380001E0A6EB03
F0EB3FFFA218227DA11E>52 D<00101330381E01F0381FFFE014C01480EBFE00EA1BF000
18C7FCA513FE381BFF80381F03C0381C01E0381800F014F8C71278A2147CA21230127812
F8A214784813F8006013F0387001E01238381E07803807FF00EA01F816227CA01E>I<B7
12FEA3CAFCA9B712FEA3270F7C932F>61 D<007FB612F0A2397C00F8010070EC0070A200
60153000E01538A2481518A4C71400B3497E90387FFFF0A225227DA12B>84
D<137E3803FFC0380781E0380F00F0001E137848133CA248131EA200F8131FA70078131E
007C133E003C133C003E137C6C13F8380F81F03803FFC0C6130018187D961E>111
D E /Fh 22 121 df<EC7FE0903801FFFC903803C7FEEB0701EB0600153C010E1300130F
A26D7EA280A2806D7E801301806D7E8080903803FF80010F13C0EB3F3FEB7C1F01F813E0
EA01F03803E00F1207390FC007F01380121F123F010013E0A25A127EA315C05A140FA200
7C1480141F1500A26C133E5C6C13786C6C5A3807C1E03801FFC0D8007EC7FC1F367EB422
>14 D<EC1F80EC7FC0903801F0F0EB03E0903807C078EB0F8090381F003C133EA249133E
5BA2485A1203A2485AA249137E120FA2485AA215FE003F14FC90C7FC90B5FCA25A15F838
7E0001140300FE14F05AA2EC07E0A215C048130FA2EC1F80A21500143EA25C00785BA249
5A6C485A495A6C485A49C7FCEA07FCEA03F01F367DB424>18 D<1307D90FC01338011F14
7C16FC5CA2013F1301A202005BA2491303A2017E5CA201FE1307A2495CA20001140FA249
5C17800003021F13C016C149EC8180A20007EC3F836D017F130016034B5A3A0FFC03CF86
9039FE070F8E9039DFFE07FC9039C3F801F0D81FC0C9FCA25BA2123FA290CAFCA25AA212
7EA212FEA25A12382A327FA02E>22 D<123C127E12FFA4127E123C08087A8715>58
D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C121C5A5A1260
09177A8715>I<1530157815F8A215F01401A215E01403A215C01407A21580140FA21500
5CA2143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A2495AA291C7FC5BA213
1E133EA2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C8FC5AA2121E
123EA2123C127CA2127812F8A25A12601D4B7CB726>61 D<16035E5EA24C7EA2163F167F
A216FFA2ED01BFED033F831506161F150C1518A215301570156015C083EC01800203130F
15001406A25C141C14184A80A2027FB5FC91B6FCA2903901800007A249C7FC1306835B16
035B5B1370136013E01201D807F04A7EB549B512F0A25B34367DB53A>65
D<010FB5D8C03FB5FCA39026003FE0C713804B1500A24B5CA2027F14016092C7FCA24A14
03605CA201011507605CA20103150F605C91B7FC5B6002F0C7121FA2010F153F605CA201
1F157F95C7FC5CA2013F5D5F5CA2017F14015F91C7FCA24914035F5B00011507B5D8FC03
B512F0A340337DB240>72 D<010FB512F0A39026003FE0C7FC5DA25DA2147FA292C8FCA2
5CA25CA21301A25CA21303A25CA21307A25CA2130FA25C170C011F151C17185C1738013F
153017705C17E0137F160191C7EA03C0160749EC0F80161F49147F0001913803FF00B8FC
A25E2E337DB234>76 D<90260FFFE092380FFFC06161D9003FEFE0004F5A19DFDA33F05E
F0019F0273ED033F97C7FC02631506180C02E35EDAE1F8EC187E14C118300101EE60FE61
028115C0EF018001031681DA80FC90380301F81400170649ED0C0361010615181730010E
017E140705605B010C15C0A2011C913801800F610118EC030016060138013F141F4C5C01
305CA201704A133F96C8FC01605C6F5A01E05E4C137E000192C7FCD807F016FEB5D8801E
90387FFFFC151C150C4A337CB24A>I<90260FFFE049B5FCA281D9001F9138000FE04A6C
EC07801900DA33FC1406A2DA71FE140E180C146081DAE07F141C701318ECC03F82010116
386F6C133014806F7E010316706F6C136014001503496E13E003015C0106801500010EEC
FF0160010CEC7F81A2011CEC3FC395C7FC0118EC1FE3A20138EC0FF717F60130140717FE
017014035F01601401A213E0705A1201D807F01578B57E1730A240337DB23D>I<0003B8
12F05A18E0903AF0007F000FD80F8049130390C71401000E5C48EE00C01401121800384A
1301A2003001031580127000605CA20207140300E01700C74990C7FCA2140FA25DA2141F
A25DA2143FA25DA2147FA292C9FCA25CA25CA21301A25CA21303A25C497E001FB512FEA3
34337FB22D>84 D<B5D8F00FB590380FFFE061A2D807FCC7D87FC0903801FE00496E48EB
00F80003197062624F5AA24FC7FC167F19064C6C130E190CDB019F5C7FDB031F5C000114
0661030C15E06103184A5A153803304AC8FC1560EFE006DBC00F5BA29026FE01805C0000
EB0300600206157018604A5D141C0218ECE1805C05F3C9FC4A14F7EE07F66D4814FCA26D
485C91C7FC5F017E5DA2017C5D13785F137070CAFC4B357CB249>87
D<EB01F8EB07FE90381F071C90387C03FEEBF801EA01F00003130048485B5B120F381F80
015DEA3F00A21403485C127EA2140700FE5C5A1640020F1360EDC0E016C0127CEC1FC102
3F1380003CEB7F81003EEBEF833A1E01C7C300390F0787C73907FE03FE3900F800F82322
7EA029>97 D<ED01F815FFA216F01507A316E0A2150FA216C0A2151FA21680A2153FA2D9
01F81300EB07FE90381F077F90387C03FF496C5AEA01F000031300485A495B120F381F80
01A2D83F005BA214035A007E5CA2140712FE485C1640020F136016E0EDC0C0127CEC1FC1
023F1380003CEB7F81003EEBEF833A1E01C7C300390F0787C73907FE03FE3900F800F825
357EB328>100 D<ED0F80ED3FE0ED7870913801F0F815E31403A2020713F0A291380FC1
C0EDC000A4141F5DA4143F92C7FC011FB512805B1600D9007FC7FC147EA414FE5CA51301
5CA413035CA413075CA4130F5CA45C131FA291C8FC121CEA7F1E133EA2EAFE3C5B1278EA
70F0EA3FC0EA0F8025457CB425>102 D<EB07E0EA03FFA25CEA001FA35CA3133F91C8FC
A35B137EA313FE9038FC0FE0EC3FF8ECF07E3901FFC03FEC001F5B49148012035B5B153F
000715005BA25D000F147E5B15FE5D121FEB8001EDF808161C003F01031318010013F016
38020713304814E0007E1570020313E0EDE1C000FE903801E38048903800FF000038143C
26357DB32C>104 D<EB01C0EB07E014F0130F14E01307EB038090C7FCAA13F0EA03FCEA
071EEA0E1F121C123800301380EB3F00127012605BEAE07EEA40FE12005B12015BA21203
5B12071420EBE070000F136013C014E014C0EA1F80EA0F81EB8380EB8700EA078EEA03FC
EA00F014337EB11A>I<EB07E0EA03FFA25CEA001FA35CA3133F91C8FCA35B137EA313FE
49131FED7FC0EC01E0000190380383E09038F8070F140E141C0003013813C0EBF0709138
E00700D9F1C0C7FC3807F78001EEC8FC13FC7F380FFFE0EBC7F8EBC1FEEBC07E001F7F13
80ED8080ED81C0003FEC01801300A21503481500007EEB3E071506EC1F0E00FE5C48EB07
F80038EB03E023357DB328>107 D<D801E013FE3A07F803FF803A0E3E0F07E0001C9038
3C03F039181F7001003813E026303FC07F12700060138014001503D8E07F5CEA407E1200
150701FE5C5B150F5E120149131FEE8080EE81C00003023F13804914011603037F130000
07147E495CED3E0E5E000FEC1E3849EB0FF0D80380EB03C02A227EA02E>110
D<EB01FCEB0FFF90383E03C090387800E04913603901E001E014030003130713C013E0EC
03806DC7FC13FF14F014FC6C7F6C7F6D1380130F9038007FC0141F140F007E130700FE14
80A3EC0F005A00C0131E6C5B00705B383C01F0380FFFC0D803FEC7FC1B227CA024>115
D<90391F801F8090397FE07FE09039E0F0E0703A01C0F9C0F83903807D833807007F000E
1403000C15F0001C137E0018EC01C002FEC7FC00385B1210C7FC13015CA31303A25C1640
010714E016C0001C5B007E1401010F148000FE1403011FEB0700011B130E39F839F01C39
7070F878393FE07FE0390F801F8025227EA02C>120 D E /Fi 74
124 df<14FF010713E090381F80F090383E003849137C4913FC485A1203491378153092
C7FCA7157CB612FCA23803E000157CB3A5486C13FE3A7FFF0FFFE0A2232F7FAE27>12
D<13E0EA01F01203A2EA07E0EA0FC0EA1F00121E5A5A12E012400C0C72AD23>19
D<6C134038E001C0EAF807383E1F00EA1FFEEA07F86C5AEA00C0120878AA23>I<003C13
F0387E01F838FF03FCA2EB83FEA2EA7F81383D80F600011306A30003130EEB000CA24813
1C00061318000E13384813704813E0387001C00060138017157EAD23>34
D<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A
AD14>39 D<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F00A2121E
A35AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00F013
701338131C130E1307130310437AB11B>I<12C07E12707E7E7E120FEA0780120313C0EA
01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378A313F0
A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B>I<123C127EB4FCA2
1380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>44
D<B512C0A412047F9018>I<123C127E12FFA4127E123C08087A8714>I<EB3FC0EBFFF038
03E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500FC14F0B0007C14E0
A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800FFF0EB3FC01C2D
7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC14
F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A495A
495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FCA2
1C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F13
00A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015C0
140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB3F
00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01BE
1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E120C5A
123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB0180
380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F80
1F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E00060
14C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<EB
03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091C7
FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814E0
A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F003803
C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A215F05A15E03970
0001C000601480140348EB0700140E140CC7121C5C143014705C495AA2495AA249C7FCA2
5B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I<EB1FC0EBFFF03803E07C
3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480381FC00F01E01300EBF8
1E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380D81F0013C0001E13
3F48EB1FE0007C13070078EB03F012F84813011400A46C14E000781301007C14C0003C13
036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB23>I<EB3F80EBFFF038
03E0783807C03E48487E48487E003E14801407007E14C0127C00FC14E01403A315F0A500
7C1307127EA2003E130F7E6C131F3807803B3803E0F33800FFC390383F03E013001407A2
15C0A2140F001E1480003F14005C143E143C003E5B001C5B380E03E03807FF80D801FEC7
FC1C2D7DAB23>I<123C127E12FFA4127E123C1200AD123C127E12FFA4127E123C081D7A
9C14>I<EC3FF0903801FFFE903907C00F8090391E0001E00138EB007001F0143CD801C0
140E48488048C8EA0380000690380FC001000ED97FF013C03B1C01F03C00E0271803E00E
1360273807C00713703B300F800380303B701F0001F83800601618013E1300A200E0161C
4848150CA86C7E1260A26D0101131C0070161839300F8003393807C007271803E00E1338
3B1C01F03C7C703B0E007FF03FE0000690390FC00F80000790C9FC6C7E6C7ED800F0153C
0138EC01FC011EEC1FF0903A07C003FF800101B5EAF8009026003FFEC7FC2E307CAE37>
64 D<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FCA2EC70FEEC607EA24A7EA34948
6C7EA2010380EC000FA201066D7EA3496D7EA2011FB57EA29038180001496D7EA349147E
A201E0147F4980A20001ED1F801203000716C0D80FF0EC3FE0D8FFFC0103B5FCA2302F7E
AE35>I<B612FCEDFF803A03F8000FC00001EC03F06F7E6F7E82167E167FA6167E16FE5E
4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0ED01FC6F7E167F821780161F17C0
A61780163F17005E16FEED03FC0003EC0FF0B712C04BC7FC2A2D7DAC32>I<DA1FF013C0
9138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848141F4848140F4848
1407A248481403121F491401123F90C8FC481500A300FE1600AB127F17C0A27E7F001F15
016D1580120F6C6C1403EE07006C6C14066C6C140ED8007C5C013F147890390F8001E090
3903F00FC0902600FFFEC7FCEC1FF02A2F7CAD33>I<B612F815FF3A03F8001FE00001EC
03F0ED00F8167E82EE1F80160F17C0EE07E0A2EE03F0A217F81601A317FCAA17F8A3EE03
F0A217E0160717C0160FEE1F80EE3F00167E5EED03F00003EC1FE0B7128003F8C7FC2E2D
7DAC36>I<B712FEA23903F800010001EC003E828282A282A3178016011518A293C7FCA3
1538157815F890B5FCA2EBF800157815381518A21760A392C712C0A4160117801603A216
07160F163F0003913801FF00B8FCA22B2D7EAC30>I<B712FCA23903F800030001EC007C
163E161E160EA21606A3160716031518A21600A31538157815F890B5FCA2EBF800157815
381518A592C7FCAB487EB512F8A2282D7EAC2E>I<DA1FF013C09138FFFE01903903F00F
8390390F8001E3013FC71277017C143F4848141F4848140F48481407A248481403121F49
1401123F90C8FC481500A300FE1600A992381FFFFEA2007F9138001FE0EE0FC0A27E7F12
1F7F120F6C7EA26C7E6C6C141FEA007C013F143FD90F8013F3903903F007C10100B51200
DA1FF813002F2F7CAD37>I<B539F03FFFFCA2D803FCC713006C48147EB290B612FEA201
F8C7127EB3486C14FFB5D8F03F13FCA22E2D7DAC35>I<B512F0A23803FC006C5AB3B3A3
487EB512F0A2142D7EAC19>I<90387FFFF0A201001300147EB3AD123812FEA314FE5C12
78387001F86C485A381E07E03807FF80D801FCC7FC1C2E7DAC24>I<B500F0EB7FFEA2D8
03FCC7EA1FF06C48EC0FC01700161E16385E5E4B5A4B5A4BC7FC150E5D5D15F0EC01C04A
5A4A7E4A7E141F4A7EEC73F8ECE1FCEBF9C09038FF80FE9038FE007F497F49806F7E6F7E
1507826F7E6F7EA26F7E167F821780EE1FC017E0486CEC3FF0B5D8F001B5FCA2302D7DAC
37>I<B512F8A2D803FCC8FC6C5AB3A7160CA41618A41638A2167816F81501ED07F00003
141FB7FCA2262D7EAC2C>I<D8FFF8923807FFC06D5D0003EFF00000015F01BE151BA201
9F1533A3D98F801463A2D987C014C3A2D983E0EB0183A3D981F0EB0303A2D980F81306A3
027C130CA26E1318A36E1330A291380F8060A2913807C0C0A3913803E180A2913801F300
A3EC00FEA2157C487ED80FF04B7EB5D93801B512C0A23A2D7DAC41>I<D8FFF8903803FF
FC7F00019138003FC06DEC0F006D1406EBBF80A2EB9FC0EB8FE0138780EB83F8138180EB
80FE147E147FEC3F80EC1FC0140F15E0EC07F0140315F8EC01FC140015FE157FED3F8615
1F16C6ED0FE6150716F6ED03FE1501A21500167E163EA2486C141ED80FF0140EB5FC1606
2E2D7DAC35>I<B612C015FC3903F8007F0001EC0FC06F7E6F7E6F7E82150082A55E1501
5E4B5A4B5A4B5A037FC7FC90B512FC15F09038F800FC153E6F7E150F826F7EA582A51703
16F815031707486C903801FC0EB539F000FE1CEE3FF8C9EA07E0302E7DAC34>82
D<90383F80303901FFF0703807C07C390F000EF0001E13074813034813011400127000F0
1470A315307EA26C1400127E127FEA3FE013FE381FFFE06C13FC6C13FF00011480D8003F
13E013039038003FF0EC07F81401140015FC157C12C0153CA37EA215787E6C14706C14F0
6CEB01E039F78003C039E3F00F0038E07FFE38C00FF01E2F7CAD27>I<007FB712F8A290
39000FC003007C150000701638A200601618A200E0161CA248160CA5C71500B3A94A7E01
1FB512E0A22E2D7EAC33>I<B539F003FFFCA2D803FCC7EA3FC06C48EC0F001606B3AB16
0E0000150C7F161C017C1418017E14386D5C6D146090390F8001E0903907E00380902601
F80FC7FC9038007FFCEC0FF02E2E7DAC35>I<B53C801FFFF001FFF8A22707FC000190C7
EA3FC0D803F06D48EC1F00047E140EA26C6C027F140CA26D171C0000DBDF801318A26D17
38017E9026018FC01330A2017F17706D90260307E01360A2028016E0011F90260603F05B
A202C01501010F90260C01F85BA202E01503010790261800FC90C7FCA202F05D010349EB
7E06A202F8150E010149EB3F0CA202FC151C010049EB1F98A202FE15B8DA7F80EB0FF0A2
023F5D92C71207A26E5D021E1403A2020E5D020C1401452E7FAC48>87
D<3B7FFFE003FFF8A2000390C713806C48EC7E000000157C017F14786D14706E5B6D6C5B
6D6C485A15036D6C48C7FC903803F80601015BECFC1C6D6C5AEC7F305DEC3FE06E5A140F
816E7E81140DEC1DFCEC38FEEC307F14609138E03F8049486C7EEC800FD903007F496D7E
010E6D7E130C011C6D7E496D7E49147E167F01F0EC3F80000316C0D80FF8EC7FE0D8FFFE
0103B5FCA2302D7EAC35>I<B500C090380FFFC0A2D807FEC73801FE006C48EC00F80001
16E06C6C5D1601017F4A5A6D6C91C7FC5E6D6C130E6D6C130C5E6D6C13386D6C13305E6D
6C13E06D6C5B4B5AEC7F03DA3F83C8FC1586EC1FCEEC0FEC15F814076E5AB04A7E49B512
C0A2322D7FAC35>I<003FB612C0A29038F0001F0180EB3F80003EC7EA7F00123C003814
FE4A5A5A4A5A4A5A12604A5A4A5AA2C7485A4AC7FCA214FE495AA2495A5C1307495AA249
5A495A166049C7FC13FEA2485A484814E0A2485A484814C01501485A48481303150748C7
121F00FE14FFB7FCA2232D7CAC2B>I<EAFFE0A3EAE000B3B3B3A7EAFFE0A30B4379B114>
I<0003130C48131C000E13384813704813E0003013C0EA700100601380A2EAE00300C013
00A300DE137800FF13FCEB83FEA2EA7F81A2383F00FC001E1378171577AD23>I<EAFFE0
A31200B3B3B3A712FFA30B437FB114>I<12035A120E5A5A123012701260A212E05AA312
DEB4FC1380A2127FA2EA3F00121E09157BAD14>96 D<13FF000713C0380F01F0381C00F8
003F137C80A2143F001E7FC7FCA4EB07FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F0012
7E00FE14065AA3143F7E007E137F007FEBEF8C391F83C7FC390FFF03F83901FC01E01F20
7D9E23>I<EA07C012FFA2120F1207AC14FE9038C7FF809038CF03E09038DC01F09038F8
007C49137E49133E497F1680A2150F16C0A9ED1F80A216005D6D133E6D5B01B05B9038BC
01F090380E07E0390607FF80260001FCC7FC222F7EAD27>I<EB1FE0EB7FFC3801F01E38
03E0073907C01F80EA0F80EA1F005A003EEB0F00007E90C7FCA2127C12FCA9127EA215C0
7E6C130101801380380FC0033907E007003801F03E38007FF8EB1FC01A207E9E1F>I<15
F8141FA214011400ACEB0FE0EB7FF83801F81E3803E0073807C003380F8001EA1F004813
00123E127EA25AA9127C127EA2003E13017EEB8003000F13073903E00EFC3A01F03CFFC0
38007FF090391FC0F800222F7EAD27>I<EB1F80EBFFF03803E0783807C03E380F801E38
1F001FEC0F80123E007E130715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14C0123F
6C1301390F80038001C013003803E00F3801F03C38007FF8EB1FC01A207E9E1F>I<EB03
F0EB0FFCEB3E1EEB7C3F13F8EA01F0A23803E00C1400AAB512E0A23803E000B3A6487E38
7FFF80A2182F7FAE16>I<013F13F89038FFC3FE3903E1FF1E3807807C000F140C391F00
3E00A2003E7FA76C133EA26C6C5A00071378380FE1F0380CFFC0D81C3FC7FC90C8FCA312
1E121F380FFFF814FF6C14C04814F0391E0007F848130048147C12F848143CA46C147C00
7C14F86CEB01F06CEB03E03907E01F803901FFFE0038003FF01F2D7E9D23>I<EA07C012
FFA2120F1207AC14FE9038C3FF809038C703E09038DE01F013F8496C7EA25BA25BB2486C
487E3AFFFE1FFFC0A2222E7EAD27>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCA8EA
07C012FFA2120F1207B3A5EA0FE0EAFFFCA20E2E7EAD14>I<130FEB1F80EB3FC0A4EB1F
80EB0F0090C7FCA8EB07C013FFA2130F1307B3AD1230127838FC0F80A21400485AEA783E
EA3FF8EA07E0123C83AD16>I<EA07C012FFA2120F1207ADEC1FFEA2EC0FF0EC07C05D02
0EC7FC5C5C5C5CEBC3C013C7EBCFE0EBDFF013F9EBF0F8497EEBC07E143E80816E7E1407
6E7E816E7E486C487E3AFFFE07FF80A2212E7EAD25>I<EA07C012FFA2120F1207B3B3A3
EA0FE0EAFFFEA20F2E7EAD14>I<2607C07FEB07F03BFFC3FFC03FFC903AC783F0783F3C
0FCE01F8E01F803B07DC00F9C00F01F8D9FF8013C04990387F000749137EA249137CB248
6C01FEEB0FE03CFFFE0FFFE0FFFEA2371E7E9D3C>I<3807C0FE39FFC3FF809038C703E0
390FDE01F0EA07F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A2221E7E9D27>I<EB1F
E0EB7FF83801F03E3803C00F3907800780390F0003C04814E0003EEB01F0A248EB00F8A3
00FC14FCA9007C14F8A26CEB01F0A26CEB03E0A2390F8007C03907C00F803901F03E0038
007FF8EB1FE01E207E9E23>I<3807C0FE39FFC7FF809038CF03E0390FDC01F03907F800
FC49137E49133E49133FED1F80A3ED0FC0A8151F1680A2ED3F00A26D137E6D137C5D9038
FC01F09038CE07E09038C7FF80D9C1FCC7FC01C0C8FCA9487EEAFFFEA2222B7E9D27>I<
380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF01EEBE000A45BB0487EB5FCA2181E7E
9D1C>114 D<3801FE183807FFB8381E01F8EA3C00481378481338A21418A27E7EB41300
EA7FF06CB4FC6C13C06C13F0000113F838001FFC130138C0007E143EA26C131EA27EA26C
133CA26C137838FF01F038E3FFC000C0130017207E9E1C>I<1360A413E0A312011203A2
1207121FB512F0A23803E000AF1418A714383801F03014703800F860EB3FE0EB0F80152A
7FA81B>I<D807C013F800FF131FA2000F130100071300B21401A314033803E007EC0EFC
3A01F81CFFC038007FF890391FE0F800221F7E9D27>I<3AFFFC01FFC0A23A0FE0007E00
0007147C15380003143015706C6C1360A26C6C5BA390387C0180A26D48C7FCA2EB3F07EB
1F06A2EB0F8CA214DCEB07D8A2EB03F0A36D5AA26D5A221E7F9C25>I<3BFFFC3FFE07FF
A23B0FE003F001F801C09038E000F00007010114E0812603E00314C0A2913807F8012701
F006781380A29039F80E7C030000D90C3C1300A290397C181E06A2151F6D486C5AA2168C
90391F600798A216D890390FC003F0A36D486C5AA36DC75A301E7F9C33>I<3AFFFC07FF
80A23A0FF003FC000003EB01F0000114C06D485A000091C7FCEB7C06EB3E0E6D5A14B8EB
0FB0EB07E013036D7E497E1307EB067C497EEB1C1F01387FEB700F496C7E6E7ED803C07F
00076D7E391FE003FC3AFFF007FFC0A2221D7F9C25>I<3AFFFC01FFC0A23A0FE0007E00
0007147C1538000314306D137000011460A26C6C5BA2EBFC01017C5BEB7E03013E90C7FC
A2EB1F06A2148EEB0F8CA2EB07D8A2EB03F0A36D5AA26D5AA2495AA2130391C8FC1278EA
FC06A25B131CEA7838EA7070EA3FE0EA0F80222B7F9C25>I<003FB51280A2EB003F003C
14000038137E00305BEA700100605B495A495A130F00005B495A49C7FC5B137E9038FC01
80EA01F8120313F03807E003EA0FC0001F1400138048485A007E5B00FE133FB6FCA2191D
7E9C1F>I<B712C0A22202809223>I E /Fj 29 123 df<B512FCA516057E941F>45
D<121C127FEAFF80A5EA7F00121C090977881B>I<150EA3151FA24B7EA34B7EA3EDDFE0
A202017F158FA29138030FF81507A202067F1503020E7FEC0C01A2021C7FEC1800A24A80
167FA24A6D7EA202E0804A131FA2494880160FA249B67EA249810106C71203A249811601
A2498182A2496F7EA20170820160153F13E06D821203D80FFCED7FF8B56C010FB512E0A3
3B3C7CBB44>65 D<DB7FC01330912607FFF81370023F13FE913AFFC01F80F0903A03FE00
03E1D907F8EB00F3D91FE0147B4948143F4948141F49C8120F4848150748481503A24848
150148481500A2485A1870123F5B1830127FA349160012FFAB127F7F1830A2123FA27F00
1F177018606C7E18E06C6C16C06C6C150118806C6C15036C6CED07006D6C5C6D6C141E6D
6C5CD907F85CD903FEEB01E0903A00FFC00FC0023FB5C7FC020713FC9138007FE0343D7A
BA41>67 D<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397CB822>73
D<B5933801FFFE6E5DA2000119002600DFC0ED06FEA2D9CFE0150CA3D9C7F01518A2D9C3
F81530A3D9C1FC1560A2D9C0FE15C0A3027FEC0180A26E6CEB0300A36E6C1306A26E6C5B
A26E6C5BA36E6C5BA26E6C5BA36E6C5BA292387F0180A3DB3F83C7FCA2ED1FC6A3ED0FEC
A2ED07F8A3486C6D5A487ED80FFC6D48497EB500C092B512FEA26F5A47397BB852>77
D<B712F816FF17E0C69039C0003FF86D48EB07FCEE01FE707EEF7F80EF3FC0A2EF1FE0A2
18F0A718E0A2EF3FC0A2EF7F80EFFF004C5AEE07F8EE3FF091B612C04CC7FC0280C9FCB3
A5497EB612C0A334397DB83E>80 D<B7FC16F016FE000190398001FF806C90C7EA3FE0EE
0FF0707E707E707EA2838284A695C7FC5E5F5F1603EE07F04C5AEE3F80DB01FEC8FC91B5
12F816E091380003FCED00FEEE7F80707E707E707EA2160783A583A61930A28316031970
486D6D6C1360B66D14E094387F81C094383FC380CA380FFF00EF01FC3C3B7CB842>82
D<003FB812FCA3D9C001EB800390C790C7FC007C173E0078171E0070170EA300601706A4
00E01707481703A4C81500B3B0020313C0010FB612F0A338397CB841>84
D<B500FE91380FFFF8A3000301C0020113806C90C9EA7E006C173C6E1538017F1630A26E
1570013F166080011F5EA26E1401010F5E8001074BC7FCA26E5C010315068001015DA26D
6C5CA281027F5CA26E6C5BA281021F5C81020F495AA215F8020749C8FC15FC02031306A2
EDFE0E0201130C15FF6E5BA216B8ED7FB016F06F5AA36F5AA26F5AA36FC9FCA23D3B7DB8
44>86 D<003FB712E0A301FCC7EA7FC013E00180ECFF8090C7481300123E003C4A5A0038
4A5A127800704A5A4B5AA24B5A0060147F5E4B5A5CC791C7FC4A5AA24A5A4A5AA24A5A4A
5AA24A5A4A5AA24990C8FC495AA2495A49481430A2495A133F5C495A01FF15705C4890C8
FCA2484815F0484815E0A2484814014848140316074848140F4848143FED01FFB8FCA32C
397AB838>90 D<1407A24A7EA34A7EA3EC37E0A2EC77F01463A2ECC1F8A201017F1480A2
903803007EA301067FA2010E80010C131FA2496D7EA2013FB57EA29038300007496D7EA3
496D7EA200018149130012036D801207D81FE0903801FF80D8FFF8010F13F8A22D2C7DAB
33>97 D<91383FC006903901FFF80E90390FE03E1E90381F0007017EEB03BE01F8EB01FE
484813004848147E0007153E485A001F151E5B003F150E90C8FC5A1606A212FE1600AA00
7F1506A37E6D140E001F150C7F000F151C6C6C1418000315386C6C14706C6C14E0017EEB
01C0011FEB078090390FE03E00903801FFF89038003FC0272D7BAB31>99
D<B612F015FE3907F8007F6C48EB0FC0ED03E06F7E6F7E167C167E82A2EE1F80A217C016
0FA317E0AA17C0A3EE1F80A217005E163E5E16FC4B5A4B5AED0FC0486CEB7F80B600FEC7
FC15F02B2B7CAA34>I<B712E0A23907F8000F6C481303ED00F01670A21630A41618A215
C01600A31401A2140790B5FCA2EBF0071401A21400A21606A21500A2160CA4161CA2163C
167C16F8486C1307B7FCA2272B7CAA2E>I<B712C0A23907F8001F6C481303ED01E01500
A21660A41630A215C01600A31401A2140790B5FCA2EBF0071401A21400A492C7FCAB487E
B512E0A2242B7CAA2C>I<91383FE003903901FFF807903907E01E0F90391F00078F017E
EB01DF496DB4FC484880484880484880485A001F815B003F8190C8FC5A82A212FE93C7FC
A892383FFFF8A2007F02001380EE3F00A27E7F121F7F120F6C7E6C7E6C6C5C6C7E017E5C
011FEB01CF903907E00F87903901FFFE039026003FF0C7FC2D2D7BAB35>I<B512C0A238
07F8006C5AB3B3487EB512C0A2122B7CAA19>105 D<B500C0EBFFF8A2D807F8C7EA7FC0
6C481500167C167816E04B5A4B5A4BC7FC150E5D5D15F0EC01C04A5A4AC8FC5C4A7E4A7E
4A7EEBF1E79038F387F09038F703F89038FE01FC13FC496C7E49137F6F7EA26F7E6F7E15
07826F7E6F7EA26F7E82EE7F80486CECFFC0B5D8C00313FCA22E2B7CAA35>107
D<B512E0A2D807F8C8FC6C5AB3A61660A416C0A31501A21503A21507ED1F80486C13FFB7
FCA2232B7CAA2B>I<D8FFF0ED3FFC6D157F0007178000031700017C15DFA26DEC019FA3
6DEC031FA26D6C1306A36D6C130CA26D6C1318A26D6C1330A36D6C1360A2027C13C0A391
383E0180A291381F0300A3EC0F86A2EC07CCA3EC03F8A2486C6C5AA2D81FE0ED3F803CFF
FC00E007FFFCA2362B7CAA3E>I<D8FFF0903807FFE07F0007020013006C6C143C7F017F
14187F806D7E130F806D7E6D7EA26D7E6D7E147E147FEC3F80141F15C0EC0FE0EC07F014
0315F8EC01FC140015FE157FED3F98151F16D8ED0FF81507A215031501A2486C13001678
D81FE01438EAFFFC16182B2B7CAA33>I<EC7FC0903803FFF890380FC07E90393F001F80
017CEB07C04848EB03F048486D7E4913004848147C000F157E484880A248C8EA1F80A248
16C0A2007E150FA200FE16E0AA007FED1FC0A36C16806D143F001F1600A26C6C147E6C6C
5CA26C6C495A6C6C495AD8007CEB07C0013FEB1F8090260FC07EC7FC903803FFF8903800
7FC02B2D7BAB35>I<B67E15F03907F800FE6C48133FED0FC06F7EA26F7E82A65E4B5AA2
4B5A033FC7FC15FE90B512F05D9038F001F8EC007E816F7EA26F7EA582A4171816F01507
1738486C903803F830B5D8C00113709238007FE0C9EA1F802D2C7CAA32>114
D<017F13603901FFE0E0380780F9380E001F48130748130312780070130100F01300A315
607EA26C14007E127F13C0EA3FFEEBFFE06C13F8000713FE6C7FC61480010F13C01300EC
0FE01407EC03F01401A212C01400A37E15E06C1301A26CEB03C06CEB0780B4EB0F0038F3
E01E38E0FFF838C01FE01C2D7BAB26>I<007FB712C0A23A7E003FC00F007890381F8003
007015011600126000E016E0A2481660A5C71500B3A8EC7FE0011FB57EA22B2B7DAA31>
I<B539C007FFE0A2D807F8C713006C48143CA21618B3A916386C6C1430A2000015706D5C
017C5C6D13016D495A90260F800FC7FC903803E03C903800FFF8EC3FC02B2C7CAA33>I<
B5903B7FFF800FFF80A2D80FF8903B07FC0003FC006C486D486D5A725A000302015DA26C
6C8061A26C6C496C495A167EA2017ED9077F49C7FCED063FA26D010EEB8006ED0C1FA26D
6C486C6C5AA36D6C486C6C5AA36D6C486C6C5AA21870903B03F0C001F860A202F815E090
3B01F98000FCC0A202FD14FD6DB4C7EA7F80A3027E6EC8FCA3023C141EA30218140C412C
7EAA45>119 D<003FB6FCA29038E0007F90C712FE003E495A123C0038495A48495AA24A
5A00605C141F4A5AA2C748C7FC14FEA2495A495AA2495A5C130F495AA2495A49C8FCED01
8013FE485AA2485A4913031207485AED0700485A48485B5D48C75A00FE49B4FCB7FCA221
2B7BAA2A>122 D E /Fk 32 123 df<147014F0EB03E0EB07C0EB0F80131FEB3F00133E
137E5B485AA2485AA212075B120FA2485AA3485AA3127FA390C7FCA35AAF7EA37FA3123F
A36C7EA36C7EA212077F1203A26C7EA26C7E137E133E133FEB1F80130FEB07C0EB03E0EB
00F01470144B78B722>40 D<12E07E127C7E7E7F6C7E12077F6C7E6C7EA26C7EA27F137E
137FA2EB3F80A3EB1FC0A314E0A3130FA314F0AF14E0A3131FA314C0A3EB3F80A3EB7F00
A2137E13FE5BA2485AA2485A485A5B120F485A90C7FC123E5A12F05A144B7BB722>I<12
0FEA3FC0EA7FE0EAFFF0A213F8A4127F123FEA0F3812001378A21370A213F013E01201EA
03C0A2EA0780EA0F00121E5A12180D1B7A8B19>44 D<B512FCA816087F931D>I<120FEA
3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F000C0C7A8B19>I<DBFFE01338021F01FE1378
91B6EA80F8010315E1010F9038E00FF7903A1FFE0001FFD97FF8EB007FD9FFE0143F4849
141F4849140F4890C81207485A1703485A1701123F5B007F1600A349160012FFAB127F7F
1878A2123F7F001F17F818F06C7E6D15016CEE03E06C7F6C6DEC07C06C6DEC0F80D97FF8
EC3F00D91FFE14FE903A0FFFE007FC010390B512F0010015C0021F49C7FC020013F03535
7BB340>67 D<B6D8E01FB512FCA4C601E0C7381FFC00B291B7FCA402E0C7121FB3A3B6D8
E01FB512FCA43E337DB245>72 D<B612E0A4C6EBE000B3B3A7B612E0A41B337DB221>I<
003FB812F8A4D9F003EB801FD87F80ED03FC01001501007E1600007C177CA20078173CA4
00F8173E48171EA4C71600B3A9011FB612F0A437327DB13E>84 D<003FB712E0A4DA0003
13C001F849138001E05B0180150090C7485A153F007E5D4B5A007C14FF5E4A5B00785B4A
5B5E4A90C7FCC75A5D4A5A147F5D4A5A5B5D495B5B5D4990C712F05B5C495A137F494813
015C485B5A4A1303484914E048150791C7120F4848141F003F153F4914FF48481307B8FC
A42C337BB236>90 D<EB7FFE0003B512E04814F8390FF00FFC391FF803FF806E138016C0
157F6C5A6C5AEA0180C8FCEC7FFF010FB5FC90B6FC0003EBF07F000F1300EA1FF8485A48
5A485A5BA315FF7F007F5B6D4813E03A3FF80FBFFF000FB5121F0003EBFC0F39007FE007
28217EA02B>97 D<EA01FC12FFA4120F1207ADEC07FC91387FFF8001FDB512E09039FFF0
0FF89138C007FC91380003FE496D7E496D1380A217C0167FA217E0A917C0A216FF1780A2
6D4913006D495A9138C007FC9039F3F01FF801E1B512E0D9C07F13809026800FF8C7FC2B
347EB331>I<903807FF80013F13F090B512FC3903FE01FE4848487EEA0FF8EA1FF0EA3F
E0A2007F6D5A496C5A153000FF91C7FCA9127F7FA2003FEC07807F6C6C130F000FEC1F00
D807FE133E3903FF80FCC6EBFFF8013F13E0010790C7FC21217DA027>I<ED01FC15FFA4
150F1507ADEB07FE90383FFFC790B512F70003EB01FF3907FC003F4848131F4848130F48
481307A2127F5BA212FFA9127FA27F123F150F6C6C131F6C6C133F6C6C497E2603FE03B5
12E0C6B512E7013F1387903807FC072B347DB331>I<903803FF80013F13F090B512FC48
EB03FE3907FC007F4848EB3F804848EB1FC05B003FEC0FE0127F5B16F012FF150790B6FC
A301C0C8FCA4127F7F123F16F06C7E000F14016C6CEB03E0D803FEEB0FC03A01FF807F80
6C6CB51200011F13FC010313E024217EA029>I<EC3FE0903803FFF8010F13FC90383FF1
FE90387FC3FFEBFF83481303A2EA03FEEC01FEA2EC00781500A7B512FEA4D803FEC7FCB3
A7387FFFF8A420347EB31B>I<16F890390FFC07FE90387FFF9F48B6127F3907FC0FFC38
0FF003001F14FED9E001133E003FECFF1C1600A6001F5CEBF003000F5C3907FC0FF890B5
12E0486C1380D90FFCC7FC48C9FCA37F7F90B512F015FE6CECFF8016E06C15F06C15F848
15FC121F393F80001F48C7EA03FE481401481400A46C14016C6CEB03FC6C6CEB07F86C6C
EB0FF0D80FFCEB7FE00003B61280C6ECFE00010F13E028327EA12C>I<EA01FC12FFA412
0F1207ADEC03FF020F13C0023F13F09138FC0FF89039FDE007FCEBFFC04A6C7E1400A25B
A25BB2B539E07FFFF0A42C347DB331>I<EA03F0487E487E487EA66C5A6C5A6C5AC8FCA8
EA01FC12FFA4120F1207B3A5B512C0A412357DB418>I<EA01FC12FFA4120F1207B3B3A6
B512E0A413347DB318>108 D<2703F803FEEB03FE00FF903B1FFFC01FFFC0027FD9E07F
7F913BF81FF0F81FF0903CF9E00FF9E00FF8260FFBC0EBFBC06CB4486CB4486C7E020014
00495CA3495CB2B500E0B500E0B512E0A443217CA04A>I<3901F803FF00FF010F13C002
3F13F09138FC0FF89039F9E007FC380FFBC06CB4486C7E1400A25BA25BB2B539E07FFFF0
A42C217DA031>I<903803FF80011F13F090B512FE48EB01FF3A07FC007FC0D80FF0EB1F
E0001F15F049130F003F15F8491307007F15FCA300FF15FEA8007F15FCA26D130F003F15
F8001F15F06D131F6C6CEB3FE06C6CEB7FC03A01FF01FF006CEBFFFE013F13F801031380
27217EA02C>I<3901FC07FC00FF90387FFF8001FDB512E09039FFF01FF89138C007FC00
0790380003FE4980496D1380A26F13C0A3EE7FE0A9EEFFC0A34B1380A26D4913006D495A
9138C00FFC9138F03FF801FDB512E0D9FC7F1380DA0FF8C7FC91C9FCABB512E0A42B307E
A031>I<3901F81F8000FFEB7FF0ECFFF89038F9E3FC9038FBC7FE380FFF876C1307A213
FEEC03FCEC01F8EC0060491300B1B512F0A41F217EA024>114 D<9038FFE1C0000713FF
5A383F803F387E000F14075A14037EA26C6CC7FC13FCEBFFE06C13FC806CEBFF80000F14
C06C14E0C6FC010F13F0EB007F140F00F0130714037EA26C14E06C13076CEB0FC09038C0
1F8090B5120000F913FC38E03FE01C217DA023>I<133CA5137CA313FCA21201A2120312
07001FB51280B6FCA3D807FCC7FCB0EC03C0A79038FE078012033901FF0F006C13FEEB3F
FCEB0FF01A2F7EAE22>I<D801FC14FE00FF147FA4000F140700071403B21507A2150F15
1F6C6C497E6C6C01FB13F06CEBFFF3013F13C3903807FE032C217DA031>I<B539C007FF
C0A4D807FEC7EAF80000035D6D13016C5D14806C4A5AA2ECC007017F5CECE00F013F91C7
FC6E5A011F131EECF83E010F133CECFC7C01071378ECFEF801035B14FF6D5BA26D5BA26E
5AA26EC8FCA2141E2A217EA02F>I<B53B83FFFC03FFE0A43D07FC001FE0003E00183C6D
167C00036F1378033F14F86C6C6E5B157F9139807BFC016C5FDAC0FB1303017FD9F1FE5B
14C19139E1E0FF07013F5E9139F3C07F0F011F038FC7FC14F7903A0FFF803FDEA2923800
1FFE6D5DA26D486D5AA24A130701015DA26D486D5A4A13013B217EA040>I<B539C007FF
C0A4D807FEC7EAF80000035D6D13016C5D14806C4A5AA2ECC007017F5CECE00F013F91C7
FC6E5A011F131EECF83E010F133CECFC7C01071378ECFEF801035B14FF6D5BA26D5BA26E
5AA26EC8FCA2141EA25CA2147C003E1378007F13F8486C5A1381EB83E0EB87C0495AD87F
3FC9FCEA3FFEEA1FF8EA07E02A307EA02F>121 D<001FB6FCA39038E007FE9038800FFC
EB001F001EEB3FF8003E14F0EC7FE0003C13FF4913C01580491300C65A495A495A5C133F
90387FF00FEBFFE014C04813805A48EB001F5B4848131E001F143E4848137E4913FE387F
E003B6FCA320217EA027>I E /Fl 7 117 df<17F816011603160783160F161FA2163F16
7F8316FF5DA2ED03EF150716CF030F7FED1F8F1607153F153E157C03FC8015F8EC01F002
037F15E0EC07C0140F038080EC1F004A7F143E5C91B7FC845B5B02E0C7FC495A130F5C01
1F8249C8FC013E157F137E5B1203B500E0013FB512E0804A5B823B357CB443>65
D<EC3FC0903801FFF00107EBFCF090391FE07FFC90387FC01F9038FF800F481300485A48
485C120F5B001F141F5E485AA2153F007F5D5BA2157F5E485AEEC1E015FF007F158317C0
A24A1387003F168014076C6C48EB8F003A0FF03F7F9F3A07FFFE3FFE00019038F80FFC3A
003FC003F02B237EA131>97 D<EB1FC03807FFE05A5CA2C6FCA25CA25AA291C8FCA25AA2
5BA21207EC3FC09038FDFFF090B512FC48EBC0FFEC007F49148049EB3FC0485AA24914E0
A2003F147FA25BA2007F14FF16C05BA25C1680EAFF80A24A13005D127F4A5A4A5A5D003F
495A6C6C485A6C6CB45A6CB448C7FC000113F838007FC023357DB328>I<EC3FE0903801
FFFC010F7F90383FF01F90397FC00F803901FF003F4848EB7FC0485A000FECFF805B121F
48481400153C484890C7FCA312FF5BA45BA4ED018016C0007FEC03E0ED0FC06C6CEB1F80
6C6CEB7F00390FF007FC6CB512F0000114C026003FFCC7FC23237DA128>I<D801F8137F
3A03FF01FFC0000F018713E090393FCF81F0391E1FFE019138FC07F8003CEBF80FEB3FF0
007CEC1FF0007813E0A200F8EC0FE0017FEB0780000049C7FCA313FF5CA35A91C8FCA35A
5BA312075BA35B5BEA01E025237EA129>114 D<EC7F80903803FFF0010F13FC90381F80
7E90383F003E017E137F4913FFA20001EB01FEA39038FE00F89038FFF00014FF15C015F0
6C14F86D13FC7F010F13FE1300000E1307383F8001127F00FFEB00FCA3EC01F8130000FC
EB03F0007CEB07E0397F803FC0001FB51200000713FCC613E020237CA129>I<EB01E0EB
07F8A2130FA2131FA25CA2133FA25CA2137FA2B6128015C0A21580C6EB8000A25AA291C7
FCA25AA25BA21207A25BA2120FA25BEC01E0001F130315C0EBF0071580140FEC1F00EBE0
3E6D5A000F5B6CB45A000113C06C6CC7FC1B317EAF20>I E /Fm
73 125 df<91393FE00FE0903A01FFF83FF8903A07E01EF83C903A1F800FF07E903A3F00
1FE0FE017E133F4914C0485A1738484890381F8000ACB812C0A33B03F0001F8000B3A748
6C497EB50083B5FCA32F357FB42D>11 D<EC1FE0ECFFFC903803F01E90390FC00780EB1F
8090393F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F150FB3
A6486CEB1FE0267FFFC1B5FCA328357FB42B>I<EC1FF891B512C0903803F00F90380FC0
1FEB1F80EB3F00137E5B150F485AACB7FCA33901F8000FB3A7486CEB1FE0267FFFE3B5FC
A328357FB42B>I<EA07C0EA1FF0EA3018EA600CEAC006A5EA600CEA3018EA1FF0EA07C0
0F0D6BB53A>23 D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E12
0C121C5A5A126009177AB315>39 D<14C01301EB0380EB0F00130E5B133C5B5BA2485A48
5AA212075B120F90C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121F
A27E7F12077F1203A26C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>
I<12C07E1270123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E13
1FA37F1480A5EB07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A48
5AA2485A48C7FC120E5A123C12705A5A124A7CB71E>I<130E131FA639700E01C000F8EB
03E000FE130F00FF131F397F8E3FC0391FEEFF003803FFF8C613E0EB3F80A2EBFFE00003
13F8381FEEFF397F8E3FC039FF0E1FE000FE130F00F813030070EB01C0D8001FC7FCA613
0E1B207BB726>I<156015F0B3A4007FB812C0B912E0A26C17C0C800F0C8FCB3A4156033
327CAB3C>I<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C12
1C5A5A126009177A8715>I<B512F0A514057F921A>I<123C127E12FFA4127E123C08087A
8715>I<1530157815F8A215F01401A215E01403A215C01407A21580140FA215005CA214
3EA2143C147CA2147814F8A25C1301A25C1303A25C1307A2495AA291C7FC5BA2131E133E
A2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C8FC5AA2121E123EA2
123C127CA2127812F8A25A12601D4B7CB726>I<EB0FE0EB7FFCEBF83E3903E00F803907
C007C0EB8003000F14E0391F0001F0A24814F8A2003E1300007E14FCA500FE14FEB2007E
14FCA56CEB01F8A36C14F0A2390F8003E03907C007C0A23903E00F803900F83E00EB7FFC
EB0FE01F347DB126>I<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A2497E007FB5
1280A319327AB126>I<EB3FC0EBFFF0000313FC380F80FF391E007F80001CEB3FC048EB
1FE048130F15F00060130712FC6C14F87E1403A3007E1307123CC7FC15F0A2140F15E0EC
1FC0A2EC3F801500147E5C495A5C495A495A495A49C7FC133E133C4913185B485A484813
30485A48C7FC001C1470001FB512F05A5AB612E0A31D327CB126>I<EB1FE0EBFFFC4813
FF3907E03F80390F001FC0001EEB0FE0001CEB07F0123F018013F8140313C01380A2381F
0007C7FC15F0A2EC0FE015C0141FEC3F80EC7E00EB01F8EB7FE014FCEB003FEC1FC0EC0F
E0EC07F015F8140315FC140115FEA3127EB4FCA415FC48130312780070EB07F86C14F000
3C130F001FEB1FE0390FE03F800003B51200C613FCEB1FE01F347DB126>I<EC01C0A214
031407A2140F141FA2143F147F146F14CF1301EB038F140F1307130E130C131C13381330
137013E013C0EA0180120313001206120E120C5A123812305A12E0B71280A3C7380FC000
A94A7E0107B51280A321337EB226>I<000C14C0380FC00F90B5128015005C5C14F014C0
D80C18C7FC90C8FCA9EB0FC0EB7FF8EBF07C380FC03F9038001F80EC0FC0120E000CEB07
E0A2C713F01403A215F8A41218127E12FEA315F0140712F8006014E01270EC0FC06C131F
003C14806CEB7F00380F80FE3807FFF8000113E038003F801D347CB126>I<14FE903807
FF80011F13E090383F00F0017C13703901F801F8EBF003EA03E01207EA0FC0EC01F04848
C7FCA248C8FCA35A127EEB07F0EB1FFC38FE381F9038700F809038E007C039FFC003E001
8013F0EC01F8130015FC1400A24814FEA5127EA4127F6C14FCA26C1301018013F8000F14
F0EBC0030007EB07E03903E00FC03901F81F806CB51200EB3FFCEB0FE01F347DB126>I<
1230123C003FB6FCA34814FEA215FC0070C7123800601430157015E04814C01401EC0380
C7EA07001406140E5C141814385CA25CA2495A1303A3495AA2130FA3131F91C7FCA25BA5
5BA9131C20347CB126>I<EB0FE0EB7FFC90B5FC3903F01F803907C007C0390F0003E000
0EEB01F0001E1300001C14F8003C1478A3123EA2003F14F86D13F0EBC001D81FF013E090
38F803C0390FFE07803907FF0F006C13DE6C13F87EEB3FFE8001F713C0D803E313E0D807
8013F0390F007FF8001E131F003EEB07FC003C1303481301EC007E12F848143EA2151EA3
7E153C1278007C14787E6C14F0390F8003E03907F01FC00001B5120038007FFCEB1FE01F
347DB126>I<EB0FE0EB7FF8EBFFFE3803F83F3907E00F80390FC007C0D81F8013E0EC03
F0EA3F0048EB01F8127EA200FE14FC1400A415FEA5007E1301A2127F7E1403EA1F80000F
13073807C00E3803E01C3801F03838007FF090381FC0FC90C7FC1401A215F8A215F01403
001F14E0383F800715C0140FEC1F809038003F00001C137E381F01FC380FFFF0000313C0
C690C7FC1F347DB126>I<007FB812C0B912E0A26C17C0CCFCAC007FB812C0B912E0A26C
17C033147C9C3C>61 D<15E0A34A7EA24A7EA34A7EA3EC0DFE140CA2EC187FA34A6C7EA2
02707FEC601FA202E07FECC00FA2D901807F1507A249486C7EA301066D7EA2010E80010F
B5FCA249800118C77EA24981163FA2496E7EA3496E7EA20001821607487ED81FF04A7ED8
FFFE49B512E0A333367DB53A>65 D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80EE
3FC0161F17E0160F17F0A617E0161F17C0EE3F80EE7F0016FEED03FC90B612F05E9039FC
0007FCED00FEEE3F80EE1FC0EE0FE017F0160717F8160317FCA617F81607A2EE0FF0EE1F
E0163FEE7FC00003913803FF00B75A16F816C02E337DB236>I<DA03FE130C91393FFF80
1C91B512E0903A03FE01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348
481401000315005B4848157C485A173C485A171C123F5B007F160CA390C9FC481600AB7E
6D150CA3123F7F001F161C17186C7E17386C6C15306C6C15706D15E012016C6CEC01C0D9
7F80EB0380D91FC0EB0F00D90FF0131ED903FE13FC0100B512F0023F13C0DA03FEC7FC2E
377CB437>I<B77E16F016FE3A01FE0001FF00009138003FC0EE0FE0707E707E707E707E
177E177FEF3F80A2EF1FC0A3EF0FE0A418F0AA18E0A3171F18C0A21880173F18005F17FE
5F4C5AEE07F04C5AEE3FC000014AB45AB748C7FC16F8168034337EB23B>I<B81280A3D8
03FCC7FC0001151FEE07C01603A21601A21600A41760150CA31700A2151CA2153C15FC90
B5FCA3EBFC00153C151CA2150CA592C8FCAB487EB512FEA32B337DB232>70
D<B5D8FE03B512F8A3000190C73807FC006C486E5AB390B7FCA349C71203B3A3486C4A7E
B5D8FE03B512F8A335337EB23A>72 D<B512FEA3000113006C5AB3B3A7487EB512FEA317
337EB21C>I<B500FE903807FFF8A3000190C7000113006C48EC00FC17F04C5A4C5A4CC7
FC160E5E5E5E5E4B5A4B5A4BC8FC150E5D5D15F84A7E14034A7EEC0EFF5C4A6C7E4A6C7E
ECE01FD9FFC07F4A6C7E4A6C7E5B6F7E6F7EA26F7E707EA2707E707E160F83707E707EA2
83486C913807FF80B500FE013F13FCA336337EB23C>75 D<B512FEA3D803FEC9FC6C5AB3
A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7FCA329337DB230>I<D8FFFC92
3801FFF86D5DA20003EFFE00D801BFED06FCA3D99F80140CA2D98FC01418A3D987E01430
A2D983F01460A3D981F814C0A3D980FCEB0180A2027EEB0300A36E1306A26E6C5AA36E6C
5AA36E6C5AA26E6C5AA36E6C5AA3913800FD80A2037FC7FCA3486C133ED80FF04B7EB501
1C90387FFFF8A33D337CB246>I<D8FFFE91381FFFF87F80C6030013006E143CD9DFE014
18EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E6E7E6E7EA26E7E6E
7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FFA2EE7F98EE3FD8A2
EE1FF8160F1607A216031601A2486C1400D807F81578B500C01438A2171835337EB23A>
I<EC07FC91387FFFC0903901FC07F0903907E000FCD90F80133E013FC76C7E017E6E7E49
6E7E48486E7E48486E7EA248486E7E000F8249157E001F167FA24848ED3F80A2007F17C0
A290C9121FA24817E0AB6C17C06D153FA3003F17806D157FA2001F17006D5D000F5E6C6C
4A5AA26C6C4A5A00015E6C6C4A5A017E4A5A6D4A5AD91FC0017FC7FCD907E013FC903901
FC07F09039007FFFC0DA07FCC8FC33377CB43C>I<B612FEEDFFC016F03A03FC0007FC00
01EC00FE167FEE3F80EE1FC017E0160FA217F0A617E0A2EE1FC0A2EE3F80EE7F0016FEED
07F890B65A168001FCC9FCB3A2487EB512F8A32C337DB234>I<B612FCEDFF8016F03A01
FE0007FC0000EC01FEED007F707E707E83160F83A65FA24C5AA24C5A047EC7FC4B5AED0F
F090B612C093C8FC9039FE001FC0ED07F06F7E6F7E150082167E167FA583A5180C17C0A2
043F131C486C1618B500FEEB1FE0040F1338933807F070C93801FFE09338003F8036357E
B239>82 D<90381FE00390387FFC0748B5FC3907F01FCF390F8003FF48C7FC003E808148
80A200788000F880A46C80A27E92C7FC127F13C0EA3FF013FF6C13F06C13FF6C14C06C14
F0C680013F7F01037F9038003FFF140302001380157F153FED1FC0150F12C0A21507A37E
A26CEC0F80A26C15006C5C6C143E6C147E01C05B39F1FC03F800E0B512E0011F138026C0
03FEC7FC22377CB42B>I<007FB712FEA390398007F001D87C00EC003E0078161E007016
0EA20060160600E01607A3481603A6C71500B3AB4A7E011FB512FCA330337DB237>I<B5
00FE90381FFFF8A3000190C813006C48153C1718B3AF1738017F1530A217706D6C146001
1F15E06E495A010F14036D6C495A6D6C49C7FCD901FC131E6DB413FC91383FFFF0020F13
C0020190C8FC35357EB23A>I<B5D8F007B539800FFFF0A3000390C7273FF000011300D8
01FC6E48EB007C1A386D140F00001930836D020715706D1860A26E496C14E0013F60A26E
D919FC1301011F60A26ED930FE1303010F95C7FCA26ED9607F5B01071706A26E9039C03F
800E0103170CA2913BFC01801FC01C01011718A2913BFE03000FE03801001730A2DAFF06
EB07F0027F5EA2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203F0EB00FF020F93C8
FCA24B800207157EA24B143E0203153CA24B141C020115184C357FB24F>87
D<003FB612FCA39039F80007F813C090C7EA0FF0003EEC1FE0123C0038EC3FC00078EC7F
801270EDFF004A5AA20060495AA24A5A4A5AC7FC4A5A4A5AA24A5A4AC7FCA2495A495AA2
495A495AA24948130C495AA2495A49C7FCA24848141CA2485A485A1638485A4848147816
F84848130148481307153FB7FCA326337CB22F>90 D<EAFFF0A4EAF000B3B3B3ADEAFFF0
A40C4B79B715>I<EAFFF0A41200B3B3B3AD12FFA40C4B7FB715>93
D<12035A120E5A12181238123012701260A212E05AA412DEB4FC1380A2127FA2EA3F0012
1E09177BB315>96 D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7E
EA1F00C7FCA4EB01FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3
140FA26C131F6C133B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA126
>I<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01FE7F49EB1F80
49EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F8001ECEB3F00
01CF137C90388381F8903801FFE0C76CC7FC25357EB32B>I<EB07F8EB3FFF9038FC07C0
3901F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FCA2127E12FEAA
127FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC0F8090383FFE
00EB07F01D237EA122>I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC0F3901F003BF
3907E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C5BA26C6C5B6C
6C4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B>I<EB0FE0EB7FFC
EBF83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F0014014814F8127EA212
FEA2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C6C13E03901F0
03C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FCEB07FF90381F078090383E0FC0
EB7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A7487E387FFFE0A3
1A357FB417>I<151F90391FC07F809039FFF8E3C03901F07FC73907E03F033A0FC01F83
809039800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C38
0EFFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC4880381F0001
003EEB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001F83903F007E0
C6B51280D91FFCC7FC22337EA126>I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1
E0FC9038F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB3
2B>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0F
F0B5FCA310337EB215>I<EB03C0EB07E0EB0FF0A4EB07E0EB03C090C7FCAAEB03F013FF
A313071303B3B01238127C00FE13E0130714C0130F007C138038381F00EA1FFCEA07F014
4384B217>I<EA03F012FFA312071203AF913803FFE0A36E1300EC00F8EC01E05D4A5A02
0FC7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7EEBF87F496C7E141F6E7E8114076E7E81
14016E7E81486CEBFF80B500C313F0A324347EB329>I<EA07E012FFA3120F1207B3B3A7
EA0FF0B5FCA310347EB315>I<2703F01FE013FF00FF90267FF80313C0903BF1E07C0F03
E0903BF3803E1C01F02807F7003F387FD803FE1470496D486C7EA2495CA2495CB3486C49
6C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F01FC000FFEB7FF09038F1E0FC9038
F3807C3907F7007EEA03FE497FA25BA25BB3486CEB7F80B538C7FFFCA326217EA02B>I<
EB07F0EB3FFE9038FC1F803901F007C03903C001E000078048486C7E48C7127CA248147E
003E143E007E143FA300FE1580A8007E1500A36C147EA26C147C6D13FC6C6C485A00075C
3903F007E03900FC1F80D93FFEC7FCEB07F021237EA126>I<3903F03F8000FFEBFFE090
38F3C0F89038F7007ED807FE7F6C48EB1F804914C049130F16E0ED07F0A3ED03F8A91507
16F0A216E0150F16C06D131F6DEB3F80160001FF13FC9038F381F89038F1FFE0D9F07FC7
FC91C8FCAA487EB512C0A325307EA02B>I<903807F00390383FFC07EBFC0F3901F8038F
3807E001000F14DF48486CB4FC497F123F90C77E5AA25A5AA9127FA36C6C5B121F6D5B00
0F5B3907E003BF3903F0073F3800F81EEB3FF8EB0FE090C7FCAAED7F8091380FFFFCA326
307DA029>I<3803E07C38FFE1FF9038E38F809038E71FC0EA07EEEA03ECA29038FC0F80
49C7FCA35BB2487EB512E0A31A217FA01E>I<EBFF06000713CE381F00FE003C133E4813
1E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFFC014F0000F7F6C7FC67FEB0FFF13
00EC3F8000C0131F140F6C1307A37E15006C5B6C130E6C5B38F7807838E1FFE038C07F80
19237EA11E>I<1330A51370A313F0A21201A212031207381FFFFEB5FCA23803F000AF14
03A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0182F7FAD1E>I<D803F0133F00FF
EB0FFFA30007EB007F000380B35DA35D12016D4813800000903803BFFC90387E073FEB1F
FED907F8130026227EA02B>I<B5EBFFF0A3D80FF0EB3F800007EC1F000003140E150C6D
131C00011418A26C6C5BA26D1370017E1360137F6D5BA290381F8180A214C3010F90C7FC
A2EB07E6A214FE6D5AA26D5AA36D5AA2146024217E9F29>I<B53A1FFF81FFF0A33C07F8
01FC003F8001F049EB1E0000030100141C816C6C017C1318A26D017E1338000002FE1330
A290267E01FF5B159F168090263F030F5BA216C0903A1F8607C180A202C613E390260FCC
0390C7FCA2D907FC13F6ECF80116FE6D486C5AA36D481378A36D48133034217F9F37>I<
B53801FFF8A32603FE0013806C48EB7C0000001478017E1370017F5B90383F81C090381F
8380D90FC3C7FCEB07E614FE6D5A6D5A6D7E80805B9038039F809038071FC09038060FE0
EB0C0790381C03F0496C7E01707FEBF000000180000FECFF8026FFFC0313FCA326207F9F
29>I<3A7FFF807FF8A33A07F8001FC00003EC0F800001EC070015066C6C5BA26D131C01
7E1318A26D5BA2EC8070011F1360ECC0E0010F5BA2903807E180A214F3010390C7FC14FB
EB01FEA26D5AA31478A21430A25CA214E05CA2495A1278D8FC03C8FCA21306130EEA701C
EA7838EA1FF0EA0FC025307F9F29>I<003FB512F0A2EB000F003C14E00038EB1FC00030
EB3F800070137F1500006013FE495A13035CC6485A495AA2495A495A49C7FC153013FE48
5A12035B48481370485A001F14604913E0485A387F000348130F90B5FCA21C207E9F22>
I<BC12F0A24C0280944D>124 D E /Fn 22 121 df<B712F0AB240B7F9F2D>45
D<BC1280A5D8000701F8C7000114C0F0001F19071901851A7F1A3F1A1FA2F20FE0A21A07
A31A03A318F81BF01A01A497C7FC1701A317031707170F177F92B6FCA59238F8007F170F
170717031701A317001B3EA31B7CA395C8FCA21BFCA21BF8A21A01A31A031BF01A071A0F
A21A1F1A3FF27FE0F101FF1907191F0603B5FCBCFCA21BC0A34F517CD058>69
D<B600FC073FB512FE6F61A26F96B6FCA2D80007F5C00070EF01EFA202EF6DEF03CFA202
E76DEF078FA202E36DEF0F0FA202E16D171EA302E06D173CA26F6C1778A26F6C17F0A26F
6DED01E0A26F6DED03C0A36F6DED0780A26F6DED0F00A26F6D151EA26F6D5DA3706C5DA2
706C5DA2706D495AA2706D495AA2706D495AA3706D49C7FCA2706D131EA2706D5BA2716C
5BA3716C5BA271EB81E0A271EBC3C0A271EBE780A27101FFC8FCA3715BA2715BA2725AA2
725AA2D93FFC6F5AB74DB712FEA2725AA2725A77527CD180>77 D<003FBC1280A59126C0
003F9038C0007F49C71607D87FF8060113C001E08449197F49193F90C8171FA2007E1A0F
A3007C1A07A500FC1BE0481A03A6C994C7FCB3B3AC91B912F0A553517BD05E>84
D<B700FE031FB512FEA5D8001F01F0CA383FFE00F307F06D626F170F6D62811B1F6D6D60
1B3F6D97C7FC6F5F6D197E821BFE6E6D5E1A016E6D5E1A036E60701507A26E6D5E1A0F6E
6D5E1A1F6E6070153FA26E6D93C8FC626E6E147E1AFE6F5E711301A26F6D5C19036F6D5C
19076F5E71130FA26F6D5C191F6F6D5C193F6F93C9FC715BA26FEC807E19FE706D5A18C1
705C18E3705C18F318F770EBFFE0A2705CA2705CA37091CAFCA2705BA2715AA3715AA271
5AA2715A715A5F537DD166>86 D<001FBA12C01AE0A40380C714C002F8C75A02C0178091
C8481400495D495F494B5B495D495F48484B5B5F495F94B55A5E90C85D4C91C7FC5E6000
3E4B5B5E604C5B5EC95C93B55A5D604B91C8FC5D5F4B5B5D5F4B5B5D5F92B55A5C5F4A91
C9FC5C5E4A5B5C4CEC03E04A5B5C5E91B55A5B4C14074991C8FC4918C05D495B5B4B150F
495B5B4B151F90B55A48183F5D4891C9127F4818FF4A5D48495D485F4A5D4849033F1380
484CB5FC4A143FBBFCA47E435279D152>90 D<EC7FFF0107B512F0013F14FE90B77E48D9
E00F7F2703FE000113F0486C6D7F6EEB3FFC48826E131F83707FA36C496D7FA26C90C7FC
6C5AC9FCA6037FB5FC020FB6FC91B7FC01071487013FEBF0074913803901FFFC004813F0
485B485B485B4890C7FC5A5BA2485AA45EA26D5C007F151D163D6C6C02797F6C6D01F113
F86C9026C003E1EBFFE06C9026F81FC014F06C90B5487EC6ED001F011F01FC010713E001
0101E090C8FC3C387CB641>97 D<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F
13FC91B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F
484980485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C
6D5C6C6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101EC
FE0FD9003F13F8020301C049C7FC41547CD24B>100 D<913803FFC0023F13FC49B6FC01
0715C04901817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F
18C0488191C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA2
18E06CEE01F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D9
1FFEEB03FE903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>
I<ED3FFC0203B5FC020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49903800
FFFC495A495AA2495AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8C8FCB3
B3A7007FB512FEA52E547CD329>I<DA3FFF14FF0103B5D8F00713C0010FDAFC1F13E001
3FECFF7F90267FFC0F9038FF9FF09026FFE001EBF83F48496C13E0484990387FF01F4890
C7D83FF813E0489338FC0FC0F0078048486E6CC7FCA2003F82A9001F5EA26C6C4A5AA26C
5E6C6D495A6C6D495A6C6D485BDAFC0F5B4890B6C8FCD803EF14FC01C314F02607C03F90
C9FC91CBFCA2120FA37FA213F813FE90B7FC6C16F817FF18C06C836C836C836D828448B9
FC12074848C700031480D81FF8EC003F4848150748486F13C083485A83A56D5D007F1880
6D5D003F18006C6C4B5AD80FFEED1FFC6C6C6CEC7FF86C01E049485A6C01FE011F5B6C6C
B71280010F03FCC7FC010115E0D9000F01FCC8FC3C4F7CB543>I<EB3FF0B5FCA51203C6
FCB3A4EE1FFC93B512C0030314F0030F8092391FE07FFC92393F001FFE037C8003F07FDA
F1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542537BD24B>
I<137F497E000313E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA5
12017EB3B3A6B612E0A51B547BD325>I<EB3FF0B5FCA512017EB3B3B3B1B612F0A51C53
7BD225>108 D<D93FF0D91FFCEDFFE0B591B500C0010713FE030302F0011F6D7E030F6E
017F8092271FE07FFCD9FF037F922A3F001FFE01F8007F0003027C9126FF03E080C602F0
6DD90780137FDAF1E0038FC77FDAF3C0159EDAF7806D01BC143F07FC8102FFC75C4A5EA2
4A5EA44A5EB3ACB6D8F807B6D8C03FB512FEA567367BB570>I<D93FF0EB1FFCB591B512
C0030314F0030F8092391FE07FFC92393F001FFE0003027C80C602F07FDAF1E081ECF3C0
DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542367BB54B>I<913801FFE0
021F13FE91B612C0010315F0010F9038807FFC903A1FFC000FFED97FF86D6C7E49486D7F
48496D7F48496D7F4A147F48834890C86C7EA24883A248486F7EA3007F1880A400FF18C0
AC007F1880A3003F18006D5DA26C5FA26C5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D
6C495BD93FFE011F90C7FC903A0FFF807FFC6D90B55A010015C0023F91C8FC020113E03A
387CB643>I<903A3FF001FFE0B5010F13FE033FEBFFC092B612F002F301017F913AF7F8
007FFE0003D9FFE0EB1FFFC602806D7F92C76C7F4A824A6E7F4A6E7FA2717FA285187F85
A4721380AC1A0060A36118FFA2615F616E4A5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0
EBFFFC9126FBFE075B02F8B612E06F1480031F01FCC8FC030313C092CBFCB1B612F8A541
4D7BB54B>I<90397FE003FEB590380FFF80033F13E04B13F09238FE1FF89139E1F83FFC
0003D9E3E013FEC6ECC07FECE78014EF150014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FC
A55CB3AAB612FCA52F367CB537>114 D<903903FFF00F013FEBFE1F90B7FC120348EB00
3FD80FF81307D81FE0130148487F4980127F90C87EA24881A27FA27F01F091C7FC13FCEB
FFC06C13FF15F86C14FF16C06C15F06C816C816C81C681013F1580010F15C01300020714
E0EC003F030713F015010078EC007F00F8153F161F7E160FA27E17E07E6D141F17C07F6D
EC3F8001F8EC7F0001FEEB01FE9039FFC00FFC6DB55AD8FC1F14E0D8F807148048C601F8
C7FC2C387CB635>I<143EA6147EA414FEA21301A313031307A2130F131F133F13FF5A00
0F90B6FCB8FCA426003FFEC8FCB3A9EE07C0AB011FEC0F8080A26DEC1F0015806DEBC03E
6DEBF0FC6DEBFFF86D6C5B021F5B020313802A4D7ECB34>I<007FB500F090387FFFFEA5
C66C48C7000F90C7FC6D6CEC07F86D6D5C6D6D495A6D4B5A6F495A6D6D91C8FC6D6D137E
6D6D5B91387FFE014C5A6E6C485A6EEB8FE06EEBCFC06EEBFF806E91C9FCA26E5B6E5B6F
7E6F7EA26F7F834B7F4B7F92B5FCDA01FD7F03F87F4A486C7E4A486C7E020F7FDA1FC080
4A486C7F4A486C7F02FE6D7F4A6D7F495A49486D7F01076F7E49486E7E49486E7FEBFFF0
B500FE49B612C0A542357EB447>120 D E /Fo 27 119 df<133C137EA213FE1201EA03
FC13F0EA07E0EA0FC0EA1F80EA1E005A5A5A12C00F0F6FB92A>19
D<6C130800E0133800F813F8383E03E0381F07C0380FDF803803FE006C5A6C5A1320150A
76B42A>I<121C127FEAFF80A5EA7F00121C0909798817>46 D<EB03F8EB1FFF90387E0F
C09038F803E03901E000F0484813780007147C48487FA248C77EA2481580A3007EEC0FC0
A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B000F143EA26C6C5B6C6C5B6C
6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A>48
D<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E123000706D7E
126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A4A5A
92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A485A00
0EC75A000FB6FC5A5A485CB6FCA321387CB72A>50 D<1538A2157815F8A2140114031407
A2140F141F141B14331473146314C313011483EB030313071306130C131C131813301370
136013C01201EA038013005A120E120C5A123812305A12E0B712F8A3C73803F800AB4A7E
0103B512F8A325397EB82A>52 D<0006140CD80780133C9038F003F890B5FC5D5D158092
C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E007E090388003F0496C7E
12066E7EC87EA28181A21680A4123E127F487EA490C71300485C12E000605C1270003049
5A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC38007FFCEB1FE0213A7CB7
2A>I<EC3FC0903801FFF0010713FC90380FE03E90383F800790387E001F49EB3F804848
137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F90C9FCEB01FC903807FF
8039FF1E07E090383801F0496C7E01607F01E0137E497FA249148016C0151FA290C713E0
A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B6C6C485A3900FE07F090
383FFFC06D90C7FCEB03FC233A7DB72A>I<12301238123E003FB612E0A316C05A168016
000070C712060060140E5D151800E01438485C5D5DC712014A5A92C7FC5C140E140C141C
5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133FA5137FA96DC8FC131E233B7B
B82A>I<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C
7FEC180FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249C77F167F
A20106810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E0707E120148
6C81D80FFC02071380B56C90B512FEA3373C7DBB3E>65 D<B812F8A30001903880001F6C
90C71201EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F
91B5FCA3EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836>70
D<013FB512E0A39039001FFC00EC07F8B3B3A3123FEA7F80EAFFC0A44A5A1380D87F005B
0070131F6C5C6C495A6C49C7FC380781FC3801FFF038007F80233B7DB82B>74
D<B649B5FCA3000101809038007FF06C90C8EA3F80053EC7FC173C17385F5F4C5A4C5A4C
C8FC160E5E5E5E5E4B5AED0780030EC9FC5D153E157E15FF5C4A7F4A6C7E140E4A6C7E4A
6C7E14704A6C7E4A6C7E14804A6C7E6F7EA26F7F707EA2707E707EA2707EA2707E707EA2
707E707F8484486D497FB6011FEBFF80A339397DB841>I<B5933807FFF86E5DA20001F0
FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9
C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A3
913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487E
D80FFC6D48497EB500C00203B512F8A2ED018045397DB84C>77 D<EB1FE0EBFFFC3803E0
3F3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3F
E0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C90
3980063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>97
D<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC003A2EA1F80
123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C00
0F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277DA525>99
D<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F48
48133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA2
6C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B
7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380FC00048
48137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F00
1F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80903803
FC0020277EA525>I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203
B3AA487EB512C0A312387EB717>105 D<EA03F012FFA3120F1203B1913801FFFCA39138
007FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7F
EBF81F496C7E8114076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FC
A3283A7EB92C>107 D<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917>I<39
03F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA3
5BB3A3486C497EB500C1B51280A329257EA42E>110 D<EB03FE90380FFF8090383E03E0
9038F800F84848137C48487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03
F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F
006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA52A>I<3807E01F00
FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300
A45BB3A2487EB512F0A31C257EA421>114 D<EBFF03000313E7380F80FF381E003F487F
487F00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F0107
1380EB007F141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C
38E1FFF038C03F801A277DA521>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407
B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790381FFF87903A03
FC07E00029267EA42E>117 D<B538803FFEA33A0FF8000FF06C48EB07E00003EC03C06D
148000011500A26C6C1306A26D130E017E130CA26D5BA2EC8038011F1330A26D6C5AA214
E001075BA2903803F180A3D901FBC7FCA214FF6D5AA2147CA31438A227257EA32C>I
E /Fp 29 119 df<EA0780EA1FC0EA3FE0A6EA0F601200A213E013C012011380A21203EA
07001206120E5A5A5A5A5A0B197A8817>44 D<B512FCA516057C941C>I<121E127FEAFF
80A413005A123C0909788817>I<EC0FF0EC7FFC903801F83F903907C00F8090390F8007
C090391F0003E0013E13014914F0A25B000115F84913001203A24848130116FCA2120F5B
A2121F16F8A2491303123FA548C7EA07F0A516E0007E140FA212FE16C0A2151F1680A300
7EEC3F00A2153E157E157C003E5CA26C495A4A5A6C6C485A3907C01F802603F07EC7FC38
00FFF8EB3FC0263A7AB72A>48 D<15C014031407141F14FF90B5FC15803801FE3FC7FCA3
147F1500A55C5CA513015CA513035CA513075CA5130F5CA5131F5CA3133F497EB612F0A2
15E01C3878B72A>I<EC07F8EC3FFF91B512C0903903F01FE0903907800FF090390E0003
F84914FC49EB01FE5B0160130001E014FF13FC487E7FA449EB01FE5BEA007890C7FCED03
FCA2ED07F8ED0FF0A2ED1FE0ED3FC01680ED7F0015FE4A5A4A5AEC07E04A5A4A5A4AC7FC
147C5C495A495AD90780136049C7FC131E4914C013705B484813014848EB038048B6FC5A
003F15005AB7FC5DA228387CB72A>I<EC0FF0EC7FFE49B51280903903F01FC090390F80
0FE090391E0007F0011C14F8133C017F13031480A201FF1307A3EB7F00013E130F90C713
F0A2ED1FE016C0ED3F80A2ED7E005D4A5AEC0FE0D903FFC7FC15E090380001F8EC00FE15
7FED3F8016C0A2ED1FE0A416F0A2001F143FD87F8014E07F12FFA2ED7FC0A249148090C7
12FF00FC150000E0495A0070495A6C495A001E495A390FC03FC06CB55A000101FCC7FC38
003FE0253A7BB72A>I<166016E0150115031507150F16C0151F153F157F15FFEC01DF91
3803BF80153F1406140C141C14389138707F00146014C0EB0180EB03005B010E13FE5B13
185B5B5B0001495AEA0380130012065A5A0038495A5A5AB712F8A3C73807F8005DA4140F
A25DA4EC3FF0011FB512C0A325397BB82A>I<EC01FE91380FFF80023F13E09138FF01F0
903901F80070903907F001F890380FC00390381F8007EB3F005B13FE4914F00001EC01C0
484890C7FCA2485A120F5BA2121FEBC07F393FC3FFC09038C781F09038CE00F84848137C
01B87F01F0133F5B49EB1F8012FF4914C0A390C7FC153FA35AA3157F1680A316005D5DA2
007E495A5D003E1303003F495A6C6C485AEC1F80260FE07FC7FC3803FFFC6C13F038003F
C0253A79B72A>54 D<1206120EEA0F8090B612F8A25A16F016E04815C016800038C7EA07
004814060060140E5D5D485C5D4A5AC7485A4AC7FC1406140E5C5C5C14F05C495A130349
5AA249C8FC5BA2133EA25B13FCA212015B1203A3485AA2120FA3485AA5123F5BA26C5A6C
C9FC253B74B82A>I<EC0FF0EC7FFC49B5FC903907F01F8090390FC00FC090381F8007D9
3F0013E0017EEB03F013FE485A484814F8150112075B000F1403A3001F15FC5BA216F815
07A35B150FA3000F141FA26C6CEB3FF0157F000314EF3901F001CF3A00F8039FE090387C
0F1FEB1FFED907F013C090C7123FA21680157F1600A215FE001C5C007F130148495A5D4A
5A4A5A48495A4849C7FC007013FE387C03F8383FFFF0000F13C0D803FEC8FC263A7AB72A
>57 D<017FB712FEA301009038C000076E481300183E02FF151E92C8FC180EA45B4A1506
A3933801800CA20103EC03004A1500A25EA25E0107141E4A137E91B512FEA3ECF800010F
143C4A131CA3160C041C1306011F0218130C5CA293C71218A3013F16305C1870186018E0
A2017F15014AEC03C01707171FEF7F80D801FFEC03FFB9FC1800A237397DB839>69
D<013FB512E0A25B9039007FE0006E5AA2147F5DA514FF92C7FCA55B5CA513035CA51307
5CA5130F5CA5131F5CA5133F5CA4EBFFE0007FEBFFC0A2B6FC23397EB81E>73
D<90267FFF80923803FFFE81610100F0FE00027FEE0DFCDA6FE0151B14EF02CFEE33F8A2
DAC7F01563A219C71301028792380187F0DA83F8EC0307A21806190F90260381FC140C02
015F1818A218306E6C151F491660010604C05BA2037FEB0180A2943803003F130E010C03
065CED3F805F5F197F011C6D6C5A011895C7FC5FA25FDB0FE05C0138ECE180013002E3C7
5AA216E6ED07F604FC1301137001604A5C150301F05C00015DD807FCEE07FEB500E0D9C0
03B512FC150116804F397DB84C>77 D<DA03FC133091391FFF8070027FEBE0F0903A01FC
03F1E0903903F0007B4948133F4948131F4948130F49C71207013E15C0017E14035BA300
0115014915807FA46D91C7FC7F8014E06C13FEECFFC06D13FC6D13FF16C06D14F0010780
1301D9003F7F14039138007FFE150715036F7E81A2821218A30038157EA45EA2007C5D15
01007E4A5A007F5D6D495A6D495AD8F9F0013FC7FCD8F0FE13FE90383FFFF8D8E00F13E0
D8C00190C8FC2C3D7CBA2E>83 D<0007B812FCA3903AF8007FE003D80FC090383FC00049
163C000EC7127F001E4B131C121CA212180038170C003014FF93C7FCA25A1818A2485BC7
491400A514035DA514075DA5140F5DA5141F5DA5143F5DA3147F4A7E0003B612F85AA236
3977B83C>I<14FF010713E090381F01F8903878007C01F8137E01FE7F0001801680A35B
EA007090C7FCA4EC0FFF49B5FC90390FFC3F00EB7FC03801FE00EA03F848485B485A4848
137E485A007F150690C7FC15FE48ECFC0C481301A21403007F9038077C18140E3A3F801C
7E303A1FC0F83FF03A07FFE01FC0C69038000F8027277CA52A>97
D<EC7F80903803FFF090380FC07C90383F000E017C131F49137F000114FF485A485A120F
484813FE153848481300A248C8FCA35A5AA75A7EA2151C127E15386C143015706C6C13E0
000FEB01C03907C007803903F03E003800FFF8EB1FC020277AA525>99
D<147F903803FFE090380F81F090383E00FC49137C48487F4848133F0007805B48481480
121F5B123FA248C7FCA3B71200A248C9FCA65A7EA2007E140EA25D6C14186C14386D5B6C
6C485A3907E003802601F01FC7FC38007FFCEB1FE021277BA525>101
D<EE07E091391FE01FF091397FF87878903A01F03FE0F8903907E01F80D90FC014F09026
1F800F1360D93F00EBC000A2017E1307150F13FE5BA44B5AA2017C49C7FC153E6D5B013F
5B90387F83F09038E7FFC0D9E0FEC8FC4848C9FCA57F7F90B512E015FE6C6E7E6D8048B6
7E3A07C0003FF0D81F80130748C76C7E003E140148140012FC5AA315015E4B5A007C1407
007E4A5A6C023FC7FCD80F80137E3903F007F8C6B512C0D91FFCC8FC2D387FA52A>103
D<EB01C0EB07F0130F14F8A214F0A214E0EB038090C7FCAAEB0FC0EA03FFA3EA003FEB1F
80A5133F1400A55B137EA513FE5BA512015BA41203B512C0A315387EB717>105
D<14FC137F14F8A213071303A314F0A5130714E0A5130F14C0A5131F1480A5133F1400A5
5B137EA513FE5BA512015BA41203B512E014C0A2163A7EB917>108
D<90390FC03FC0D803FFEBFFF0489038C3C0F89138CF007C26003FDC137E6D5A02F0133E
4A133F5C5E4948137EA291C7FCA316FE5B017E5CA4150113FE495CA415031201495CA400
031407B500E1B512C0A202C114802A257EA42E>110 D<EC3FC0903801FFF8903807C07C
90381F001F017CEB0F8049EB07C0485A4848EB03E0120749EB01F0485A001F15F8A248C7
FCA25AA2007E140312FEA416F015075A16E0150F16C07E007EEC1F801600003E143E003F
5C6C5C6C6C485A3907C007E03901F81F802600FFFEC7FCEB1FF025277BA52A>I<903901
F80FE0017FEB3FFC01FFEBF03F9139FBC00F80902607FF0013C06D48EB07E04AEB03F05C
4A14F81601010715FC5CA5130F5CA41603011F15F85CEE07F0A2EE0FE0A2013FEC1FC017
80163F6EEB7F0016FE9138E001F890397F7003F090397E3C0FC0DA0FFFC7FCEC03F891C9
FC13FEA25BA41201A25BA2487EB512E0A32E3581A42E>I<90381F807C3903FF81FF4890
38878F80EC8E1F39003F9C3FEB1F3814709138601F00ECE0044AC7FC133F5CA291C8FCA3
5B137EA513FE5BA512015BA4487EB512F0A321257EA421>114 D<903803FE0C90380FFF
9C90383E01FCEBF0004848137C4848133C1538485AA215181538487E1530D807F0130013
FCEBFFE06C13FC14FFC614806D13C0011F13E01300EC0FF01407003013031401A3123800
7814E0A3007CEB03C0EC0780127EB4EB1F0038F3C07C38E1FFF038C03F801E277DA521>
I<1306A4130EA2130C131CA2133C137C13FC5B12031207001FB5FCB6FCA23803F8005BA5
12075BA5120F5BA5001F130C1380A4141C003F131813007E1438EB80301470380FC0E038
07C1C03803FF8038007E00183479B220>I<3A7FFFC01FFFB51280A23A07FC0007F86C48
EB03E04914C06D1480000115001506A25D7F00005C153815306D5B137E5DA24A5AEB3F03
92C7FC5C1406148C131F1498A214F0130F5C5CA25C130791C8FCA2282579A32C>118
D E end
TeXDict begin

2704 0 bop -152 -297 a Fp(IEEE)26 b(T)-7 b(ransactions)26
b(on)h(Magnetics,)g(v)n(ol.)g(33,)f(pp.)i(2704-2706,)c(Sept.)k(1997.)
1571 b Fo(2704)-1 158 y Fn(Exp)t(erimen)l(tal)47 b(V)-11
b(alidation)46 b(of)f(the)g(T)-11 b(riangle)46 b(Zig-Zag)g(T)-11
b(ransition)45 b(Mo)t(del)1163 336 y Fo(Aleksandar)26
b(Ka)n(v)n(\024)-39 b(ci)n(\023)g(c)52 b(and)j(Jos)n(\023)-39
b(e)26 b(M.)h(F.)h(Moura)500 435 y Fm(Data)e(Storage)g(Systems)e(Cen)n
(ter,)j(Carnegie)g(Mellon)g(Univ)n(ersit)n(y)-6 b(,)24
b(Pittsburgh,)i(P)-6 b(A)25 b(15213-3890)-97 623 y Fl(Abstr)r(act)p
Fm(|)p Fk(The)36 b(triangle)k(zig-zag)f(transition)i(\(TZ-ZT\))-180
714 y(mo)r(del)e(is)f(a)g(sto)r(c)n(hastic)i(zig-zag)g(transition)g(mo)
r(del.)65 b(It)39 b(is)-180 806 y(a)f(fast)h(alternativ)n(e)g(to)g
(micromagnetic)i(mo)r(deling.)67 b(Th)n(us)-180 897 y(far,)30
b(the)g(TZ-ZT)f(mo)r(del)i(has)e(b)r(een)h(compared)g(only)h(to)f(the)
-180 988 y(micromagnetic)e(mo)r(del.)38 b(Here)25 b(w)n(e)g(compare)h
(the)f(mo)r(del)h(to)-180 1080 y(real)40 b(data)f(and)h(v)-5
b(alidate)40 b(its)f(signal)i(and)e(noise)h(mo)r(deling)-180
1171 y(capabilit)n(y)-7 b(.)520 1386 y Fj(I.)45 b(Intr)n(oduction)-97
1553 y Fm(Sto)r(c)n(hastic)38 b(zig-zag)h(transition)g(mo)r(dels)e(in)h
(longitudinal)h(mag-)-180 1644 y(netic)27 b(recording)h(ha)n(v)n(e)e
(gained)h(atten)n(tion)g(in)g(signal)h(pro)r(cessing)g(ap-)-180
1736 y(plications)d(through)e(recen)n(tly)g(prop)r(osed)g(mo)r(dels)h
([1],)14 b([2].)35 b(The)23 b(most)-180 1827 y(attractiv)n(e)j(feature)
h(of)f(the)f(sto)r(c)n(hastic)i(zig-zag)h(mo)r(dels)d(is)i(the)e(com-)
-180 1918 y(putational)33 b(simplicit)n(y)f(with)h(whic)n(h)g(they)e
(mo)r(del)i(transitions)g(and)-180 2009 y(media)21 b(noise.)34
b(This)22 b(mak)n(es)f(these)h(mo)r(dels)g(useful)g(in)f(error)i(rate)f
(sim-)-180 2101 y(ulations)37 b(where)f(thousands)g(of)h(transitions)g
(need)f(to)g(b)r(e)g(created.)-180 2192 y(The)30 b(triangle)g(zig-zag)h
(transition)f(\(TZ-ZT\))g(mo)r(del)f([1],)j(for)e(exam-)-180
2283 y(ple,)22 b(o\013ers)g(4)f(orders)g(of)h(magnitude)e(in)h
(computational)g(sa)n(vings)g(o)n(v)n(er)-180 2375 y(the)k
(micromagnetic)h(mo)r(del)f([3].)-97 2467 y(The)j(sto)r(c)n(hastic)h
(zig-zag)f(transition)h(mo)r(dels)e(describ)r(e)h(the)f(tran-)-180
2558 y(sition)k(b)r(oundary)e(as)i(a)f(cross-trac)n(k)h(sto)r(c)n
(hastic)g(pro)r(cess.)49 b(Pioneer-)-180 2649 y(ing)28
b(w)n(ork)g(on)g(these)g(mo)r(dels)g(has)g(b)r(een)f(done)h(b)n(y)f
(Arnoldussen)g(and)-180 2741 y(T)-6 b(ong)26 b([4])g(and)e(Middleton)i
(and)f(Miles)h([5].)35 b(Analytical)26 b(results)g(link-)-180
2832 y(ing)18 b(signal)h(and)f(noise)h(to)f(zig-zag)h(prop)r(erties)f
(are)h(giv)n(en)f(in)f([6].)33 b(These)-180 2923 y(early)d(mo)r(dels)f
(exhibit)g(problems)f(in)i(relating)g(the)f(mo)r(del)g(parame-)-180
3015 y(ters)e(to)f(media/reco)r(ding)h(prop)r(erties)g(and)f(in)g
(cross-trac)n(k)h(stabilit)n(y)-6 b(,)-180 3106 y(see)26
b(details)h(in)e([7].)-97 3198 y(Impro)n(ving)g(on)h(these)g(mo)r
(dels,)g(w)n(e)h(in)n(tro)r(duced)f(the)f(triangle)j(zig-)-180
3289 y(zag)h(transition)g(mo)r(del)f(in)g([1].)44 b(In)27
b(the)h(TZ-ZT)h(mo)r(del,)g(the)f(zig-zag)-180 3381 y(line)23
b(is)f(constructed)g(from)g(sides)h(of)g(isosceles)h(triangles,)h
(making)c(the)-180 3472 y(mo)r(del)k(stable,)h(while)h(the)e
(structured)f(geometry)h(and)g(some)g(results)-180 3563
y(from)18 b(renew)n(al)i(theory)e([7])i(ha)n(v)n(e)e(b)r(een)g
(exploited)h(to)g(relate)g(the)f(mo)r(del)-180 3655 y(to)23
b(media/recording)h(prop)r(erties.)34 b(An)23 b(alternativ)n(e)g
(approac)n(h)h(is)f(the)-180 3746 y(microtrac)n(k)k(mo)r(del)g([2],)i
(where)f(the)f(zig-zag)i(line)f(is)g(simpli\014ed)f(to)h(a)-180
3837 y(sto)r(c)n(hastic)f(square)f(w)n(a)n(v)n(e.)-97
3929 y(In)e([1],)i(the)e(TZ-ZT)h(mo)r(del)f(has)h(b)r(een)f(v)l
(alidated)h(against)h(the)e(mi-)-180 4021 y(cromagnetic)35
b(mo)r(del.)62 b(In)34 b(this)h(pap)r(er,)i(w)n(e)e(explore)g(the)g
(accuracy)-180 4112 y(of)j(the)f(TZ-ZT)g(mo)r(del)g(b)n(y)g(comparing)g
(it)g(to)h(the)e(data)i(obtained)-180 4203 y(through)22
b(spin-stand)f(measuremen)n(ts.)32 b(Our)21 b(ma)t(jor)i(comparison)f
(cri-)-180 4295 y(teria)k(are)h(w)n(a)n(v)n(eform)e(and)h(media)f
(noise)h(prediction)g(accuracy)-6 b(.)-41 4510 y Fj(I)r(I.)45
b(Triangle)31 b(Zig-za)n(g)h(Transition)g(Modeling)-97
4676 y Fm(The)24 b(triangle)h(zig-zag)g(transition)g(\(TZ-ZT\))f(mo)r
(del)g(is)g(a)g(sto)r(c)n(has-)-180 4768 y(tic)19 b(mo)r(del)f(of)i
(the)e(zig-zag)i(line)g(that)e(separates)i(t)n(w)n(o)f(opp)r(ositely)h
(mag-)-180 4859 y(netized)31 b(regions)i(of)f(the)e(magnetic)h(medium.)
49 b(The)32 b(TZ-ZT)f(mo)r(del)-109 5077 y Fi(Man)n(uscript)23
b(receiv)n(ed)i(F)-6 b(ebruary)24 b(4,)f(1996.)-109 5156
y(A.)g(Ka)n(v)n(\024)-33 b(ci)n(\023)g(c,)23 b(e-mail)f(k)l(a)n(v)n
(cic@ece.cm)n(u.edu,)j(fax)e(\(412\))j(268-3890.)-109
5235 y(A.)33 b(Ka)n(v)n(\024)-33 b(ci)n(\023)g(c)34 b(w)n(as)g(with)g
(Read-Rite)g(Corp)r(oration)g(when)g(most)f(of)h(this)-180
5313 y(w)n(ork)24 b(w)n(as)f(p)r(erformed)-109 5392 y(This)18
b(w)n(ork)i(w)n(as)f(supp)r(orted)h(in)f(part)h(b)n(y)g(the)g(National)
f(Science)i(F)-6 b(ounda-)-180 5471 y(tion)19 b(under)h(Gran)n(t)f(No.)
g(ECD-8907068.)31 b(The)19 b(United)h(States)g(go)n(v)n(ernmen)n(t)-180
5550 y(has)k(certain)g(righ)n(ts)g(in)f(this)h(material.)2100
1680 y @beginspecial 26 @llx 640 @lly 253 @urx 767 @ury
2267 @rwi @setspecial
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000000000000000010
% c44444444444444444444444444764c444444444444444444444444450
% 8000000000000000000000000002250000000000000000000000000010
% 91111111111111111111111111133d1111111111111111111111111110
% 8000000000000000000000000002360000000000000000000000000010
% c47444444444444444444444444676444444444444444444444445c450
% 83e000000000000000000000000624000000000000000000000000f810
% bfe101010101010101010101010101010101010101010101010101ff90
% bfffffffffffffffffffffffffffffffffffffffffffffffffffffff90
% cfe444444444444444444444444444444444444444444444444444fe50
% 81e000000000000000000000000000000000000000000000000000f010
% 9131111111111111111111111111111111111111111111111111119110
% 8000000000000000000000000000000000000000000000000000000010
% c444444444444444444444444444444444444444444444444444444450
% 8000000000000000000000000000000000000000000000000000000010
% 8101010101010101010101010101010101010101010101010101010110
% 8000000000000000000000000000000000000000000c00000000000010
% c444444444444444444444444444444444444444444c44444444444450
% 8000000000000000000000000000000000000000000c00000000000010
% 9111111111fd1111131111111111111111111111111d11111111111110
% 8000000040100000078000000000000000000000001e00000000000010
% c44444444454444444c444444444444444444444445e44444444444450
% 8000000070100000084000000000000000000000001e00000000000010
% 8101010157110101186101010101010101010101013f01010101010110
% 800000009110000013a000000000000000000000003f00000000000010
% c4444444f5544444649444444444444444444444447744444444444450
% 8000000002100000649800000000000000000000000400000000000010
% 91111111171111114789111111111111111111119d1511111111111110
% 8000000000100000848400000000000000000001980400000000000010
% c444444444544445848644444444444444444445fc4444444444444450
% 8000000000100001038200000081f000030000f1b00400000000000010
% 8101010101110102000101010181210107810141d10501010101010110
% 80000000001000060001800000e0200004800042b18400000000000010
% c4444444445444440000c44444e4644448444444474444444444444450
% 800000000010000800004000012220001be00000020400000000000010
% 9111111111111118000071111177311114b11111111111111111111110
% 800000000010001000002000000a200024900000000000000000000010
% c44444444454446000001444444e6444679c4444444444444444444450
% 80000000001000600000180000042000c4880000000000000000000010
% 8101010101110140000009010101210184850101010101010101010110
% 8000000000100080000004000000200103860000000000000fc00c0010
% c4444444445445800000064444446447000244444444444445445e4450
% c000000000100100000002000000200200010000000000040100120010
% b111111111111200000003111111311400019111111111171111211110
% b000000000100600000001800000200c000080000000000501006f8010
% 9444444444544400000000c444446448000044444444444d554452c450
% 8800000000100800000000c000002010000060000000000b210092c010
% 8d010101011118000000006101012130000021010101010171019e4110
% 8400000000103000000000200000202000001000000000005101122010
% 8244444444546000000000344444644000001c44444444447546123450
% 830000000010600000000010000020c0000008000000000001060e1010
% 811111111111c00000000009111131800000051111111111111c000910
% 81800008001080000000000c0200210000000600000080000108000c10
% 80c4444c445580000000000446446600000002444444c4444558000450
% 8040000e001300000000000203802600000001000000e0000130000210
% 8061010b611200000000000303992400000001810101a7010120000310
% 802000126014000000000001048828000000008000012c000140000110
% 8014445c445c000000000000c75c7800000000444445c64445c00001d0
% 801800004018000000000000c008300000000060000002000180000090
% 800911115110000000000000513120000000003111111f111100000050
% 8004000000300000000000002000600000000010000000000300000070
% 8006444444fc0000000000003445f0000000001c444444444fc0000030
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
% 8003010101c0000002000000190180000200000d010101010c00080010
% 8003800000800000038000001c0300000380000e0000000008000e0010
% 8002c4444500000002800000144600000280000a4444444450000a2010
% 800240000300000004b800001204000004880009000000003000124010
% 800271111200000007080000131c0000071800099111111120001ce010
% 800220000400000000080000110800000028000880000000400000a010
% 800214444c0000000010000010d000000038000844444444c00000e010
% 8002181c080000000038000010f0000000100008600000008000000010
% 8002092510000000000000001060000000000008210101010000000010
% 80020c243000000000000000fc00000000000008100000030000000010
% 8002047c600000000000001000000000000000081c4444460000000010
% 8002022440000000000000100000000000000008080000040000000010
% 80020335c00000000000001c00000000000000080511111c0000000010
% 8002011c8000000000000014c000000000000008060000080000000010
% 800200c500000000000000244000000000000008024444500000000010
% 800200c3000000000000002cc000000000000008010000300000000010
% 8002004200000000000000004000000000000008018101600000000010
% 8002002400000000000000018000000000000008008000400000000010
% 8002003c000000000000000000000000000000080044e4c00000000010
% 8002001800000000000000000000000000000008006121800000000010
% 821f800000000000000000000000000000000008003131000000000010
% 82000000000000000000000000000000000000080011e2000000000010
% 8380000000000000000000000000000000000008001d66000000000010
% 8280000000000000000000000000000000000008000924000000000010
% 84980000000000000000000000000000000000080005e8000000000010
% 8598000000000000000000000000000000000008000618000000000010
% 8010000000000000000000000000000000000008000250000000000010
% 8010000000000000000000000000000000000008000120000000000010
% 80100000000000000000000000000000000000080001e0000000000010
% 80000000000000000000000000000000000000080000c0000000000010
% 800000000000000000000c00000000000000007e000000000000000010
% 800000000002000000000c000000000000002000000000000000000010
% 800000008c02000000001e3c0000000000002000000000000000000010
% 800000019802000000001e180000000000003800000000000000000010
% 80000001b802000000001e180000000000002800000000000000000010
% 80000001b002000000003f6c0000000000004980000000000000000010
% 80000030d0020000000004000000000000005b00000000000000000010
% 80000002b0020000000004000000000000000180000000000000000010
% 8000000001820000000004000000000000000080000000000000000010
% 8000000003020000000004000000000000000380000000000000000010
% 80000000021b8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000001f8000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 80000000000f0000000004000000000000000000000000000000000010
% 8000000000060000000004000000000000000000000000000000000010
% 8000000000060000000004000340000000000000000000000000000010
% 8000000000060000000004000140000000000000000000000000000010
% 8000000000060000000004000180000000000000000000000000000010
% 8000000000000000000004000180000000000000000000000000000010
% 8000000000000000000004000100000000000000000000000000000010
% 8000000000000000000004000740000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000078000000000000000000000000000010
% 800000000000000000007ffffff8000000000000000000000000000010
% 8000000000000000000004000070000000000000000000000000000010
% 8000000000000000000004000040000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000004000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000010
% fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 3 FMDOCUMENT
0 0 /Times-Italic FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
26.11 724.76 54.46 682.24 96.98 746.02 132.41 692.87 160.76 735.39 203.28 671.61 238.71 724.76
 252.89 703.5 252.89 767.28 26.11 767.28 10 Y
0 X
0 0 1 0 1 1 0 K
V
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
26.11 639.72 252.88 767.28 R
2 Z
0 0 0 1 0 0 0 K
N
26.11 703.5 252.89 703.5 2 L
N
26.11 724.76 54.46 682.24 96.98 746.02 132.41 692.87 160.76 735.39 203.28 671.61 238.71 724.76
 252.89 703.5 8 L
N
37.3 703.24 40.29 703.5 43.28 703.24 3 L
0 Z
N
43.28 682.5 40.29 682.24 37.3 682.5 3 L
N
40.29 703.25 40.29 682.49 2 L
N
71.62 703.76 68.63 703.5 65.65 703.76 3 L
N
65.65 745.76 68.63 746.02 71.62 745.76 3 L
N
68.63 703.75 68.63 745.77 2 L
N
122.34 703.24 125.33 703.5 128.32 703.24 3 L
N
128.32 693.13 125.33 692.87 122.34 693.13 3 L
N
125.33 703.25 125.33 693.12 2 L
N
142.49 703.76 139.5 703.5 136.51 703.76 3 L
N
136.51 735.13 139.5 735.39 142.49 735.13 3 L
N
139.5 703.75 139.5 735.14 2 L
N
179.03 703.24 182.02 703.5 185.01 703.24 3 L
N
185.01 671.87 182.02 671.61 179.03 671.87 3 L
N
182.02 703.25 182.02 671.86 2 L
N
227.53 703.76 224.54 703.5 221.55 703.76 3 L
N
221.55 724.5 224.54 724.76 227.53 724.5 3 L
N
224.54 703.75 224.54 724.51 2 L
N
0 10 Q
(h) 31.29 675.76 T
0 8 Q
(1) 36.29 673.26 T
0 10 Q
(h) 58 739.18 T
0 8 Q
(2) 63 736.68 T
0 10 Q
(h) 116.33 686.03 T
0 8 Q
(3) 121.33 683.53 T
0 10 Q
(h) 128.87 728.55 T
0 8 Q
(4) 133.87 726.05 T
0 10 Q
(h) 171.39 664.77 T
0 8 Q
(5) 176.39 662.27 T
0 10 Q
(h) 213.91 717.92 T
0 8 Q
(6) 218.91 715.42 T
0 10 Q
(b) 52.55 707.29 T
0 8 Q
(1) 57.55 704.79 T
0 10 Q
(b) 95.07 696.66 T
0 8 Q
(2) 100.07 694.16 T
0 10 Q
(b) 126.96 707.29 T
0 8 Q
(3) 131.96 704.79 T
0 10 Q
(b) 158.85 696.66 T
0 8 Q
(4) 163.85 694.16 T
0 10 Q
(b) 201.37 707.29 T
0 8 Q
(5) 206.37 704.79 T
0 10 Q
(b) 236.8 697.02 T
0 8 Q
(6) 241.8 694.52 T
1 10 Q
(q) 94.56 734.24 T
(q) 158.56 723.74 T
(q) 201.06 676.74 T
(q) 236.56 713.74 T
(q) 52.06 687.87 T
37.65 753.34 26.11 756.65 37.65 759.96 36.44 756.65 4 Y
V
241.35 759.96 252.89 756.65 241.35 753.34 242.55 756.65 4 Y
V
36.44 756.65 242.55 756.65 2 L
N
0 F
(TW) 133.56 757.94 T
75.37 662.1 72.06 650.56 68.75 662.1 72.06 660.89 4 Y
V
72.06 670.06 72.06 660.89 2 L
1 Z
N
195.83 738.82 199.13 750.35 202.44 738.82 199.13 740.02 4 Y
V
199.13 730.85 199.13 740.02 2 L
N
108.14 666.46 111.14 671.65 114.14 666.46 111.14 666.46 4 Y
V
111.14 643.31 111.14 666.46 2 L
N
130.76 649.81 135.96 646.81 130.76 643.81 130.76 646.81 4 Y
V
130.76 646.81 107.61 646.81 2 L
N
(x) 115.6 665.76 T
(y) 127.86 651.23 T
(-M) 52.23 663.61 T
0 8 Q
(r) 63.89 661.11 T
0 10 Q
(+M) 176.8 732.16 T
0 8 Q
(r) 191.88 729.66 T
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 2346 1795 a(Fig.)f(1.)32 b(The)24 b(triangle)g(zig-zag)g
(transition)g(mo)r(del.)2010 1989 y Fm(\(illustrated)i(in)f(Figure)g
(1\))h(is)f(constructed)g(b)n(y)f(placing)i(side-b)n(y-side)2010
2081 y(isosceles)33 b(triangles)f(of)g(alternating)f(orien)n(tations)h
(on)f(the)f(line)i(rep-)2010 2172 y(resen)n(ting)d(the)g(nominal)g
(transition)h(cen)n(ter.)44 b(The)30 b(triangle)g(heigh)n(ts)2010
2263 y(\()p Fh(h)2084 2271 y Fg(1)2119 2263 y Fh(;)13
b(h)2197 2271 y Fg(2)2232 2263 y Fh(;)g(:)g(:)g(:)p Fm(\))33
b(are)h(indep)r(enden)n(t)e(random)g(v)l(ariables)i(dra)n(wn)g(from)f
(a)2010 2355 y(probabilit)n(y)20 b(densit)n(y)e(function)i(\(p)r(df)6
b(\))19 b Fh(f)3183 2363 y Ff(H)3241 2355 y Fm(\()p Fh(h)p
Fm(\).)32 b(The)20 b(v)n(ertex)e(angle)j Fh(\022)g Fm(is)2010
2446 y(c)n(hosen)f(to)g(b)r(e)f(constan)n(t.)33 b(F)-6
b(or)19 b(relationships)i(relating)g(the)f(p)r(df)f Fh(f)3918
2454 y Ff(H)3976 2446 y Fm(\()p Fh(h)p Fm(\))2010 2537
y(and)26 b(the)g(v)n(ertex)g(angle)h Fh(\022)h Fm(to)f(the)f
(transition)h(pro\014le)g(shap)r(e)f(and)g(the)2010 2629
y(cross-trac)n(k)32 b(correlation)h(width,)g(resp)r(ectiv)n(ely)-6
b(,)32 b(see)g([1],)20 b([8].)53 b(While)2010 2720 y(the)29
b(ab)r(o)n(v)n(e)g(form)n(ulation)h(of)h(the)e(TZ-ZT)g(mo)r(del)g(is)h
(suited)g(only)f(for)2010 2811 y(mo)r(deling)23 b(isolated)i
(transitions,)h(equations)d(go)n(v)n(erning)h(in)n(tertransi-)2010
2902 y(tion)33 b(in)n(teractions)h(are)f(also)i(giv)n(en)e(in)f([1],)22
b([8],)36 b(making)c(the)g(mo)r(del)2010 2994 y(suitable)26
b(for)h(mo)r(deling)e(sequences)h(of)h(in)n(teracting)f(transitions.)
2062 3243 y Fj(I)r(I)r(I.)45 b(Model)31 b(V)-10 b(alid)n(a)k(tion)32
b(Pr)n(ocedure)f(and)g(Resul)-6 b(ts)2093 3421 y Fm(W)g(e)26
b(v)l(alidate)g(the)g(mo)r(del)g(in)g(t)n(w)n(o)h(steps.)36
b(First)27 b(w)n(e)f(consider)h(only)2010 3513 y(isolated)i
(transitions.)42 b(After)28 b(determining)f(the)h(mo)r(del)f
(parameters)2010 3604 y(for)j(isolated)h(transitions)g(w)n(e)e(ev)l
(aluate)h(the)f(mo)r(del)g(predictions)h(for)2010 3695
y(isolated)f(w)n(a)n(v)n(eform)e(shap)r(es)h(and)e(media)h(noise)h(for)
g(isolated)h(transi-)2010 3787 y(tions.)35 b(In)23 b(the)h(second)h
(step)f(w)n(e)h(determine)e(the)h(parameters)g(for)h(the)2010
3878 y(in)n(teracting)g(transitions)h(\(dibits\))e(and)g(sho)n(w)h(the)
g(mo)r(del)f(prediction)2010 3969 y(results.)2010 4210
y Fe(A.)43 b(Isolate)l(d)30 b(T)-6 b(r)l(ansitions)2093
4363 y Fm(The)23 b(quan)n(tities)g(that)g(go)n(v)n(ern)g(an)g(isolated)
h(transition)g(of)f(the)g(TZ-)2010 4454 y(ZT)33 b(mo)r(del)e(are)i(the)
f(p)r(df)g(of)h(the)f(triangle)h(heigh)n(ts)f Fh(f)3623
4462 y Ff(H)3681 4454 y Fm(\()p Fh(h)p Fm(\))g(and)g(the)2010
4545 y(v)n(ertex)39 b(angle)i Fh(\022)r Fm(.)77 b(W)-6
b(e)39 b(\014rst)h(go)g(o)n(v)n(er)g(the)f(pro)r(cedure)h(for)h(c)n(ho)
r(os-)2010 4637 y(ing)h(these)g(quan)n(tities.)84 b(The)42
b(recording)h(system)e(w)n(e)i(considered)2010 4728 y(had)26
b(the)g(follo)n(wing)j(c)n(haracteristics.)38 b(The)27
b(media)f(w)n(as)h(an)g(isotropic)2010 4819 y(cobalt-allo)n(y)35
b(thin)e(\014lm)g(medium)e(with)j(co)r(ercivit)n(y)h
Fh(H)3672 4827 y Ff(c)3738 4819 y Fm(=)g(2050Oe)2010
4911 y(and)26 b(remanence-thic)n(kness)g(pro)r(duct)g
Fh(M)3234 4919 y Ff(r)3269 4911 y Fh(\016)f Fm(=)e(2)p
Fh(:)p Fm(14mem)n(u/cm)3888 4879 y Fg(2)3921 4911 y Fm(.)38
b(An)2010 5002 y(inductiv)n(e)44 b(head)h(w)n(as)i(used)e(for)h(b)r
(oth)f(reading)h(and)e(writing)j(to)2010 5093 y(a)n(v)n(oid)29
b(additional)g(nonlinearities)i(in)n(tro)r(duced)d(b)n(y)f(a)i
(magnetoresis-)2010 5185 y(tiv)n(e)20 b(\(MR\))f(head.)32
b(The)20 b(head)g(\015ew)g(at)g(a)g(\015ying)g(heigh)n(t)f
Fh(d)i Fm(=)g(0)p Fh(:)p Fm(807)p Fh(\026)p Fm(in,)2010
5276 y(writing)g(a)g(trac)n(k)e(of)i(width)f Fh(T)11
b(W)31 b Fm(=)21 b(5)p Fh(:)p Fm(7)p Fh(\026)p Fm(m.)33
b(All)21 b(measuremen)n(ts)d(w)n(ere)2010 5367 y(tak)n(en)f(at)g(the)g
(inner)g(radius)h(of)g(the)e(disk)h(so)h(that,)h(ev)n(en)e(at)g(mo)r
(derately)2010 5459 y(lo)n(w)27 b(writing)g(frequencies,)f(the)g
(nonlinear)g(writing)h(e\013ects)f(could)g(b)r(e)2010
5550 y(observ)n(ed.)p eop
2705 1 bop -152 -297 a Fp(IEEE)26 b(T)-7 b(ransactions)26
b(on)h(Magnetics,)g(v)n(ol.)g(33,)f(pp.)i(2704-2706,)c(Sept.)k(1997.)
1571 b Fo(2705)-58 1197 y @beginspecial 81 @llx 607 @lly
539 @urx 734 @ury 4818 @rwi @setspecial
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000018000640020104000000000000000080000
% 000c0000000100600010006000000000020000000001001900008200000000000000002000000000818000200020100000000000000000000000
% 040c000000000020001000200000000000000000000104080000800000000000000000000000001c81cfcf2da4ee1eeb39df9f873bf3dcfa9de0
% e40ed73f1dc3a72edc71e92ae1cefcf776aef0000001e40bdbb8f6ace77e7e1cefcf776aef00001082494925252e12724a0992844a524c4b2520
% 6412571321c1c9269c91292ce112949322d2900000012409939092c928264a112949322d29000010824949252528125a498a92844a525449a520
% a41264151901692a9091292681129495227290000001240992109269262a4a11294952272900001c866d4f6dbdee1aeb339bda873353deda99a0
% f4332737b9c3a66fdcf1ef6ae1ccd4f7e6acd0000001e433dbb0d6acce6f6a1ccd4f7e6acd000000800008000000000002400000000200000000
% 0400000024000000000100000000008000000000000004000000000009000000000800000000000000000c000000000003800000000300000000
% 000000003800000000018000000000c00000000000000000000000000e000000000c000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000019e6000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000929000000000000000000000000000000000003cc0000000000000000000000000000000000
% 00000000000000000000000000000000000000000869000000000000000000000000000000000002520000000000000000000000000000000000
% 000007fffffffffffffffffffffffffffffc000008493fffffffffffffffffffffffffffffe00002523fffffffffffffffffffffffffffffc000
% 00000000800800800800800400400400400400000889000080010002000200040008001000200003d20000800100020004000800100020004000
% 000000000000000000000000000000000004000019e6000000000000000000000000000000200000920000000000000000000000000000004000
% 000000000000000000000000000000000004000000000000000000000000000000000000002000018c0000000000000000000000000000004000
% 00000000000002000000000000000000000400000000000000000000000000000000000000200000000000000000000000000000000000004000
% 00000000000000000000000000000000000400000000000000004000000000000000000000200000000000000000000000000000000000004000
% 34030000000af7e00000000000000000000400000000000000000000000000000000000000200000000000000008000007f00000000000004000
% 34010000000c932c00000000000000000004000000000000015ede00000000000000000000200000000000000000000004100000000000004000
% 3c01043fffe693200000c000000000000004000000000000019252c00003fc000000000000200000000000002bdf800004100000000000004000
% 00010000000af7a00000c00000000000000400000000000000d2520000020400000000000020000000000000324cb00004100000000000004000
% fc010000000080000000c00000000000000400000000007f815eda00000204000000000000200000002000001a4c800004100000000000004000
% 240300000000c0000000c0000000000000040000000000408010000000020400000aa2115420000000000ff02bde800004100000000000004000
% 24000000000000000000c0000000000000040000000000408018000000020400000a2412502000000000081002000000041c00002a8822a84000
% 3c000000000000000000c000000000000004000000000040800000000002040000020c0610200000000008100300000004120000289024a04000
% 00000000000000010000c0000000000000040000000000408000000001020400000208c41020000000000810000000000432000008300c204000
% 3c000000000000010000c0000000000000040000000000408000002002820403fff21008102000000000081000000000045207ffe82188204000
% 04000000000af9e70000c00000000000000400000000204080000020026204000002321910600000000008100000040004910000084010204000
% 04000000000c992900014000000000000004000000000040815bbce00412040000000000002000000000081000000403f511000008c832204000
% 3c0000000006a929000140000000000000040000000000408191a520040e04000000000000200000000008102be79c0216110000000000004000
% 00000000000afdaf00012000000000000004000000003fc0fcd2a520040204000000000000200000000008103264a40214108000000000004000
% 240000000000000000012000000000000004000000000000015bf5e00403040000000000002000000007f81f9aa4a4021c108000000000004000
% 7c000000000000000001200000000000000400000000000000000000080284000000000000200000002000002bf6bc0214104000000000004000
% 00000400000000000001200000000000000400000000000000000000080244000000000000200000000000000000000234104000000000004000
% bc0000000000000000012000000000000004000000000000000000000802240000000000002000000000000000000002541fe000000000004000
% 24000000000000000001200000000000000400000000000000000000100224000000000000200000000000000000000254182000000000004000
% fc000000000000000001200000000000000400000000000000000000100214000000000000200000000000000000000294182000000000004000
% 8400000000000000000120000000000000040000000000000000000010020c000000000000200000000000000000000314183000000000004000
% 0000000000000000000120000000000000040000000000000000000020020c000000000000200000000000000000000314183000000000004000
% 38000000000000000001200000000000000400000000000000000000200204000000000000200000000000000000000214183000000000004000
% 240000000000000000012000000000000004000001a60000000000002002040000000000002000018c0000000000000214182800000000004000
% 250000000000000000012000000000000004000001a9000000000000200206000000000000200003120000000000000614182800000000004000
% 3f0000000000000000012000000000000004000000c9200000000000400205000000000000600003d20000000000000a14182400000000004000
% 000000000000000000012000000000000004000000e9000000000000400205000000000000200002522000000000000a14182400000000004000
% 00000000000aa2115401200000000000000400000129000000000000400204800000000000200002520000000000001214182400000000004000
% 3c000000000a241250012000000000000004000000e6000000000000800204400000000000200001cc0000000000002214182200000000004000
% 2000000000020c061001200000000000000400000000000000000000800204400000000000200000000000000000002214182200000000004000
% 3c000000000208c41001200000000000000400000000000000000000800204200000000000200000000000000000004214182200000000004000
% 20000478f3c210081001200000000000000400000000000000000000800204200000000000200000000000000000004214182100000000004000
% 24000000000232191001200000000000000400000000000000000001000204200000000000200000000000000000008214182100000000004000
% 3c000000000000000001200000000000000400000000000000000001000205fe0000000000200000000000000000010214182080000000004000
% 0000000000000000000220000000000000040000000000000000000100020512000000000020000000000000000003fa14182fe0000000004000
% 04000000000000000002200000000000000400000000000000000002000205120000000000200000000000000000020a141828a0000000004000
% 3c0000000000000000023000000000000004000000000000000000020002050a0000000000200000002000000000020a14182860000000004000
% 340000000000000000023000000000000004000000000000000000020ffa050a0000000000200000000000000000060a14182860000000004000
% 2c000000000000000002100000000000000400000000000000000004080a050a0000000000200000000000000001fe0a14182820000000004000
% 00000000000000000002100000000000000400000000000000000004080a050600000000002000000000000000010e0a14182820000000004000
% 00000000000000000002100000000000000400000000000000000004080a050600000000002000000000000000010e0a14182820000000004000
% 00000000000000000002100000000000000400000000200000000004080a05060000000000600000000000000001160a14182830000000004000
% fc000000000000000002100000000000000400000000000000000008080a05020000000000200000000000000001160a14182830000000004000
% 24000000000000000002100000000000000400000000000000000008080a05020000000000200000000000000001260a14182828000000004000
% 24000000000000000002100000000000000400000000000000000010080a05020000000000200000000000000001260a14182828000000004000
% 3c000400000000000002100000000000000400000000000000000010080a05030000000000200000000000000001460a14182828000000004000
% 00000000000000000002100000000000000400000000000000000010080a05030000000000200000000000000001460a14182824000000004000
% 00000000000000000002100000000000000400000000000000000020080a05030000000000200000002000000001860a14182824000000004000
% 34000000000000000002100000000000000400000000000000000020080a05028000000000200000000000000001860a14182824000000004000
% 34000000000000000002100000000000000400000000000000000020080a05028000000000200000000000000001060a14182822000000004000
% 3c000000000000000002100000000000000400000000000000000040080a0502ff00000000200000000000000001060a14182822000000004000
% 04000000000000000002100000000000000400000000000000000040080a0502c100000000200000000000000003060a14182821000000004000
% 30000000000000000002100000000000000400000000000000000040080a0502c100000000200000000000000003060a14182821000000004000
% 1c000000000000000006100000000000000400000000000000000080080a0502a100000000200000000000000005060a14182821000000004000
% 24000000000000000006100000000000000400000046000000000080080a0502a100000000200000000000000005060a14182820800000004000
% 000000000000000000040800000000000004000000c900000000009ff80a0502a1000000002000038c0000000009060a14182820800000004000
% bc0000000000000000040800000000000004000000c9000000000110180a05029100000000200000920000000009060a14182820400000004000
% 240000000000000000040800000000000004000001e9200000003fd0180a05029100000000600001922000000011060a14182820400000004000
% 000000000000000000040800000000000004000001e9000000002250180a05029100000000200000d20000000011060a14182820400000004000
% fc000000000000000004080000000000000400000046000000002250180a05028900000000200000520000000021060a1418283fe00000004000
% 84000400000000000004080000000000000400000000000000002250180a050285000000002000038c0000000041060a14182830600000004000
% 04000000000000000004080000000000000400000000000000002450180a05028300000000200000000000000081060a14182830600000004000
% 3c0000000000000000040c0000000000000400000000000000002450180a05028100000000200000000000000081060a14182830500000004000
% 3400000000000000000c0c0000000000000400000000000000002450180a05028180000000200000000000000101060a14182830500000004000
% 2c00000000000000000c040000000000000400000000000000002850180a05028180000000200000000000000201060a14182830480000004000
% 00000000000000000008060000000000000400000000000000002850180a05028140000000200000000000000201060a14182830480000004000
% 00000000000000000008060000000000000400000000000000002850180a05028120000000200000000000000401060a14182830440000004000
% 3c000000000000000008030000000000000400000000000000003050180a050281100000002000000000000009fd060a14182830420000004000
% 20000000000000000018010000000000000400000000000000003050180a05028108000000200000002000000905060a14182830420000004000
% 3c000000000000000010038000000000000400000000000000002050180a05028104000000200000000000001105060a14182830410000004000
% 2000000000000000003002c0000000000004000000000000007fe050180a0502817f800000200000000000002105060a14182830410000004000
% 2400000000000000006001700000000000040000000000000040e050180a05028142800000200000000000004105060a14182830408000004000
% 3c0000000000000001e0019fe000000000040000000000000040a050180a05028141800000200000000000004105060a14182830408000004000
% 2003000000000000ffc000703e78000000040000000020000041a050180a05028140800000600000000000008105060a14182830404000004000
% 3c048000001fffffbe00001fb7cffc00003c0000000000000041a050180a05028140800000200000000000010105060a14182830404000004000
% 24048700007fb7fc0000000006fdbf001ff40000000000000042a050180a05028140c00000200000000000020105060a14182830402000004000
% 000483f800c000000000000000000181fe040000000000000044a050180a05028140a00000200000000000040105060a14182830402000004000
% 3804800fc080000000000000000000c7c0040000000000000044a050180a05028140900000200000000000080105060a141828307f9000004000
% 24030000f3800000000000000000005800040000000000000048a050180a0502814090000020000000200008ff05060a14182830609000004000
% 240000001f00000000000000000000700004000000000000ff50a050180a05028140880000200000000000108305060a14182830608800004000
% 3800000006000000000000000000000000040000000000008150a050180a05028140840000200000000000208305060a14182830608400004000
% 0000000000000000000000000000000000040000000000008160a050180a05028140840000200000000000408305060a14182830608400004000
% 3c0000000000000000000000000000000004000000000000ffc0a050180a05028140bfc000200000000000808305060a14182830608200004000
% 2000000000000000000000000000000000040000000000018140a050180a05028140a1c000200000000001008305060a14182830608300004000
% 2400000000000000000000000000000000040000000000068140a050180a05028140a06000200000000002008305060a141828306080c0004000
% 3c00000000000000000000000000000000040000000000088140a050180a05028140a0580020000000001c008305060a14182830608030004000
% 0000000000000000000000000000000000040000000001fe8140a050180a05028140a04600200000000fe0008305060a1418283060800c004000
% 0000000000000000000000000000000000040000000001428140a050180a05028140a04140200000003000008305060a1418283060bf83004000
% 0000000080080080080080040040040040040000000001828141a052180a05068148a0503f200000000000808305060a1418283070a0a0bc4000
% 000007fffffffffffffffffffffffffffffc000000003fffffffffffffffffffffffffffffe00000003fffffffffffffffffffffffffffffc000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000230000f300000c00007980001180000000001878000060c00000180000060c000030f00000c340000000000000c0000000000000c3c00
% 00000006480009480001200004a40003240000000002448000090400000240000090400004890000123400000000000004000000000000042400
% 00000006480003480001200001a40003240000000002418000090400000240000090400004830000121800000000000004000000000000040c00
% 0000006f480062480001200001240007a4000000001a410000690400000240000090400004820000121c00000000000004000000000000040800
% 0000000f480004480001200002240007a40000000002420000090400000240000090400004840000122400000000000004000000000000041000
% 0000000230000f300000c000079800011800000000019f8000066c00000180000066c000033f00000cdc0000000000000c0000000000000cfc00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000400000000100480040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000400000000100400080000000000000000000000000001800480004000000000000000000000000000190008000032002000000000
% 00000000001cef4f0dfb941dab09c000000000000000000000000000800000008000000000000000000000000000080008000010002000000000
% 0000000000252709689a1824b20b40000000000000000000000007a4d70db7ce9c0000000000000000000079ddfb8ba73877e796e4ee00000000
% 000000000025278908aa14249a12c0000000000000000000000004a4e704a5c4b4000000000000000000004a492989674834a492a52e00000000
% 00000000003cc48d0dbf9e3dab73c0000000000000000000000004a4b404a5052c000000000000000000004a492a89444854a492a52800000000
% 000000000000000000000000001000000000000000000000000007bdd705b7cd3c000000000000000000006999abdbd7787ea7b6fdee00000000
% 00000000000000000000000000000000000000000000000000000400000400010000000000000000000000000000000000000400000000000000
% 00000000000000000000000000000000000000000000000000000600001c00000000000000000000000000000000000000000600000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 2 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 67 214 539 580 128.78 98.82 93.94 622.59 FMBEGINEPSF
save
countdictstack
mark
newpath
/showpage {} def


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  577   341  5728  4476 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
1430 4615 mt 1430 4561 L
1430  389 mt 1430  443 L
1266 4784 mt 
(-40) s
1966 4615 mt 1966 4561 L
1966  389 mt 1966  443 L
1802 4784 mt 
(-30) s
2503 4615 mt 2503 4561 L
2503  389 mt 2503  443 L
2339 4784 mt 
(-20) s
3040 4615 mt 3040 4561 L
3040  389 mt 3040  443 L
2876 4784 mt 
(-10) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4114 4615 mt 4114 4561 L
4114  389 mt 4114  443 L
4034 4784 mt 
(10) s
4651 4615 mt 4651 4561 L
4651  389 mt 4651  443 L
4571 4784 mt 
(20) s
5188 4615 mt 5188 4561 L
5188  389 mt 5188  443 L
5108 4784 mt 
(30) s
5724 4615 mt 5724 4561 L
5724  389 mt 5724  443 L
5644 4784 mt 
(40) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 579 4668 mt 
(-0.2) s
 898 3965 mt  952 3965 L
6256 3965 mt 6202 3965 L
 783 4018 mt 
(0) s
 898 3315 mt  952 3315 L
6256 3315 mt 6202 3315 L
 663 3368 mt 
(0.2) s
 898 2665 mt  952 2665 L
6256 2665 mt 6202 2665 L
 663 2718 mt 
(0.4) s
 898 2014 mt  952 2014 L
6256 2014 mt 6202 2014 L
 663 2067 mt 
(0.6) s
 898 1364 mt  952 1364 L
6256 1364 mt 6202 1364 L
 663 1417 mt 
(0.8) s
 898  714 mt  952  714 L
6256  714 mt 6202  714 L
 783  767 mt 
(1) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
22 -1 21 -2 21 -3 21 -5 22 -5 21 -7 21 -7 22 -7 
21 -6 21 -6 22 -4 21 -3 21 -3 22 -3 21 -2 21 -3 
22 -2 21 -3 21 -3 22 -3 21 -4 21 -3 22 -4 21 -5 
21 -4 22 -5 21 -6 21 -6 21 -7 22 -7 21 -7 21 -6 
22 -3 21 -1 21 3 22 7 21 12 21 15 22 17 21 19 
21 17 22 15 21 12 21 9 22 6 21 5 21 3 22 2 
21 2 21 1 22 1 21 1 21 1 22 1 21 0 21 1 
21 0 22 1 21 0 21 1 22 0 21 0 21 1 22 0 
21 0 21 0 22 1 21 0 21 0 22 0 21 1 21 0 
22 0 21 0 21 1 22 0 21 0 21 0 22 1 21 0 
21 1 21 1 22 2 21 2 21 1 22 2 21 2 21 1 
22 1 21 1 21 1 22 2 21 2 21 2 22 3 21 3 
21 3 22 4 21 4 4046 3919 100 MP stroke
21 6 22 5 21 7 21 9 22 10 21 12 21 16 22 20 
21 27 21 37 21 50 22 71 21 98 21 142 22 208 21 296 
21 392 22 466 21 485 21 438 22 305 21 105 21 -119 22 -317 
21 -445 21 -488 22 -465 21 -387 21 -290 22 -202 21 -136 21 -95 
22 -66 21 -48 21 -35 21 -27 22 -20 21 -16 21 -12 22 -10 
21 -8 21 -7 22 -6 21 -6 21 -4 22 -4 21 -4 21 -3 
22 -3 21 -2 21 -2 22 -2 21 -1 21 -1 22 -2 21 -1 
21 -1 22 -2 21 -2 21 -2 22 -2 21 -1 21 -1 21 -1 
22 0 21 0 21 0 22 -1 21 0 21 0 22 0 21 -1 
21 0 22 0 21 0 21 0 22 -1 21 0 21 0 22 0 
21 -1 21 0 22 0 21 0 21 -1 22 0 21 -1 21 0 
21 0 22 -1 21 -1 21 0 22 -1 21 -1 21 -1 22 -2 
21 -2 21 -3 22 -4 1935 3982 100 MP stroke
21 -5 21 -7 22 -11 21 -14 21 -17 22 -20 21 -21 21 -20 
22 -18 21 -14 21 -9 22 -5 21 -1 21 3 22 4 21 7 
21 6 21 7 22 6 21 6 21 5 22 4 21 4 21 4 
22 3 21 4 21 3 22 3 21 3 21 3 22 3 21 4 
21 5 22 6 21 8 21 10 22 12 21 11 21 11 22 10 
21 7 21 5 21 3 22 2 21 2 21 2 22 1 21 1 
21 1 22 1 21 1 848 3963 52 MP stroke
SO
6 0 5 -1 5 0 6 0 5 -1 5 0 6 -1 5 -1 
5 -1 6 0 5 0 5 -1 6 0 5 0 5 -1 6 -1 
5 0 5 -2 6 -1 5 -1 5 0 6 -1 5 -1 5 0 
6 -1 5 -1 5 0 6 -1 5 -1 5 -1 6 -1 5 -2 
5 -1 6 -1 5 -1 5 -1 6 -1 5 -1 5 -2 5 -1 
6 -1 5 -2 5 -1 6 -1 5 -1 5 -1 6 -1 5 -1 
5 -1 6 -1 5 -2 5 -1 6 -1 5 0 5 -1 6 -1 
5 -1 5 -1 6 -1 5 -1 5 0 6 -1 5 0 5 -1 
6 0 5 0 5 0 6 -1 5 -1 5 -1 6 -1 5 -2 
5 -1 6 -1 5 0 5 -1 6 1 5 0 5 -1 6 0 
5 0 5 -1 6 -1 5 0 5 -1 6 -1 5 0 5 0 
6 -1 5 -1 5 -1 6 -1 5 -1 5 0 6 -1 5 -1 
5 -2 6 -1 5 -2 5789 4009 100 MP stroke
5 -2 6 -1 5 -2 5 -1 6 -1 5 -1 5 0 6 -1 
5 -1 5 -1 6 -2 5 -1 5 -1 6 -2 5 -1 5 -1 
6 -1 5 -1 5 -1 6 -1 5 -1 5 -2 6 -2 5 -2 
5 -2 6 -1 5 -2 5 -1 6 -2 5 -1 5 -2 6 -2 
5 -1 5 -2 6 -1 5 -2 5 -1 6 -1 5 -1 5 -1 
6 -2 5 -2 5 -2 6 -3 5 -2 5 -3 5 -3 6 -3 
5 -3 5 -4 6 -3 5 -4 5 -4 6 -3 5 -4 5 -3 
6 -3 5 -3 5 -2 6 -3 5 -2 5 -3 6 -2 5 -3 
5 -2 6 -3 5 -2 5 -1 6 -2 5 -1 5 -1 6 0 
5 1 5 1 6 0 5 2 5 2 6 3 5 4 5 5 
6 6 5 6 5 7 6 7 5 8 5 8 6 8 5 8 
5 7 6 8 5 7 5 6 6 7 5 6 5 6 6 5 
5 5 5 4 6 4 5261 4002 100 MP stroke
5 3 5 4 6 3 5 3 5 3 6 2 5 3 5 3 
6 2 5 3 5 2 6 3 5 2 5 3 6 2 5 2 
5 2 6 2 5 2 5 2 6 2 5 2 5 2 6 2 
5 2 5 0 6 0 5 -1 5 -1 6 -1 5 -1 5 -1 
6 1 5 1 5 2 6 3 5 3 5 4 6 3 5 3 
5 3 6 2 5 1 5 1 6 1 5 -1 5 0 6 -2 
5 -1 5 -2 6 -3 5 -2 5 -3 5 -3 6 -2 5 -2 
5 -1 6 -1 5 0 5 0 6 1 5 2 5 2 6 2 
5 4 5 2 6 3 5 3 5 2 6 1 5 1 5 0 
6 -1 5 0 5 -1 6 -1 5 0 5 0 6 -1 5 0 
5 1 6 0 5 0 5 2 6 1 5 2 5 2 6 3 
5 2 5 2 6 3 5 2 5 2 6 2 5 2 5 2 
6 1 5 0 5 0 4734 3893 100 MP stroke
6 0 5 -1 5 -1 6 -2 5 -3 5 -2 6 -3 5 -2 
5 -2 6 -2 5 -3 5 -2 6 -2 5 -3 5 -2 6 -3 
5 -2 5 -1 6 -2 5 -1 5 -1 6 0 5 0 5 0 
6 1 5 1 5 2 6 1 5 3 5 2 6 2 5 2 
5 2 6 1 5 2 5 1 6 1 5 1 5 1 6 1 
5 1 5 1 6 1 5 1 5 1 6 0 5 1 5 1 
6 1 5 0 5 1 6 0 5 1 5 1 6 1 5 1 
5 1 6 2 5 1 5 1 5 2 6 1 5 1 5 1 
6 2 5 1 5 1 6 2 5 2 5 2 6 2 5 1 
5 2 6 1 5 2 5 1 6 1 5 1 5 1 6 2 
5 1 5 1 6 1 5 1 5 0 6 1 5 0 5 0 
6 0 5 -1 5 0 6 -1 5 0 5 -1 6 0 5 0 
5 1 6 0 5 0 4206 3859 100 MP stroke
5 0 6 0 5 0 5 0 6 0 5 0 5 1 6 0 
5 1 5 0 6 1 5 0 5 1 6 1 5 1 5 1 
6 2 5 1 5 2 6 2 5 2 5 2 6 3 5 3 
5 2 6 3 5 3 5 3 6 3 5 4 5 3 6 3 
5 3 5 4 6 3 5 3 5 3 6 3 5 3 5 2 
6 2 5 1 5 1 6 1 5 1 5 1 6 2 5 3 
5 3 6 3 5 4 5 4 6 5 5 6 5 6 6 6 
5 7 5 7 6 8 5 8 5 8 6 9 5 9 5 9 
6 10 5 9 5 10 5 10 6 11 5 11 5 11 6 12 
5 13 5 14 6 14 5 15 5 15 6 15 5 16 5 17 
6 19 5 19 5 22 6 24 5 26 5 28 6 32 5 33 
5 37 6 39 5 44 5 48 6 56 5 64 5 72 6 82 
5 93 5 104 6 116 3678 2512 100 MP stroke
5 124 5 134 6 139 5 143 5 143 6 142 5 137 5 131 
6 122 5 114 5 102 6 90 5 78 5 66 6 52 5 40 
5 26 6 14 5 1 5 -12 6 -25 5 -38 5 -51 6 -62 
5 -76 5 -86 6 -98 5 -108 5 -117 6 -124 5 -131 5 -136 
6 -139 5 -140 5 -138 6 -135 5 -129 5 -123 6 -115 5 -106 
5 -97 6 -89 5 -80 5 -71 6 -65 5 -58 5 -52 6 -47 
5 -42 5 -37 6 -34 5 -30 5 -28 6 -25 5 -22 5 -21 
6 -19 5 -18 5 -16 6 -15 5 -14 5 -12 6 -12 5 -10 
5 -10 6 -10 5 -8 5 -8 6 -8 5 -7 5 -6 5 -7 
6 -6 5 -5 5 -6 6 -5 5 -5 5 -4 6 -5 5 -4 
5 -4 6 -3 5 -3 5 -4 6 -3 5 -3 5 -4 6 -2 
5 -3 5 -3 6 -2 5 -3 5 -2 6 -2 5 -3 5 -2 
6 -2 5 -2 5 -2 3151 3873 100 MP stroke
6 -2 5 -2 5 -2 6 -1 5 -1 5 -1 6 -1 5 -1 
5 -1 6 -2 5 -1 5 -1 6 -2 5 -2 5 -2 6 -1 
5 -2 5 -1 6 -1 5 -2 5 -1 6 -2 5 -1 5 -1 
6 -1 5 0 5 -1 6 0 5 0 5 0 6 0 5 0 
5 0 6 1 5 0 5 0 6 0 5 0 5 0 6 0 
5 0 5 -1 6 0 5 0 5 0 6 0 5 0 5 0 
6 -1 5 0 5 -1 6 0 5 -1 5 0 6 -1 5 0 
5 -1 6 0 5 -1 5 0 6 0 5 -1 5 0 6 0 
5 0 5 -1 6 0 5 0 5 0 6 -1 5 -1 5 0 
6 0 5 0 5 -1 6 0 5 0 5 0 5 0 6 0 
5 0 5 0 6 0 5 0 5 0 6 0 5 0 5 1 
6 0 5 1 5 0 6 -1 5 0 5 0 6 -1 5 -1 
5 -1 6 0 5 0 2623 3922 100 MP stroke
5 0 6 1 5 0 5 0 6 0 5 0 5 -1 6 0 
5 -1 5 0 6 0 5 0 5 0 6 0 5 0 5 0 
6 0 5 0 5 0 6 -1 5 0 5 0 6 0 5 -1 
5 0 6 -1 5 -1 5 0 6 0 5 0 5 0 6 1 
5 0 5 0 6 0 5 0 5 -1 6 -1 5 0 5 -1 
6 0 5 0 5 -1 6 0 5 0 5 0 6 0 5 1 
5 0 6 0 5 0 5 1 6 0 5 0 5 0 6 1 
5 0 5 0 6 0 5 0 5 0 6 -1 5 0 5 0 
6 -1 5 0 5 -1 6 0 5 -1 5 0 6 -1 5 0 
5 1 6 -1 5 0 5 0 6 -1 5 0 5 -1 6 0 
5 -1 5 0 6 0 5 0 5 0 5 0 6 1 5 -1 
5 0 6 -1 5 0 5 -1 6 -1 5 0 5 -1 6 0 
5 -1 5 0 6 -1 2095 3941 100 MP stroke
5 -1 5 0 6 0 5 0 5 0 6 0 5 -1 5 0 
6 -1 5 0 5 -1 6 -1 5 -1 5 -1 6 0 5 -1 
5 0 6 0 5 0 5 -1 6 -1 5 -1 5 0 6 -2 
5 0 5 -1 6 0 5 -1 5 -1 6 0 5 -1 5 -1 
6 0 5 -1 5 -1 6 -2 5 -1 5 -2 6 -2 5 -2 
5 -3 6 -2 5 -3 5 -3 6 -4 5 -4 5 -5 6 -5 
5 -5 5 -6 6 -6 5 -8 5 -9 6 -9 5 -10 5 -10 
6 -11 5 -11 5 -11 6 -11 5 -11 5 -10 6 -11 5 -9 
5 -8 6 -8 5 -7 5 -5 6 -4 5 -3 5 -3 6 -1 
5 -1 5 0 6 1 5 1 5 1 6 2 5 1 5 2 
6 2 5 2 5 2 6 3 5 2 5 3 6 3 5 3 
5 4 6 3 5 4 5 4 5 4 6 3 5 3 5 3 
6 2 5 3 5 2 1568 4124 100 MP stroke
6 2 5 3 5 1 6 2 5 2 5 2 6 2 5 2 
5 2 6 2 5 2 5 2 6 2 5 2 5 2 6 1 
5 2 5 1 6 2 5 1 5 1 6 2 5 2 5 1 
6 2 5 1 5 2 6 1 5 1 5 1 6 2 5 1 
5 1 6 1 5 2 5 1 6 2 5 1 5 1 6 2 
5 1 5 1 6 2 5 1 5 1 6 1 5 1 5 1 
6 1 5 1 5 1 6 1 5 1 5 1 6 1 5 1 
5 0 6 1 5 1 5 1 6 1 5 0 5 1 6 1 
5 1 5 1 6 1 5 0 5 0 6 1 5 0 5 1 
6 1 5 1 5 1 6 1 5 0 5 1 6 0 5 1 
5 1 6 1 5 1 5 0 6 1 5 1 5 1 6 1 
5 1 5 1 6 0 5 1 5 1 6 1 5 0 5 1 
6 1 5 0 5 1 1040 4010 100 MP stroke
5 1 6 1 5 0 5 1 6 0 5 1 5 1 6 1 
5 1 5 0 987 4003 11 MP stroke

gr 

end

eplot

epage
end

showpage

cleartomark
countdictstack exch sub { end } repeat
restore

FMENDEPSF
0 0 0 0 1 1 1 K
98 620.67 223.67 625.67 R
7 X
V
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(normalized amplitude) 0 -270 87.19 629.94 TF
J
(-20) 130.05 618.33 T
(0) 160.38 618.33 T
(20) 182.05 618.33 T
(down-track dist./) 123.33 608.67 T
1 F
(a) 191.1 608.67 T
92.25 620.22 100.5 724.97 R
7 X
V
1 Z
N
0 F
0 X
(1) 94 710.33 T
(0) 94 637.33 T
0 71 214 546 584 128.24 99.89 252.88 623.05 FMBEGINEPSF
save
countdictstack
mark
newpath
/showpage {} def


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  621   260  5784  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 714 4784 mt 
(-0.2) s
1568 4615 mt 1568 4561 L
1568  389 mt 1568  443 L
1344 4784 mt 
(-0.15) s
2238 4615 mt 2238 4561 L
2238  389 mt 2238  443 L
2054 4784 mt 
(-0.1) s
2907 4615 mt 2907 4561 L
2907  389 mt 2907  443 L
2683 4784 mt 
(-0.05) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(0) s
4247 4615 mt 4247 4561 L
4247  389 mt 4247  443 L
4107 4784 mt 
(0.05) s
4917 4615 mt 4917 4561 L
4917  389 mt 4917  443 L
4817 4784 mt 
(0.1) s
5586 4615 mt 5586 4561 L
5586  389 mt 5586  443 L
5446 4784 mt 
(0.15) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6156 4784 mt 
(0.2) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 3911 mt  952 3911 L
6256 3911 mt 6202 3911 L
 703 3964 mt 
(20) s
 898 3206 mt  952 3206 L
6256 3206 mt 6202 3206 L
 703 3259 mt 
(40) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 703 2555 mt 
(60) s
 898 1798 mt  952 1798 L
6256 1798 mt 6202 1798 L
 703 1851 mt 
(80) s
 898 1093 mt  952 1093 L
6256 1093 mt 6202 1093 L
 623 1146 mt 
(100) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 623  442 mt 
(120) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
428 70 428 212 428 598 428 493 428 1268 428 669 427 282 428 -1444 
428 -1197 428 -634 428 -35 428 -282 1116 4615 13 MP stroke
0 317 324 0 0 -317 41 0 40 0 0 845 324 0 0 -845 
41 0 40 0 0 1726 324 0 0 -1726 41 0 40 0 0 2465 
324 0 0 -2465 41 0 40 0 0 3839 324 0 0 -3839 41 0 
40 0 0 2324 324 0 0 -2324 41 0 40 0 0 1514 324 0 
0 -1514 41 0 40 0 0 1409 324 0 0 -1409 41 0 40 0 
0 845 324 0 0 -845 41 0 40 0 0 423 324 0 0 -423 
40 0 41 0 0 141 324 0 0 -141 40 0 1105 4615 55 MP stroke
5358 0 898 4615 2 MP stroke

gr 

end

eplot

epage
end

showpage

cleartomark
countdictstack exch sub { end } repeat
restore

FMENDEPSF
0 77 214 539 584 124.73 99.89 405.97 622.89 FMBEGINEPSF
save
countdictstack
mark
newpath
/showpage {} def


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  701   260  5604  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 798 4784 mt 
(0.8) s
1568 4615 mt 1568 4561 L
1568  389 mt 1568  443 L
1428 4784 mt 
(0.85) s
2238 4615 mt 2238 4561 L
2238  389 mt 2238  443 L
2138 4784 mt 
(0.9) s
2907 4615 mt 2907 4561 L
2907  389 mt 2907  443 L
2767 4784 mt 
(0.95) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3537 4784 mt 
(1) s
4247 4615 mt 4247 4561 L
4247  389 mt 4247  443 L
4107 4784 mt 
(1.05) s
4917 4615 mt 4917 4561 L
4917  389 mt 4917  443 L
4817 4784 mt 
(1.1) s
5586 4615 mt 5586 4561 L
5586  389 mt 5586  443 L
5446 4784 mt 
(1.15) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 4145 mt  952 4145 L
6256 4145 mt 6202 4145 L
 703 4198 mt 
(10) s
 898 3676 mt  952 3676 L
6256 3676 mt 6202 3676 L
 703 3729 mt 
(20) s
 898 3206 mt  952 3206 L
6256 3206 mt 6202 3206 L
 703 3259 mt 
(30) s
 898 2737 mt  952 2737 L
6256 2737 mt 6202 2737 L
 703 2790 mt 
(40) s
 898 2267 mt  952 2267 L
6256 2267 mt 6202 2267 L
 703 2320 mt 
(50) s
 898 1798 mt  952 1798 L
6256 1798 mt 6202 1798 L
 703 1851 mt 
(60) s
 898 1328 mt  952 1328 L
6256 1328 mt 6202 1328 L
 703 1381 mt 
(70) s
 898  859 mt  952  859 L
6256  859 mt 6202  859 L
 703  912 mt 
(80) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 703  442 mt 
(90) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
0 94 263 0 0 -94 33 0 33 0 0 517 262 0 0 -517 
33 0 33 0 0 1315 262 0 0 -1315 33 0 33 0 0 2442 
262 0 0 -2442 33 0 33 0 0 3193 263 0 0 -3193 32 0 
33 0 0 3944 263 0 0 -3944 33 0 32 0 0 3475 263 0 
0 -3475 33 0 33 0 0 2442 262 0 0 -2442 33 0 33 0 
0 2254 262 0 0 -2254 33 0 33 0 0 986 263 0 0 -986 
32 0 33 0 0 470 263 0 0 -470 32 0 1900 4615 55 MP stroke
4018 0 1568 4615 2 MP stroke
492 35 492 247 492 915 491 1268 492 1268 492 -493 492 -810 492 -986 
492 -704 492 -564 491 -70 492 -106 479 4615 13 MP stroke

gr 

end

eplot

epage
end

showpage

cleartomark
countdictstack exch sub { end } repeat
restore

FMENDEPSF
108.22 713.64 122.8 713.64 2 L
2 Z
N
J
107.37 685.12 121.68 685.12 2 L
J
107.37 685.12 109.12 685.12 2 L
N
[3.026 3.891] 3.026 I
109.12 685.12 119.93 685.12 2 L
N
J
119.93 685.12 121.68 685.12 2 L
N
J
(spin-) 124.67 711.67 T
(stand) 124.67 701.67 T
(TZ-ZT) 124.67 683 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a\051 A) 80.67 727 T
(verage isolated pulse comparison) 97.42 727 T
0 0 0 0 1 1 1 K
250.67 616.33 258.33 727.33 R
7 X
0 0 0 0 1 1 1 K
V
N
248.67 616.67 384.67 625.67 R
V
N
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(pulse jitter/) 293.67 608.33 T
1 F
(a) 338.95 608.33 T
0 F
(40) 247.67 655.67 T
(80) 247.67 687 T
(120) 242.67 718.67 T
(b\051 Jitter histogram comparison) 256 727.33 T
(0) 318.56 618.33 T
(0.1) 344.56 618.33 T
(-0.1) 281.56 618.33 T
(-0.2) 251.56 618.33 T
(0.2) 373.56 618.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
260.33 702.67 266.33 702.67 266.33 712 273.33 712 273.33 702.67 278.33 702.67 6 L
N
(spin-) 280 710.67 T
(stand) 280 700.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
336 707.33 348.33 707.33 2 L
N
(TZ-ZT) 348.67 704.67 T
0 0 0 1 0 0 0 K
0 0 0 0 1 1 1 K
402.67 614.17 409.67 725.17 R
7 X
0 0 0 0 1 1 1 K
V
N
406 614.83 532.67 625.5 R
V
N
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
(normalized amplitude) 426.33 607.83 T
(0.8) 403.66 618.5 T
(1) 467.66 618.5 T
(1.2) 523.99 618.5 T
(30) 399 654.83 T
(60) 399 686.83 T
(90) 399 718.17 T
(c\051 Amplitude histogram comparison) 396 727.83 T
486.67 706.83 499 706.83 2 L
N
(TZ-ZT) 499.33 704.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
415 702.17 421 702.17 421 711.5 428 711.5 428 702.17 433 702.17 6 L
N
(spin-) 434.67 710.17 T
(stand) 434.67 700.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(40) 206.33 618.33 T
(-40) 105.67 618.33 T
0 0 0 1 0 0 0 K
J
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 692 1312 a Fi(Fig.)23 b(2.)31 b(Comparison)22
b(of)i(the)g(exp)r(erimen)n(tal)g(and)g(TZ-ZT)f(statistics)h(for)f
(isolated)h(pulses.)-97 1574 y Fm(W)-6 b(e)28 b(wrote)h(a)g(w)n(a)n(v)n
(eform)f(consisting)i(of)f Fh(N)34 b Fm(=)25 b(450)30
b(isolated)f(tran-)-180 1665 y(sitions.)36 b(The)26 b(electronics)h
(noise)g(in)e(the)h(w)n(a)n(v)n(eform)f(w)n(as)i(suppressed)-180
1756 y(b)n(y)33 b(recording)h(an)f(a)n(v)n(erage)i(of)f(1000)h(indep)r
(enden)n(t)d(acquisitions)j(of)-180 1848 y(the)43 b(w)n(a)n(v)n(eform.)
88 b(After)44 b(aligning)g(the)g(450)g(isolated)h(pulses,)k(w)n(e)-180
1939 y(found)31 b(their)g(a)n(v)n(erage.)53 b(F)-6 b(rom)30
b(the)h(a)n(v)n(erage)h(isolated)h(pulse)e(w)n(e)h(de-)-180
2030 y(con)n(v)n(olv)n(ed)38 b(the)g(head-sensitivit)n(y)h(function)f
(to)h(obtain)g(the)g(curv)n(e)-180 2121 y(d)p Fh(M)t(=)p
Fm(d)p Fh(x)p Fm(,)g(where)f Fh(x)e Fm(is)i(the)f(do)n(wn-trac)n(k)f
(direction)i(and)e Fh(M)46 b Fm(is)37 b(the)-180 2213
y(do)n(wn-trac)n(k)g(magnetization)h(comp)r(onen)n(t)e(normalized)i(to)
f(the)g(re-)-180 2304 y(manen)n(t)21 b(magnetization)i
Fh(M)662 2312 y Ff(r)697 2304 y Fm(.)33 b(The)23 b(head-sensitivit)n(y)
f(function)g(that)-180 2395 y(w)n(e)f(used)e(here)h(w)n(as)i(obtained)e
(b)n(y)f(running)g(a)i(detailed)g(\014nite-elemen)n(t)-180
2487 y(mo)r(del)i(of)i(the)e(utilized)h(thin-\014lm)e(head.)33
b(W)-6 b(e)24 b(next)e(\014tted)h(a)h(curv)n(e)f(of)-180
2578 y(the)i(form)512 2654 y(d)p Fh(M)8 b Fm(\()p Fh(x)p
Fm(\))p 512 2686 229 4 v 583 2754 a(d)p Fh(x)771 2703
y Fm(=)1001 2655 y Fh(A)p 862 2686 336 4 v 862 2754 a
Fm(1)18 b(+)f Fd(j)p Fh(x=a)p Fd(j)1160 2732 y Ff(k)1792
2703 y Fm(\(1\))-180 2878 y(to)34 b(the)g(data,)j(where,)g(in)d(our)g
(case,)k Fh(k)f Fm(=)e(2)p Fh(:)p Fm(7)h(and)d(the)h(transition)-180
2969 y(parameter)28 b Fh(a)e Fm(=)g(0)p Fh(:)p Fm(11)p
Fh(\026)p Fm(m.)44 b(The)29 b(amplitude)f Fh(A)g Fm(w)n(as)h
(determined)f(to)-180 3061 y(matc)n(h)18 b(the)i(amplitude)e(of)j(the)e
(data.)33 b(By)19 b(taking)h(the)f(\014rst)g(deriv)l(ativ)n(e)-180
3152 y(of)32 b(\(1\),)g(w)n(e)f(applied)g(Theorem)g(1)g(from)g([1])g
(to)g(obtain)g(the)g(triangle)-180 3243 y(heigh)n(ts)38
b(p)r(df)f Fh(f)280 3251 y Ff(H)338 3243 y Fm(\()p Fh(h)p
Fm(\).)69 b(Using)38 b(the)f(least-squares)h(parab)r(ola-\014tting)-180
3334 y(metho)r(d)f(describ)r(ed)h(in)f([1],)24 b([8],)42
b(w)n(e)d(next)d(determined)h(the)g(cross-)-180 3426
y(trac)n(k)31 b(correlation)j(width)d Fh(s)g Fm(=)g(312)908
3413 y(\027)908 3426 y(A.)i(Substituting)e(this)h(v)l(alue)f(in)-180
3517 y(Corollary)24 b(2.1)g(in)e([1],)i(w)n(e)f(found)f(the)g(v)n
(ertex)f(angle)i(to)g(b)r(e)f Fh(\022)h Fm(=)f(14)p Fh(:)p
Fm(1)1833 3485 y Fg(o)1869 3517 y Fm(.)-97 3614 y(Ha)n(ving)17
b(determined)f(the)h(TZ-ZT)h(de\014ning)f(quan)n(tities)g
Fh(f)1587 3622 y Ff(H)1645 3614 y Fm(\()p Fh(h)p Fm(\))g(and)-180
3706 y Fh(\022)r Fm(,)33 b(w)n(e)f(created)f Fh(N)39
b Fm(=)30 b(450)j(isolated)f(transitions)g(using)g(the)f(TZ-ZT)-180
3797 y(mo)r(del.)60 b(Figures)35 b(2a)g(through)e(2c)i(compare)f(the)g
(statistics)h(of)g(the)-180 3888 y(spin-stand)c(transitions)i(to)f(the)
g(mo)r(deled)f(transitions.)55 b(Figure)32 b(2a)-180
3980 y(compares)i(the)f(a)n(v)n(erage)i(pulse)f(shap)r(es,)i(Figure)f
(2b)f(compares)f(the)-180 4071 y(histograms)f(of)g(jitter)h(noise,)h
(while)e(Figure)g(2c)g(compares)g(the)f(his-)-180 4162
y(tograms)37 b(of)h(amplitude)d(v)l(ariations.)69 b(In)36
b(all)i(three)f(cases)h(w)n(e)f(can)-180 4254 y(conclude)26
b(that)f(the)g(matc)n(h)g(is)h(v)n(ery)f(go)r(o)r(d.)-180
4487 y Fe(B.)43 b(Inter)l(acting)30 b(T)-6 b(r)l(ansitions)-97
4637 y Fm(Using)30 b(the)f(same)h(recording)g(system)f(as)h(ab)r(o)n(v)
n(e,)h(w)n(e)f(wrote)h Fh(N)36 b Fm(=)-180 4728 y(450)48
b(isolated)g(dibits)e(for)i(eac)n(h)f(one)f(of)i(di\013eren)n(t)e
(dibit)g(separa-)-180 4819 y(tions,)41 b(ranging)d(b)r(et)n(w)n(een)f
Fh(a)g Fm(and)g(3)p Fh(a)p Fm(,)k(where)c Fh(a)g Fm(is)h(the)f
(transition)-180 4911 y(width)28 b(parameter.)42 b(During)27
b(the)h(writing)h(pro)r(cess,)h(w)n(e)f(used)f(write-)-180
5002 y(precomp)r(ensation)k(to)h(cancel)g(nonlinear)g(bit-shift.)55
b(That)33 b(left)g(the)-180 5093 y(nonlinear)22 b(amplitude)f(loss)i
(as)g(the)e(dominan)n(t)g(nonlinear)h(writing)h(ef-)-180
5185 y(fect.)35 b(The)26 b(dashed)f(line)h(in)f(Figure)h(3)g(sho)n(ws)g
(the)f(drop)h(of)g(the)f(dibits)-180 5276 y(amplitude)34
b(as)h(a)h(function)e(of)i(the)f(in)n(v)n(erse)f(dibit)h(separation.)63
b(As)-180 5367 y(a)35 b(reference,)k(in)c(Figure)g(3,)j(the)d(solid)h
(line)f(sho)n(ws)h(the)f(amplitude)-180 5459 y(drop)24
b(when)g(the)g(dibit)g(is)h(formed)f(as)h(a)g(linear)g(sup)r(erp)r
(osition)g(of)h(t)n(w)n(o)-180 5550 y(isolated)g(pulses)f(of)g(Figure)g
(2a.)35 b(W)-6 b(e)24 b(see)i(that)e(when)g(the)h(dibit)f(sepa-)2100
2933 y @beginspecial 92 @llx 586 @lly 306 @urx 740 @ury
2267 @rwi @setspecial
% 0000000003ffffffffffffffffffffffffffffffffffffffffffc0
% 000000000200000010000001000000080000008000000400000040
% 000000000200000010000001000000080000008000000400000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 0000000002000000000000000000000000602400c0000000000040
% 000000000200000000000000000000000020200040000000000040
% 0001a000020000000000000000000007e720efd255ca0000000040
% 0001a000020000000000000000000002e321265259cc0000000040
% 0001e000020000000000000000000002852126524d060000000040
% 00000000020000000000000038f1e386e7e1efded5ca0000000040
% fc0160000200000000000000000000000000020000000000000040
% 2400c0000200000000000000000000000000030000000000000040
% 2401a000d200138000000000000000000000000000000000000040
% 3c07e000d20f600000000000000000000000000000000000000040
% 000420006380e030000000000000000000000000000000000000c0
% 000000007200180000000000000000000000000000000000000040
% 3401e0009200070200000000000000064000000000000010800040
% 34002006720000c100000000000000020000000000000000000040
% 3c002000020000300000000000000002fdcee2a5eeef3abd9de040
% 0401e0000200000c200000007fffff8265c643252e494b18a52040
% 30000000020000031000000000000002650a41a528494998a52040
% 1c01c00002000000c000000000000006f5cfc2bdeecf32bd99a040
% 240120000200000033000000000000000000000100080000000040
% 00012800020000000e0000000000000000000001800c0000000040
% bc01f8000200000001f00000000000000000000000000000000040
% 240000000200000000300000000000000000000000000000000040
% 0000000002000000000e0000000000000000000000000000000040
% fc0000000200000000018000000000000000000000000000000040
% 840000000200000000006030000000000000000000000000000040
% 0407e0000200000000001c78000000000000000000000000000040
% 3c0120000200000000000330000000000000000000000000000040
% 3401200003800000000001e00000000000000000000000000000c0
% 2c01e0000200000000000030000000000000000000000000000040
% 00000000020000000000003c000000000000000000000000000040
% 0001a0000200000000000003000000000000000000000000000040
% 3c01a0000200000000000003c00000000000000000000000000040
% 2001e0000200000000000030300000000000000000000000000040
% 3c0000000200000000000030380000000000000000000000000040
% 200120000200000000000000070000000000000000000000000040
% 2403e000020000000000000006f000000000000000000000000040
% 3c0000000200000000000000010e00040000000000000000000040
% 2000200002000000000000000001c00a0000000000000000000040
% 3c01e00002000000000000000020380c0000000000000000000040
% 2401a0000200000000000000000007000000000000000000000040
% 000160000200000000000000000400ee0000000000000000000040
% 3807e00062000000000000000002001e0000000000000000000040
% 24042000c2000000000000000000000f8000000000000000000040
% 24000000f3800000000000000000c00070000000000000000000c0
% 3801c0009200000000000000000020000e00000000000000000040
% 0001200092000000000000000000000001c0000000000000000040
% 3c0120067200000000000000000000000038000180000000000040
% 2001c0000200000000000000000008000006000180000000000040
% 240000000200000000000000000004000001c00000000000000040
% 3c0160000200000000000000000000000000380000000000000040
% 0000c0000200000000000000000002000000060000000000000040
% 0001a000020000000000000000000100000001c100000000000040
% 000000000200000000000000000000000000003180000000200040
% 0005e0000200000000000000000000000000000fc0000000400040
% 3401200002000000a9108aa0010800400000000180000000600040
% 3400000002000000a1209280000800200000000060000000000040
% 3c0000000200000020603081eb6f000a000000001c000000000040
% 000000000204108020462080e14900040000000003000000000040
% fc040000020514a020804080f149000a0000000000e00000000040
% 2407e000020514a02190c880936d000400000000001fff00600040
% 2401200003800000000000000000000000000000000000e07000c0
% 3c0000000200000000000000000000010000000000000018600040
% 0001c0000200000000000000000000008000000000000006000040
% 3c0120000200000000000000000000000000000000000001800040
% 040120000200000000000006400000001000000000000000600040
% 0401c0000200000000000002000000000800000000000000180040
% 3c0000000200000079c3cef2fdcee0000200000000000000070040
% 00000000020000004a42529265c64000010000000000000000c040
% 24000000020000004a425292650a40000000000000000000003040
% 7c0000000200000069834cd6f5cfc0000020000000000000000fc0
% 0001a0000200000000000000000000000010000000000000000040
% bc01a0000200000000000000000000000000000000000000000040
% 2401e0000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000002000000000000000040
% fc07e0002200000000000002000000000000000000000000000040
% 840120006200000000000000000000000000400000000000000040
% 000120006200000071dff3b677a800000000200180000000000040
% 3801e000f38000004249722294b0000000000001800000000000c0
% 24000000f200000042494222949800000000000000000000000040
% 2501e00622000000719b73b666a800000000040000000000000040
% 3f0020000200000000000000000000000000000000000000000040
% 000020000200000000000000000000000000008000000000000040
% 3c01e0000200000000000000000000000000004000000000000040
% 200000000200000000000000000000000000000000000000000040
% 3c0120000200000000000000000000000000000800000000000040
% 2003e0000200000000000000000000000000000000000000000040
% 2405e0000200000000000000000000000000000100000000000040
% 3c0120000200000000000000000000000000000180000000000040
% 000000000200000001000000400820000000000000000000000040
% 0407e0000200000000000000400020000000000000000000000040
% 3c042000020000005338571c7b9bbda80000000018000000000040
% 3400000002071c70314333204b8c25300000000000000000000040
% 2c01c00002061860213025184a0b25180000000000000000000040
% 00012000020514506b706fb86b9f35a80000000001000000000040
% 0001280003800000004800240004800000000000000000000000c0
% 0001f8000200000000700038000700000000000000300000000040
% 240000000200000000000000000000000000000000100000000040
% 7c0000000200000000000000000000000000000000020000000040
% 0001e0000200000000000002000003000000000000010000600040
% bc0100000200000000000000000001000000000000002000600040
% 2401e0000200000071dff3b6778779680000000000001000000040
% 000100000200000042497222948949280000000000000200000040
% 380120000200000042494222948949300000000000000100000040
% 2401e00002000000719b73b666866b100000000000000020000040
% 240020000200000000000000000000000000000000000010000040
% fc01e0000200000000000000000000600000000000000000000040
% 0001a0000200000000000000000000000000000000000003000040
% bc016000f200000000000000000000000000000000000000000040
% 240000009200000000000000000000000000000000000000200040
% 000000003200000000000000000000000000000000000000100040
% fc00000023800000000000000000000000000000000000000100c0
% 240000004200000000000000000000000000000000000000008040
% 2401c006f200000000000180200010000803086002051000001840
% 3c0120000200000000000080000010000801084002012000000140
% 00012000020000007bbb9cbb6778defcaf393841e20679c00000c0
% 0001c000020618c04b92249a2948925cc949484002034b40000040
% 00000000020208404a1224aa2948925069494889e4024ac0000040
% 0001200002071ce07bb399bf6668dadcad3378f8044e73c0000040
% 0003e0000200000040000000000000000000000000000000000040
% 000000000200000060000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000000000000000000000000000000000000000040
% 000000000200000010000001000000080000008000000400000040
% 000000000200000010000001000000080000008000000400000040
% 0000000003ffffffffffffffffffffffffffffffffffffffffffc0
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 0000000060e0000000000000000003030000000000000000000c1e
% 000000009020000000000000000004860000000000000000001212
% 000000009060000000000000000004878000000000000000001212
% 00000000903000000000000000000484800000000000000000121e
% 000000009010000000000000000004848000000000000000001204
% 0000000066e0000000000000000003338000000000000000000ccc
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000
% 000000000000004000000000001040000000000400088800000000
% 000000000000000000000000000000000000000000088808000000
% 00000000000000fdae7ae1bf7ab6cef15cf77e6dde1089c8000000
% 0000000000000064ae2ce1134b1452919c93264652109348000000
% 0000000000000064c826811549945290d0952a46521112c8000000
% 00000000000000f44e6ae1b7eab6ccd15cf7ef6d9a0913c8000000
% 000000000000000000000000000000000080000000080008000000
% 0000000000000000000000000000000000c0000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 5 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 60 198 539 584 183.65 146.68 117.95 594.33 FMBEGINEPSF
save
countdictstack
mark
newpath
/showpage {} def


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  475   260  5830  4716 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 798 4784 mt 
(0.3) s
1791 4615 mt 1791 4561 L
1791  389 mt 1791  443 L
1691 4784 mt 
(0.4) s
2684 4615 mt 2684 4561 L
2684  389 mt 2684  443 L
2584 4784 mt 
(0.5) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3477 4784 mt 
(0.6) s
4470 4615 mt 4470 4561 L
4470  389 mt 4470  443 L
4370 4784 mt 
(0.7) s
5363 4615 mt 5363 4561 L
5363  389 mt 5363  443 L
5263 4784 mt 
(0.8) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 663 4668 mt 
(0.1) s
 898 4087 mt  952 4087 L
6256 4087 mt 6202 4087 L
 663 4140 mt 
(0.2) s
 898 3559 mt  952 3559 L
6256 3559 mt 6202 3559 L
 663 3612 mt 
(0.3) s
 898 3030 mt  952 3030 L
6256 3030 mt 6202 3030 L
 663 3083 mt 
(0.4) s
 898 2502 mt  952 2502 L
6256 2502 mt 6202 2502 L
 663 2555 mt 
(0.5) s
 898 1974 mt  952 1974 L
6256 1974 mt 6202 1974 L
 663 2027 mt 
(0.6) s
 898 1445 mt  952 1445 L
6256 1445 mt 6202 1445 L
 663 1498 mt 
(0.7) s
 898  917 mt  952  917 L
6256  917 mt 6202  917 L
 663  970 mt 
(0.8) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 663  442 mt 
(0.9) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np
DA
60 15 360 120 360 151 360 139 359 220 360 182 360 271 360 292 
359 304 360 278 360 499 360 266 360 195 359 199 360 202 360 255 
360 -31 1097 890 18 MP stroke
SO
60 0 360 184 360 0 360 169 359 166 360 0 360 151 360 148 
359 133 360 126 360 118 360 107 360 193 359 164 360 136 360 178 
360 139 1097 868 18 MP stroke

gr 
  36   36 2536 1383 FO
gs 898 389 5359 4227 MR c np

gr 
  36   36 3616 1782 FO
gs 898 389 5359 4227 MR c np

gr 
  36   36 4695 2076 FO
gs 898 389 5359 4227 MR c np

gr 
  36   36 5774 2290 FO
gs 898 389 5359 4227 MR c np

gr 
2500 1410 mt 2572 1410 L
2536 1374 mt 2536 1446 L
2500 1374 mt 2572 1446 L
2572 1374 mt 2500 1446 L
gs 898 389 5359 4227 MR c np

gr 
3580 1898 mt 3652 1898 L
3616 1862 mt 3616 1934 L
3580 1862 mt 3652 1934 L
3652 1862 mt 3580 1934 L
gs 898 389 5359 4227 MR c np

gr 
4659 2263 mt 4731 2263 L
4695 2227 mt 4695 2299 L
4659 2227 mt 4731 2299 L
4731 2227 mt 4659 2299 L
gs 898 389 5359 4227 MR c np

gr 
5738 2495 mt 5810 2495 L
5774 2459 mt 5774 2531 L
5738 2459 mt 5810 2531 L
5810 2459 mt 5738 2531 L
gs 898 389 5359 4227 MR c np

gr 
2500 1603 mt 2572 1675 L
2572 1603 mt 2500 1675 L
gs 898 389 5359 4227 MR c np

gr 
3580 2380 mt 3652 2452 L
3652 2380 mt 3580 2452 L
gs 898 389 5359 4227 MR c np

gr 
4659 2983 mt 4731 3055 L
4731 2983 mt 4659 3055 L
gs 898 389 5359 4227 MR c np

gr 
5738 3678 mt 5810 3750 L
5810 3678 mt 5738 3750 L
gs 898 389 5359 4227 MR c np

gr 
 609 4139 mt  -90 rotate
(amplitude normalized to amplitude of isolated pulse) s
90 rotate
2760 4944 mt 
(inverse dibit spacing \(1/a\)) s

end

eplot

epage
end

showpage

cleartomark
countdictstack exch sub { end } repeat
restore

FMENDEPSF
0 0 0 0 1 1 1 K
111.9 587.67 129.39 744.33 R
7 X
V
0.5 H
2 Z
N
118.29 590.33 305.29 605 R
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(.2) 121.39 619.67 T
(.6) 121.39 686 T
(.8) 121.39 719.33 T
(.4) 121.39 653.33 T
(0.3) 124.35 597 T
(0.6) 209.44 597 T
(0.9) 295.2 597 T
(dibit amplitude normalized) 0 -270 97.78 619.33 TF
(to amplitude of isolated pulse) 0 -270 110.89 614.33 TF
(inverse transition separation \050) 147.55 587.33 T
1 F
(1/a) 266.14 587.33 T
0 F
(\051) 278.92 587.33 T
J
190.6 728.33 212.46 728.33 2 L
J
190.6 728.33 192.35 728.33 2 L
N
[3.135 4.031] 3.135 I
192.35 728.33 210.71 728.33 2 L
N
J
210.71 728.33 212.46 728.33 2 L
N
(real dipulses) 217.17 726.67 T
J
190.27 717.67 212.13 717.67 2 L
N
(linear superposition) 216.84 715 T
2 7 Q
(x x x) 137.46 614.67 T
0 10 Q
(  percolation threshold) 151.86 614.67 T
1 F
(L=1.36a) 244.07 614.67 T
2 9 Q
(* * *) 137.46 636.33 T
0 10 Q
(zig-zag heights) 157.31 639.33 T
(correction only) 157.31 629.33 T
0 7 Q
(o o o) 137.46 672.67 T
0 10 Q
(  TZ-ZT with) 151.46 672.67 T
(no nonlinear) 157.31 663.33 T
(corrections) 157.31 653.33 T
0 0 0 1 0 0 0 K
J
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial 2519 3048 a Fi(Fig.)f(3.)31 b(Dibit)23 b(amplitude)g(drop)
h(plot.)2010 3254 y Fm(ration)29 b(falls)g(to)f(appro)n(ximately)f(2)p
Fh(a)p Fm(,)i(the)f(amplitude)e(drops)i(nonlin-)2010
3345 y(early)-6 b(.)2093 3450 y(T)g(o)27 b(mo)r(del)g(this)g(e\013ect)g
(with)g(the)f(TZ-ZT)i(mo)r(del,)f(w)n(e)g(tried)g(three)2010
3541 y(approac)n(hes.)39 b(First,)28 b(w)n(e)g(ran)f(the)g(TZ-ZT)g(mo)r
(del)g(ignoring)h(all)g(non-)2010 3632 y(linear)19 b(e\013ects,)g(that)
f(is,)i(w)n(e)e(ran)g(the)f(mo)r(del)g(for)i(isolated)g(pulses,)h
(plac-)2010 3724 y(ing)h(transitions)h(next)e(to)h(eac)n(h)g(other)g
(without)g(correcting)h(the)e(trian-)2010 3815 y(gle)25
b(heigh)n(ts.)35 b(P)n(ercolation)26 b(e\013ects)f(w)n(ere)h(mo)r
(deled)e(only)g(on)h(the)f(p)r(or-)2010 3906 y(tions)31
b(where)g(zig-zags)h(from)f(neigh)n(b)r(oring)g(transitions)h(touc)n(h)
e(eac)n(h)2010 3997 y(other.)i(The)18 b(result)h(of)g(this)f(mo)r(del)f
(is)i(depicted)f(with)g(`o's)i(in)e(Figure)g(3.)2010
4089 y(Next,)i(w)n(e)g(in)n(tro)r(duced)f(a)h(correction)h(of)f(the)f
(zig-zag)i(triangle)g(heigh)n(ts)2010 4180 y(according)g(to)g(equation)
f(\(7\))h(of)g([1].)33 b(This)21 b(ga)n(v)n(e)g(us)f(the)g(plot)h(of)g
(p)r(oin)n(ts)2010 4271 y(mark)n(ed)e(with)h(`*'s)h(in)f(Figure)h(3.)33
b(Since)20 b(this)g(correction)h(w)n(as)g(still)g(not)2010
4363 y(adequate)g(for)h(mo)r(deling)f(the)f(nonlinear)i(amplitude)e
(drop,)i(w)n(e)f(in)n(tro-)2010 4454 y(duced)27 b(a)i(p)r(ercolation)h
(threshold)e Fh(L)g Fm(prop)r(osed)h(in)f([9],)i(thereb)n(y)d(still)
2010 4545 y(retaining)h(the)e(correction)i(of)g(equation)f(\(7\))f(in)h
([1])h(.)38 b(F)-6 b(or)27 b(details)h(on)2010 4637 y(ho)n(w)g(to)g
(apply)f(the)g(p)r(ercolation)i(threshold)e(on)h(the)f(TZ-ZT)h(mo)r
(del,)2010 4728 y(see)37 b([8].)70 b(Con)n(trary)37 b(to)g(the)f
(\014ndings)h(in)g([9],)k(w)n(e)c(found)g(that)f(the)2010
4819 y(b)r(est-\014tting)27 b(p)r(ercolation)i(threshold)e
Fh(L)h Fm(is)g(dep)r(enden)n(t)e(on)i(the)f(dibit)2010
4911 y(separation.)60 b(A)33 b(reason)i(for)f(this)g(dep)r(endence)f
(migh)n(t)f(b)r(e)i(that)g(w)n(e)2010 5002 y(used)26
b(real)i(write)f(precomp)r(ensation)g(to)g(cancel)g(nonlinear)h
(bit-shift,)2010 5093 y(whereas)f(the)e(authors)h(of)g([9])g(canceled)h
(the)e(nonlinear)h(bit-shift)f(on-)2010 5185 y(line)18
b(only)g(after)g(the)g(spin-stand)f(acquisitions.)33
b(This)18 b(probably)g(led)g(to)2010 5276 y(a)28 b(b)r(etter)f
(accuracy)-6 b(,)28 b(since)f(an)n(y)g(real)h(write)g(precomp)r
(ensator)f(lea)n(v)n(es)2010 5367 y(some)h(residual)i(bit-shift)f(in)f
(the)h(written)g(data,)h(whic)n(h)e(ma)n(y)g(b)r(e)g(re-)2010
5459 y(mo)n(v)n(ed)j(using)i(additional)g(\014tting)f(parameters.)55
b(Nev)n(ertheless,)35 b(w)n(e)2010 5550 y(found)22 b(a)g(v)l(alue)g
(for)h(the)f(p)r(ercolation)i(threshold)e Fh(L)g Fm(that)g(b)r(est)g
(\014ts)g(the)p eop
2706 2 bop -152 -297 a Fp(IEEE)26 b(T)-7 b(ransactions)26
b(on)h(Magnetics,)g(v)n(ol.)g(33,)f(pp.)i(2704-2706,)c(Sept.)k(1997.)
1571 b Fo(2706)-90 1572 y @beginspecial 130 @llx 483
@lly 347 @urx 654 @ury 2267 @rwi @setspecial
% 30000000000000000000000000000000000000000000000000000000
% 0c000000000000000000000000000000000000000000000000000000
% 39000000000000000000000000000000000000000000000000000000
% 21000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000
% 22000000000000000000000000000000000000000000000000000000
% 2d000000000000000000000000000000000000000000000000000000
% 2d000000000000000000000000000000000000000000000000000000
% 370000007ffffffffffffffffffffffffffffffffffffffffffff000
% 20000000000000020000000800000020000000800000040000001000
% 3c000000000000020000000800000020000000800000040000001000
% 24000000000000000000000000000000000000000000000000001000
% 00000000000000000000000000000000000000000000000000001000
% 00000000000000000000000000000000000000000000000000001000
% 34000000000000000000000000000000000000000000000000181000
% 34000000000000000000000000000000000000000000000000141000
% 3c000000000000000000000000000000000000000000000000e81000
% 00000000000000000000000000000000000000000000000003001000
% 3c00000000000000000000000000000000000000000000000c001000
% 20000000000000000000000000000000000000000000000170001000
% 24000000000000000000000000000000000000000000000380001000
% 3c000000000000000000000000000000000000000000000780001000
% 00000000000000000000000000000000000000000000001800001000
% 3400000000000000000000000000000000000000000000e000001000
% 34000000000000000000000000000000000000000000030000001000
% 3c0000000000000000000000000000000000000000000c0000001000
% 00000000000000000000000000000000000000000000300000001000
% 00000000000000000000000000000000000000000000c00000001000
% 00000000000000000000000000000000000000000007000000001000
% 00000000000000000000000000000000000000000018000000001000
% 34000000000000000000000000000000000000000060000000001000
% 34000000000000000000000000000000000000000380000000001000
% 3c000000000000000000000000000000000000000f00000000001000
% 00000000000000000000000000000000000000003000000000001000
% 2c00c19e00000000000000000000000000000001c000000000001000
% 180122520000000000000000000000000000000e0000000000001000
% 34012246600000000000000000000000000000300000000000007000
% 00012244000000000000000000000000000001c00000000000001000
% fc01224800000000000000000000000000000e000000000000001000
% 8400cd9e000000000000000000000000000070000000000000001000
% 00000000000000000000000000000000000780000000000000001000
% 3c000000000000000000000000000000000700000000000000001000
% 04000000000000000000000000000000000800000000000000001000
% 04000000000000000000000000000000003000000000000000001000
% 3c000000000000000000000000000000004000000000000000001000
% 00000000000000000000000000000000018000000000000000001000
% 38000000000000000000000000000000020000000000000000001000
% 240000000000000000000000000000000c0000000000000000001000
% 25000000000000000000000000000000100000000000000000001000
% 3f000000000000000000000000000000600000000000000000001000
% 00000000000000000000000000000000800000000000000000001000
% 00000000000000000000000000000003000e00000000000000001000
% 00000000000000000000000000000004003100000000000000001000
% fc00000000000000000000000000001801c080000000000000001000
% 24000000000000000000000000000020060080000000000000001000
% 240000000000000000000000000000c0380040000000000000001000
% 3c000000000000000000000000000100400020000000000000001000
% 00000000000000000000000000000e00800010000000000000001000
% 00000000000000000000000000001e00800008000000000000001000
% 3400000000000000000000000000e001000004000000000000001000
% 34000000000000000000000000070002000002000000000000001000
% 3c000000000000000000000000180002000001000000000000001000
% 24000000000000000000000000e00004000001000000000000001000
% 7c000000000000000007800007200004000000800000000000001000
% 000000006000000007f860003c100008000000400000000000007000
% 040000000000000018001801d81000100000001c0000000000001000
% 3c000000000000002000041e2008001000000003f800000000001000
% 34000000000000002001fff4c0040020000000000700000000001000
% 2c000000000000007ffe00c300020040000000000100000000001000
% 00000000000000007800003400010040000000000080000000001000
% fc000000000000018000000800008080000000000080000000001000
% 84000000000000068000000000004100000000000040000000001000
% 00000000000000390000000000002100000000000020000000001000
% 38000000000000c20000000000001200000000000020000000081000
% 24000000000003020000000000000a00000000000010000000141000
% 2400000000000c040000000000000400000000000010000001581000
% 38000000000070040000000000000000000000000008000006001000
% 2c0000000001800800000000000000000000000000040001d0001000
% 18000000000600080000000000000000000000000004000780001000
% 34000000003800100000000000000000000000000002003000001000
% 00000000003000200000000000000000000000000002008000001000
% bc0000000000002000000000000000000000000000010e0000001000
% 24000000000000400000000000000000000000000000900000301000
% 00000000000000400000000000000000000000000001800000c01000
% 00000000000000800000000000000000000000000014400001001000
% 00000000000000800000000000000000000000000320200006001000
% 00000000003fff000000000000000000000000000480200018001000
% 38000000000000000000000000000000000000002f001e0060001000
% 2400000000000000000000000000000000020001800001ff80001000
% 240000000000000000000000000000000018800c0000000000001000
% 3800c18c000000000000000000000000002040700000000000181000
% 24012244000000000000000000000000000011000000000000541000
% 7c01224460000000000000000000000006000c00000000011c887000
% 00012244000000000000000000000000100662000000000380001000
% 00012244000000000000000000000000600b00800000000180001000
% 0000cd8c000000000000000000000000802e00600000001000001000
% 00000000000000000000000000000002034000140000002000001000
% fc000000000000000000000000000008080000018000010000001000
% 24000000000000001000000000000010500000002000020000001000
% 24000000000000003800000000000043000000000c00100000001000
% 3c000000000000079500000000000118000000000200200000001000
% 000000000000066020e00000000002c0000000000181000000001000
% 340000000001e800400c000000000e00000000000046000000001000
% 34000000003c00000006000000007a00000000000020000000001000
% 3c000000003000000000c00000014000000000000068000000001000
% 000000000000000200004000000f0000000000000308000000001000
% 040000000000000200004e0000640000000000004702000000001000
% 30000000000000000000004000100000000000048000000000001000
% 1c000000000000000000003403c00000000000980000800000001000
% 2400000000000010000010172a000000000013000000000000001000
% 00000000000000000000080078000000000620000000200000001000
% bc00000000180000000000054188000004e6000000001d0000001000
% 24000000000180400000001b0004c413c8000000000000d400001000
% fc000000000040800000023400002f20000000000000000200001000
% 8400000000001e000000026800000400000000000000000000001000
% 00000000000000000000028000000000000000000000000018001000
% 04000000000000000000190000000000000000000000000002001000
% 3c000000000000000000c48000000000000000000000000000c01000
% 34000000000000000002004000000000000000000000000000101000
% 2c000000000000000014304000000000000000000000000000001000
% 000000006000000000c0000001c00000000000000000000000007000
% 00000000000000001601000018000000000000000000000000001000
% 3c000000000000003806001080000000000000000000000000001000
% 2000000000000000b810000b00100000000000000000000000001000
% 3c000000000000020040000000080000000000000000000000001000
% 20000000000000140280000000000000000000000000000000001000
% 24000000000000400800000000000000600000000000000000001000
% 3c0000000000018030000000000200008f0000000000000000001000
% 20000000000014014000000000020000007000000000000000001000
% 3c000000000020060000000000000002000300000000000000001000
% 24000000000280100000000000000004000000000000000000001000
% 00000000003400c00000000000008000000030000000000000001000
% 3800000000701a000000000000004000000008000600000000001000
% 240000000000a000000000000000002000000101e000000000001000
% 240000000036000000000000000000400000009c0040000000001000
% 38000000000000000000000000001100000000000020000000001000
% 00000000000000000000000000000200000000000000000000001000
% 3c000000000000000000000000000000000000000006000000001000
% 20000000000000000000000000000000000000000000000000c01000
% 24000000000000000000000000000000000000000000000008001000
% 3c000000000000000000000000000000000000000000600010001000
% 000000000000000000000000000000000000000000000f7b80001000
% 00000000000000000000000000000000000000000000000000001000
% 00000000000000000000000000000000000000000000000000001000
% 30000000000000000000000000000000000000000000000000001000
% 0c000000000000000000000000000000000000000000000000001000
% 39000000000000000000000000000000000000000000000000001000
% 21000000000000020000000800000020000000800000040000001000
% 00000000000000020000000800000020000000800000040000001000
% 220000007ffffffffffffffffffffffffffffffffffffffffffff000
% 2d000000000000000000000000000000000000000000000000000000
% 2d000000000000000000000000000000000000000000000000000000
% 370000061c00000000000000000003030000000000000000000183c0
% 00000009040000000000000000000486000000000000000000024240
% 200000090c0000000000000000000487800000000000000000024240
% 3c0000090600000000000000000004848000000000000000000243c0
% 24000009020000000000000000000484800000000000000000024080
% 000000067c0000000000000000000333800000000000000000019980
% 34000000000000000000000000000000000000000000000000000000
% 34000000000000000000000000000000000000000000000000000000
% 3c000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000
% 3c000000000000000000000000000000000000000000000000000000
% 20000000000000000000000000000000000000000000000000000000
% 24000000000001000000000000210000000000100021100000000000
% 3c000000000000000000000000000000000000000021102000000000
% 000000000000037b5dd786fcf56f3bc2bbddddb3bc41172000000000
% 00000000000001495c9b844c96294a433a4c8d14a4412d2000000000
% 3400000000000149908e045493294a41a2549514a4422b2000000000
% 34000000000003689d9786ded56f3342bbdf9fb334222f2000000000
% 3c000000000000000000000000000000020000000020002000000000
% 00000000000000000000000000000000030000000000000000000000
/InitDictCount countdictstack def
gsave
save
mark
newpath
/showpage {} def
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 { } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	
	
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(4.0) FMVERSION
1 1 0 0 612 792 0 1 2 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 61 214 546 584 194 148 150.25 499.5 FMBEGINEPSF
save
countdictstack
mark
newpath
/showpage {} def


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  501   260  6461  4557 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Helvetica /ISOLatin1Encoding 144 FMSR

1 j
c1
   0    0 6914 5187 PR
6 w
DO
4 w
SO
6 w
c0
 898 4615 mt 6256 4615 L
 898  389 mt 6256  389 L
6256 4615 mt 6256  389 L
 898 4615 mt  898  389 L
6256 4615 mt 6256 4615 L
 898 4615 mt  898 4615 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
 898 4615 mt  898 4615 L
 898 4615 mt  898 4561 L
 898  389 mt  898  443 L
 798 4784 mt 
(0.3) s
1791 4615 mt 1791 4561 L
1791  389 mt 1791  443 L
1691 4784 mt 
(0.4) s
2684 4615 mt 2684 4561 L
2684  389 mt 2684  443 L
2584 4784 mt 
(0.5) s
3577 4615 mt 3577 4561 L
3577  389 mt 3577  443 L
3477 4784 mt 
(0.6) s
4470 4615 mt 4470 4561 L
4470  389 mt 4470  443 L
4370 4784 mt 
(0.7) s
5363 4615 mt 5363 4561 L
5363  389 mt 5363  443 L
5263 4784 mt 
(0.8) s
6256 4615 mt 6256 4561 L
6256  389 mt 6256  443 L
6156 4784 mt 
(0.9) s
 898 4615 mt  952 4615 L
6256 4615 mt 6202 4615 L
 783 4668 mt 
(0) s
 898 3770 mt  952 3770 L
6256 3770 mt 6202 3770 L
 503 3823 mt 
(0.005) s
 898 2925 mt  952 2925 L
6256 2925 mt 6202 2925 L
 583 2978 mt 
(0.01) s
 898 2079 mt  952 2079 L
6256 2079 mt 6202 2079 L
 503 2132 mt 
(0.015) s
 898 1234 mt  952 1234 L
6256 1234 mt 6202 1234 L
 583 1287 mt 
(0.02) s
 898  389 mt  952  389 L
6256  389 mt 6202  389 L
 503  442 mt 
(0.025) s
 898  389 mt 6256  389 L
 898 4615 mt 6256 4615 L
 898 4615 mt  898  389 L
6256 4615 mt 6256  389 L
 898  389 mt  898  389 L
6256  389 mt 6256  389 L
gs 898 389 5359 4227 MR c np

gr 
  36   36 1196 3255 FO
  36   36 1940 3127 FO
  36   36 2684 3414 FO
  36   36 3428 3548 FO
  36   36 4172 3474 FO
  36   36 4917 3315 FO
  36   36 5661 2951 FO
  36   36 6033 2883 FO
gs 898 389 5359 4227 MR c np

gr 
  36   36 1196 4110 FO
  36   36 1940 3820 FO
  36   36 2684 3550 FO
  36   36 3428 3234 FO
  36   36 4172 2976 FO
  36   36 4917 2737 FO
  36   36 5661 2486 FO
  36   36 6033 2381 FO
gs 898 389 5359 4227 MR c np

gr 
  36   36 1196 2536 FO
  36   36 1940 2208 FO
  36   36 2684 2150 FO
  36   36 3428 1886 FO
  36   36 4172 1378 FO
  36   36 4917 1101 FO
  36   36 5661  759 FO
  36   36 6033  601 FO
gs 898 389 5359 4227 MR c np
DD
372 170 372 71 372 323 373 134 372 220 372 -181 372 -218 372 -171 
372 -145 372 -281 372 -165 372 -143 372 -90 1196 4189 14 MP stroke
DA
372 -133 372 5 372 264 373 -73 372 171 372 80 372 -340 372 538 
372 -122 372 609 372 130 372 -473 372 132 1196 3466 14 MP stroke
SO
372 -211 372 34 372 610 373 59 372 422 372 -147 372 -581 372 401 
372 -240 372 199 372 -45 372 -650 372 2 1196 2742 14 MP stroke
DA
372 -68 744 -364 745 -159 744 -74 744 134 744 287 744 -128 1196 3255 8 MP stroke
DD
372 -105 744 -251 745 -239 744 -258 744 -316 744 -270 744 -290 1196 4110 8 MP stroke
SO
372 -158 744 -342 745 -277 744 -508 744 -264 744 -58 744 -328 1196 2536 8 MP stroke

gr 

end

eplot

epage
end

showpage

cleartomark
countdictstack exch sub { end } repeat
restore

FMENDEPSF
0 0 0 0 1 1 1 K
153 495 351 504 R
7 X
V
0.5 H
2 Z
N
143 498 162 664 R
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(0.3) 157.5 496 T
(0.6) 247 496 T
(0.9) 336 496 T
(0.01) 144.5 558.5 T
(0.02) 144.5 614.5 T
(inverse transition separation \050) 184 484 T
1 F
(1/a) 302.59 484 T
0 F
(\051) 315.37 484 T
(ener) 0 -270 136 483.5 TF
(gy normalized to isolated pulse ener) 0 -270 136 500.53 TF
(gy) 0 -270 136 645.05 TF
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
countdictstack InitDictCount sub { end } repeat
cleartomark
restore
grestore
 @endspecial -180 1687 a Fi(Fig.)19 b(4.)30 b(Media)19
b(noise)h(energy)g(plots.)30 b(Lines)20 b(mark)n(ed)f(with)h(`o's)e
(corresp)r(ond)-180 1766 y(to)f(the)h(TZ-ZT)e(mo)r(del.)28
b(Unmark)n(ed)16 b(lines)g(corresp)r(ond)h(to)g(spin-stand)g(data.)-180
1845 y(Solid)28 b(lines:)39 b(total)29 b(media)e(noise)h(energy)-6
b(.)45 b(Dashed)28 b(lines:)40 b(energy)28 b(in)g(the)-180
1924 y(shift-in-unison)e(\(jitter\))i(noise)f(mo)r(de)f(only)-6
b(.)42 b(Dash-dotted)29 b(lines:)37 b(energy)-180 2003
y(in)23 b(the)i(amplitude-v)l(ariations)e(noise)h(mo)r(de)f(only)-6
b(.)-180 2182 y Fm(data.)40 b(This)28 b(v)l(alue)f(w)n(as)h(determined)
e(to)h(b)r(e)h Fh(L)c Fm(=)g(1)p Fh(:)p Fm(36)p Fh(a)p
Fm(,)29 b(where)e Fh(a)g Fm(is)-180 2273 y(the)18 b(transition)h(width)
e(parameter.)32 b(In)18 b(Figure)g(3,)i(the)e(p)r(oin)n(ts)g(mark)n(ed)
-180 2365 y(with)26 b(`x's)g(represen)n(t)f(the)g(amplitude)g(drop)g
(obtained)h(with)g(the)f(TZ-)-180 2456 y(ZT)i(mo)r(del)f(and)h(the)f(p)
r(ercolation)i(threshold)f(correction.)39 b(W)-6 b(e)26
b(see)i(a)-180 2547 y(fairly)21 b(go)r(o)r(d)f(matc)n(h)f(there,)i
(with)f(sligh)n(t)g(deviations)g(as)h(the)e(dibit)g(sep-)-180
2638 y(aration)27 b(drops)f(b)r(elo)n(w)h(\(0)p Fh(:)p
Fm(7)p Fh(=a)p Fm(\))749 2607 y Fc(\000)p Fg(1)833 2638
y Fm(,)f(i.e.,)i(when)e(the)g(dibit)g(separation)-180
2730 y(b)r(ecomes)g(comparable)f(to)h(the)f(p)r(ercolation)j(threshold)
d Fh(L)p Fm(.)-97 2821 y(With)19 b(the)h(ab)r(o)n(v)n(e)f(determined)g
(p)r(ercolation)i(threshold,)g(w)n(e)f(\014nally)-180
2913 y(p)r(erformed)28 b(an)g(exp)r(erimen)n(t)f(to)h(ev)l(aluate)h
(the)f(media)f(noise)i(predic-)-180 3004 y(tions)c(of)g(the)e(TZ-ZT)i
(mo)r(del.)34 b(F)-6 b(or)24 b(eigh)n(t)g(di\013eren)n(t)g(dibit)g
(separation)-180 3095 y(ranging)h(b)r(et)n(w)n(een)g
Fh(a)f Fm(and)g(3)p Fh(a)p Fm(,)h(w)n(e)g(created)g Fh(N)k
Fm(=)21 b(450)26 b(isolated)g(dibits)-180 3187 y(using)18
b(the)f(TZ-ZT)h(mo)r(del.)32 b(After)17 b(aligning)i(the)f(dibits)f
(and)g(subtract-)-180 3278 y(ing)28 b(their)g(mean,)f(w)n(e)i(obtained)
e Fh(N)34 b Fm(=)24 b(450)29 b(media)e(noise)i(w)n(a)n(v)n(eforms)-180
3369 y(in)f(v)n(ector)h(form,)g Fh(n)p 352 3382 47 4
v 399 3390 a Ff(i)425 3369 y Fm(,)g(where)g(1)e Fd(\024)f
Fh(i)g Fd(\024)g Fm(450.)44 b(F)-6 b(rom)27 b(these)i(w)n(a)n(v)n
(eform)-180 3461 y(samples)h(w)n(e)g(computed)e(the)i(empirical)g
(media)f(noise)h(auto)r(correla-)-180 3552 y(tion)c(matrix)f(as)527
3703 y Fk(C)c Fm(=)742 3654 y(1)p 703 3685 116 4 v 703
3753 a(450)855 3601 y Fg(450)841 3626 y Fb(X)851 3800
y Ff(i)p Fg(=1)974 3703 y Fh(n)p 974 3716 47 4 v 20 x
Ff(i)1068 3703 y Fh(n)p 1068 3716 V -36 x Fg(T)1114 3723
y Ff(i)1162 3703 y Fh(:)609 b Fm(\(2\))-180 3906 y(W)-6
b(e)21 b(next)f(p)r(erformed)h(the)g(Karh)n(unen-Lo)r(ev)n(e)f(decomp)r
(osition)h([10])i(to)-180 3997 y(break)e(the)f(noise)i(in)n(to)f(its)g
(principal)g(comp)r(onen)n(ts)f(\(mo)r(des\).)33 b(W)-6
b(e)20 b(fol-)-180 4089 y(lo)n(w)n(ed)27 b(the)g(same)f(pro)r(cedure)h
(with)g(the)f(spin-stand)g(data)h(and)g(com-)-180 4180
y(pared)37 b(the)f(results)h(in)g(Figure)g(4.)68 b(In)36
b(Figure)h(4)g(the)g(lines)g(whose)-180 4271 y(p)r(oin)n(ts)27
b(are)g(mark)n(ed)e(with)h(`o's)i(represen)n(t)e(the)g(TZ-ZT)h(mo)r
(del)f(data,)-180 4363 y(whereas)d(the)e(corresp)r(onding)i(lines)f
(with)g(no)g(p)r(oin)n(t)f(markings)g(repre-)-180 4454
y(sen)n(t)27 b(the)h(spin-stand)f(data.)40 b(The)28 b(solid)h(lines)f
(sho)n(w)g(the)g(total)g(dibit)-180 4545 y(media)j(noise)g(energy)g
(\(normalized)g(b)n(y)f(the)h(energy)g(of)h(an)f(isolated)-180
4637 y(pulse\))h(as)g(a)h(function)f(of)g(in)n(v)n(erse)g(dibit)g
(separation.)54 b(The)32 b(dashed)-180 4728 y(lines)19
b(compare)f(the)g(shift-in-unison)h(\(jitter\))g(noise)g(mo)r(de)f
(energies)h(of)-180 4819 y(the)27 b(TZ-ZT)g(mo)r(del)g(and)f(the)h(exp)
r(erimen)n(tal)f(data.)39 b(The)27 b(amplitude)-180 4911
y(v)l(ariations)32 b(media)e(noise)i(mo)r(de)e(energies)i(are)f
(compared)f(with)h(the)-180 5002 y(dash-dotted)f(lines.)49
b(In)30 b(Figure)h(4,)h(observ)n(e)e(that)g(the)g(media)g(noise)-180
5093 y(energy)i(starts)h(decreasing)g(for)g(in)n(v)n(erse)f(dibit)g
(separations)i(greater)-180 5185 y(than)18 b(0)p Fh(:)p
Fm(7)p Fh(=a)p Fm(.)34 b(This)20 b(is)f(b)r(ecause)g(at)h(these)f
(densities)g(the)g(signal)h(itself)g(is)-180 5276 y(so)j(small)g(that)g
(v)l(ariations)g(in)g(the)f(signal)i(itself)g(pro)r(duce)e(small)h
(noise)-180 5367 y(to)r(o.)59 b(F)-6 b(rom)33 b(Figure)h(4)g(w)n(e)g
(observ)n(e)g(that)f(the)g(TZ-ZT)h(mo)r(del)g(pre-)-180
5459 y(dictions)c(are)g(fairly)g(accurate)h(for)f(dibit)f(separations)i
(greater)f(than)-180 5550 y(\(0)p Fh(:)p Fm(65)p Fh(=a)p
Fm(\))94 5518 y Fc(\000)p Fg(1)199 5550 y Fm(=)21 b(1)p
Fh(:)p Fm(54)p Fh(a)p Fm(,)26 b(i.e.,)f(for)g(dibit)e(separations)i
(that)f(are)g(appro)n(x-)2010 83 y(imately)29 b(grater)g(than)g(the)g
(p)r(ercolation)h(threshold)f Fh(L)p Fm(.)45 b(This)30
b(co)n(v)n(ers)2010 174 y(the)g(linear)h(densities)f(of)h(in)n(terest)f
(b)r(ecause)h(recording)g(systems)e(op-)2010 266 y(erate)h(at)g
(transition)h(separations)g(that)f(do)g(not)f(go)i(b)r(elo)n(w)g(3)f
(to)g(2.5)2010 357 y(times)k Fh(a)p Fm(,)i(whic)n(h)e(is)h(far)g
(greater)h(than)d(the)h(p)r(ercolation)i(threshold)2010
448 y Fh(L)22 b Fm(=)f(1)p Fh(:)p Fm(36)p Fh(a)p Fm(.)35
b(Since)23 b(the)g(accuracy)h(of)g(the)f(TZ-ZT)h(mo)r(del)f(go)r(es)i
(do)n(wn)2010 540 y(to)g(transition)h(separations)g(of)f(1)p
Fh(:)p Fm(5)p Fh(a)p Fm(,)i(w)n(e)e(conclude)g(that)f(the)h(TZ-ZT)2010
631 y(mo)r(del)35 b(is)i(w)n(ell)g(suited)f(for)g(sim)n(ulating)g
(future)g(systems)f(that)h(will)2010 722 y(c)n(hallenge)27
b(the)e(b)r(ounds)g(of)i(ac)n(hiev)l(able)e(linear)i(densit)n(y)-6
b(.)2719 935 y Fj(IV.)45 b(Conclusion)2093 1100 y Fm(W)-6
b(e)31 b(compared)g(the)g(results)h(of)g(the)f(triangle)h(zig-zag)h
(transition)2010 1191 y(\(TZ-ZT\))28 b(signal)h(and)e(media)h(noise)g
(mo)r(del)f(to)h(exp)r(erimen)n(tal)f(data.)2010 1282
y(W)-6 b(e)30 b(also)h(presen)n(ted)f(a)g(metho)r(d)f(of)i(matc)n(hing)
e(the)h(mo)r(del)g(parame-)2010 1374 y(ters)i(to)g(a)g(real)h
(recording)f(system.)52 b(Our)31 b(\014ndings)g(are)i(that,)g(after)
2010 1465 y(appropriate)e(matc)n(hing)f(of)i(the)e(mo)r(del)g
(parameters,)j(the)d(mo)r(del)g(is)2010 1556 y(a)f(fairly)h(accurate)f
(represen)n(tation)g(of)h(real)g(data.)43 b(Sp)r(eci\014cally)-6
b(,)30 b(the)2010 1648 y(TZ-ZT)24 b(mo)r(del)f(is)i(extremely)d
(accurate)i(at)g(predicting)g(signal)h(w)n(a)n(v)n(e-)2010
1739 y(forms)e(and)g(media)g(noise)h(for)g(isolated)g(transitions.)35
b(F)-6 b(or)23 b(in)n(teracting)2010 1830 y(transitions,)40
b(the)c(TZ-ZT)g(mo)r(del)g(is)g(fairly)h(accurate)g(at)f(densities)2010
1922 y(of)30 b(in)n(terest,)g(that)f(is,)i(at)e(linear)h(densities)g
(that)f(do)g(not)g(exceed)f(the)2010 2013 y(in)n(v)n(erse)e(p)r
(ercolation)h(threshold)e(length.)2675 2225 y Fj(A)n(ckno)n(wledgment)
2093 2391 y Fm(W)-6 b(e)34 b(thank)g(the)g(emplo)n(y)n(ees)h(of)g
(Read-Rite)f(Corp)r(oration,)39 b(esp)r(e-)2010 2482
y(cially)28 b(W)-6 b(enjie)28 b(Chen,)g(Ming)g(Huang)f(and)g(Marcos)h
(Lederman,)f(who)2010 2573 y(w)n(en)n(t)e(out)h(of)g(their)g(w)n(a)n(y)
g(to)g(help)f(with)h(this)g(pro)t(ject.)2803 2785 y Fj(References)2055
2938 y Fi([1])41 b(A.)19 b(Ka)n(v)n(\024)-33 b(ci)n(\023)g(c)20
b(and)f(J.)g(M.)g(F.)g(Moura,)g(\\Exp)r(edien)n(t)i(media)e(noise)g(mo)
r(del-)2171 3017 y(ing:)28 b(Isolated)19 b(and)g(in)n(teracting)g
(transitions,")g Fa(IEEE)j(T)-5 b(r)l(ans.)20 b(Magn.)p
Fi(,)2171 3096 y(v)n(ol.)j(32,)h(pp.)f(3875{3877,)j(Sept.)f(1996.)2055
3175 y([2])41 b(J.)22 b(Caroselli)g(and)h(J.)f(K.)g(W)-6
b(olf,)22 b(\\Applications)h(of)f(a)h(new)g(sim)n(ulation)2171
3254 y(mo)r(del)28 b(for)h(media)f(noise)i(limited)e(magnetic)h
(recording)h(c)n(hannels,")2171 3333 y Fa(IEEE)d(T)-5
b(r)l(ans.)26 b(Magn.)p Fi(,)d(v)n(ol.)g(32,)h(pp.)f(3917{3919,)j
(Sept.)f(1996.)2055 3412 y([3])41 b(J.-G.)23 b(Zh)n(u)h(and)g(N.)f(H.)g
(Bertram,)f(\\Micromagnetic)i(studies)g(of)g(thin)2171
3490 y(metallic)j(\014lms,")g Fa(J.)i(Appl.)i(Phys.)p
Fi(,)d(v)n(ol.)g(63,)h(pp.)e(3248{3253,)k(April)2171
3569 y(1988.)2055 3648 y([4])41 b(T.)20 b(C.)g(Arnoldussen)g(and)i(H.)d
(C.)h(T)-6 b(ong,)22 b(\\Zigzag)g(transition)e(pro\014les,)2171
3727 y(noise,)i(and)h(correlation)g(statistics)f(in)g(highly)g(orien)n
(ted)h(longitudinal)2171 3806 y(media,")e Fa(IEEE)k(T)-5
b(r)l(ans.)25 b(Magn.)p Fi(,)c(v)n(ol.)h(22,)g(pp.)g(889{891,)i(Sept.)e
(1986.)2055 3885 y([5])41 b(B.)35 b(K.)f(Middleton)i(and)g(J.)f(J.)g
(Miles,)h(\\Recorded)h(magnetization)2171 3964 y(distributions)21
b(in)f(thin)i(\014lm)d(media,")i Fa(IEEE)j(T)-5 b(r)l(ans.)23
b(Magn.)p Fi(,)e(v)n(ol.)g(27,)2171 4043 y(pp.)j(4954{4959,)h(No)n(v.)f
(1991.)2055 4121 y([6])41 b(Y.-S.)31 b(T)-6 b(ang,)34
b(\\Explicit)f(form)n(ula)d(for)h(thin)h(\014lm)f(disk)h(noise)g(based)
2171 4200 y(on)c(zig-zag)h(domain)e(transitions,")i Fa(IEEE)i(T)-5
b(r)l(ans.)30 b(Magn.)p Fi(,)e(v)n(ol.)g(24,)2171 4279
y(pp.)c(3102{3104,)h(No)n(v.)f(1988.)2055 4358 y([7])41
b(A.)30 b(Ka)n(v)n(\024)-33 b(ci)n(\023)g(c)30 b(and)h(J.)f(M.)g(F.)f
(Moura,)j(\\Statistical)f(study)g(of)f(zig-zag)2171 4437
y(transition)d(b)r(oundaries)g(in)f(longitudinal)g(digital)h(magnetic)f
(record-)2171 4516 y(ing.")d(submitted)h(to)g Fa(IEEE)j(T)-5
b(r)l(ans.)26 b(Magn.)p Fi(,)d(30)h(pages,)h(Aug.)e(1996.)2055
4595 y([8])41 b(A.)27 b(Ka)n(v)n(\024)-33 b(ci)n(\023)g(c)27
b(and)h(J.)f(M.)g(F.)f(Moura,)i(\\Signal)g(generation)g(mo)r(del)f(for)
2171 4674 y(high)17 b(densit)n(y)g(magnetic)f(recording,")i(in)e
Fa(Pr)l(o)l(c.)k(IEEE)h(GLOBECOM)2171 4752 y(97)p Fi(,)j(\(London\),)h
(No)n(v.)f(1996.)2055 4831 y([9])41 b(R.)33 b(D.)h(Brandt,)i(A.)e(J.)f
(Armstrong,)i(H.)e(N.)h(Bertram,)g(and)h(J.)f(K.)2171
4910 y(W)-6 b(olf,)37 b(\\A)d(simple)f(statistical)i(mo)r(del)f(of)g
(partial)g(erasure)g(in)h(thin)2171 4989 y(\014lm)23
b(disk)h(recording)g(systems,")g Fa(IEEE)j(T)-5 b(r)l(ans.)27
b(Magn.)p Fi(,)d(v)n(ol.)g(MA)n(G-)2171 5068 y(27,)g(pp.)f(4978{4980,)j
(No)n(v.)d(1991.)2020 5147 y([10])41 b(J.-G.)32 b(Zh)n(u)h(and)h(X.-G.)
d(Y)-6 b(e,)35 b(\\Impact)f(of)e(medium)f(noise)i(on)g(v)l(ari-)2171
5226 y(ous)c(partial)g(resp)r(onse)h(c)n(hannels,")i
Fa(IEEE)g(T)-5 b(r)l(ans.)31 b(Magn.)p Fi(,)f(v)n(ol.)f(31,)2171
5304 y(pp.)24 b(3087{3089,)h(No)n(v.)f(1995.)p eop end
userdict /end-hook known{end-hook}if
